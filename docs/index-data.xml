<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Emily Riederer</title>
<link>https://emilyriederer.com/#category=data</link>
<atom:link href="https://emilyriederer.com/index-data.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.4.542</generator>
<lastBuildDate>Mon, 15 Jan 2024 06:00:00 GMT</lastBuildDate>
<item>
  <title>Crosspost: Why You Need Data Documentation in 2024</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/docs-personas/</link>
  <description><![CDATA[ 





<p>We’ve all worked with poorly documented dataset, and we all know it isn’t pretty. However, it’s surprisingly easy for teams to continue to fall into “documentation debt” and deprioritize this foundational work in favor of flashy new projects. These tradeoff discussions may become even more painful in 2024 as teams are continually asked to do more with less.</p>
<p>Recently, I had the opportunity to articulate some of the underappreciated benefits of data documentation in a <a href="https://www.selectstar.com/blog/why-you-need-data-documentation-in-2024">cross-post with Select Star</a>. This builds on my prior post showing that <a href="../..\post/docs-closer-than-you-think/">documentation can be strategically created throughout the data development process</a>. To make the case for taking those “raw” documentation resources to a polished final form, I return to the jobs-to-be-done framework that I’ve previously employed to talk about <a href="../..\post/team-of-packages/">the value of innersource packages</a>. In this perspective, documentation is like hiring an extra resource (or more!) to your team.</p>
<p>Some of the jobs discussed are:</p>
<ul>
<li>Developer Advocacy and Product Evangelism for users
<ul>
<li>Users think data doesn’t exist if they can’t find it, they think data is broken if they misinterpret it</li>
<li>Documentation is both a “user interface” to make data usage easy and a bulwark against confusion and frustration</li>
</ul></li>
<li>Producct and Project Management for developers
<ul>
<li>Data intent can “drift” over time</li>
<li>As teams evolve and collaborate, this risks initial intent getting lost and poluted (after all, what really is a “customer”?)</li>
<li>Documentation serves as a contract and coach for one or more teams to force clarity and consistency of intent</li>
</ul></li>
<li>Chief of Staff oversight for data leaders
<ul>
<li>Leaders face increasing demands in data governance: navigating changing privacy regulations, fighting decaying data quality, and discerning their next strategic investments</li>
<li>Documentation is their command center to understand what data assets exists and where to better spot risks and opportunities</li>
</ul></li>
</ul>
<p>If you or your team works on data documentation, I’d love to hear what other “jobs” you have found that data documentation performs in your organization.</p>



 ]]></description>
  <category>data</category>
  <category>workflow</category>
  <category>elt</category>
  <category>crosspost</category>
  <guid>https://emilyriederer.com/post/docs-personas/</guid>
  <pubDate>Mon, 15 Jan 2024 06:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/docs-personas/featured.PNG" medium="image"/>
</item>
<item>
  <title>Crosspost: Why you’re closer to data documentation than you think</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/docs-closer-than-you-think/</link>
  <description><![CDATA[ 





<p>Documentation can be a make-or-break for the success of a data initiative, but it’s too often considered an optional nice-to-have. I’m a big believer that writing is thinking. Similarly, documenting is planning, executing, and validating.</p>
<p>Previously, I’ve explored how <a href="https://emilyriederer.netlify.app/post/latent-lasting-documentation/">we can create latent and lasting documentation</a> of data products and how <a href="https://emilyriederer.netlify.app/post/column-name-contracts/">column names can be self documenting</a>.</p>
<p>Recently, I had the opportunity to expand on these ideas in a <a href="https://www.selectstar.com/blog/why-youre-closer-to-data-documentation-than-you-think">cross-post with Select Star</a>. I argue that teams can produce high-quality and maintainable documentation with low overhead with a form of “documentation-driven development”. That is, smartly structuring and re-using artifacts from the development process into long-term documentation. For example:</p>
<ul>
<li>At the planning stage:
<ul>
<li>Structuring requirements docs in the form of data dictionaries</li>
<li>Creating early alignment on higher-order concepts like entity definitions (and <em>writing them down</em>)</li>
<li>Mentally beta testing data usability with an entity-relationship diagram</li>
</ul></li>
<li>At the development stage:
<ul>
<li>Ensuring relevant parts of internal “development documentation” (e.g.&nbsp;dbt column definitions, docstrings) are published to a format and location accessible to users</li>
<li>With different information but similar motivation to ER diagrams, sharing the full orchestration DAG to help users trace column-level lineage and internalize how each field maps to a real-world data generating process</li>
<li>Sharing data tests being executed (the “user contract”) and their results</li>
</ul></li>
<li>Throughout the lifecycle:
<ul>
<li>Answering questions “in public” (e.g.&nbsp;Slack versus email) to create a searchable collection of insights</li>
<li>Producing table usage statistics to help large, decentralized orgs capture the “wisdom of the crowds”</li>
</ul></li>
</ul>
<p>If you or your team works on data documentation, I’d love to hear what other patterns you’ve found to collect useful documentation assets during a data development process.</p>



 ]]></description>
  <category>data</category>
  <category>workflow</category>
  <category>elt</category>
  <category>crosspost</category>
  <guid>https://emilyriederer.com/post/docs-closer-than-you-think/</guid>
  <pubDate>Fri, 05 Jan 2024 06:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/docs-closer-than-you-think/featured.PNG" medium="image"/>
</item>
<item>
  <title>Scaling Personalized Volunteer Emails</title>
  <link>https://emilyriederer.com/talk/midterm-email/</link>
  <description><![CDATA[ 



<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Quick Links</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Abstract</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">Slides</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-4" aria-controls="tabset-1-4" aria-selected="false">Video</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<p><span><i class="bi bi-file-bar-graph"></i> <a href="slides.pdf">Slides</a> </span><br>
<span><i class="bi bi-play"></i> <a href="https://youtu.be/5UGUcgxTWTM">Video</a> </span></p>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<p>In this four-minute lightning talk, I explain how Two Million Texans used components of our existing data stack to provide personalized success metrics and action recommendations to over 5,000 volunteers in the lead up to the 2022 midterm elections. I briefly describe our pipeline and how we frontloaded key computational steps in BigQuery to circumvent limitations of downstream tools.</p>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<div id="slides" style="width:100%; aspect-ratio:16/11;">
<embed src="slides.pdf#zoom=Fit" width="100%" height="100%">
</div>
</div>
<div id="tabset-1-4" class="tab-pane" aria-labelledby="tabset-1-4-tab">
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/5UGUcgxTWTM" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
</div>
</div>
</div>



 ]]></description>
  <category>data</category>
  <category>elt</category>
  <guid>https://emilyriederer.com/talk/midterm-email/</guid>
  <pubDate>Wed, 21 Jun 2023 05:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/talk/midterm-email/featured.png" medium="image" type="image/png" height="80" width="144"/>
</item>
<item>
  <title>Industry information management for causal inference</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/causal-data/</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://emilyriederer.com/post/causal-data/featured.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Data strategy motivated by causal methods</figcaption>
</figure>
</div>
<p><em>This post summarizes the final third of my talk at Data Science Salon NYC in June 2023. Please see the <a href="../../talk/causal-design-patterns">talk details</a> for more content.</em></p>
<p>Techniques of observational causal inference are becoming increasingly popular in industry as a complement to experimentation. Causal methods offer the promise of accelerating measurement agendas and facilitating the estimation of previously un-measurable targets by allowing analysts to extract causal insights from “found” data (e.g.&nbsp;observational data collected without specific intent). However, if executed without careful attention to their assumptions and limitations, they can lead to spurious conclusions.</p>
<p>Both experimental and observational methods attempt to address the <strong>fundamental problem of causal inference</strong>: that is, the fact that for a given treatment of interest, we can never “see” the <em>individual-level outcome</em> both for the case when an individual received a treatment and a counterfactual scenario in which <em>for the same individual in the exact same context</em> that treatment was withheld. Some literature casts this as a “missing data” problem.<sup>1</sup> Counterfactual data is uncollectable; however, this fundamental missingness can be partially mitigated by diligent collection of <em>other</em> types of quantitative and qualitative information to control for confounding<sup>2</sup> and interrogate assumptions.</p>
<p>In this post, I argue that industry has unique advantages when using causal techniques over the social science disciplines that originated many foundational methods due to industry’s (theoretically) superior ability to observe and capture relevant supplemental data and context. Examining the implicit assumptions in common <a href="../../post/causal-design-patterns">causal design patterns</a> motivates the types of proactive enterprise information management – including data, metadata, and knowledge management – that will help preserve the raw inputs that future data scientists will need to effectively deploy causal techniques on historical data and answer questions that our organizations cannot even anticipate today. By casting an intentionally wide net on what information we observationally collect, we increase the likelihood that the future “found” data will have what those analysts need to succeed.</p>
<section id="why-industry-needs-causal-inference" class="level2">
<h2 class="anchored" data-anchor-id="why-industry-needs-causal-inference">Why industry needs causal inference</h2>
<p><img src="https://emilyriederer.com/post/causal-data/why-not-experiment.png" class="img-fluid"></p>
<p>Industry data science tends to highly value the role of A/B testing and experimentation. However, there are many situations where experimentation is not an optimal approach to learning. Experiments can be infeasible if we worry about the ethics or reputational risk of offering disparate customer treatments; they may be impractical in situations that are hard to randomize or avoid spillover effects; they can be costly to run and configure either in direct or opportunity costs; and, finally, they can just be <em>slow</em> if we wish to measure complex and long-term impacts on customer behaviors (e.g.&nbsp;retention, lifetime value).</p>
</section>
<section id="what-causal-methods-require" class="level2">
<h2 class="anchored" data-anchor-id="what-causal-methods-require">What causal methods require</h2>
<p><img src="https://emilyriederer.com/post/causal-data/patterns-and-variation.png" class="img-fluid"></p>
<p>These limitations are one of the reasons why observational causal inference is gaining increasing popularity in industry. Methods of observational causal inference allows us to estimate treatment effects without randomized controlled experimentation by using existing historical data. At the highest level, these methods work by replacing <em>randomization</em> with strategies to exploit other forms of <em>semi-random variation</em> in historical exposures of a population to a treatment. Since this semi-random <em>variation</em> could be susceptible to confounding, observational methods supplement variation with <em>additional data</em> to control for other observable sources of bias in our estimates and <em>contextual assumptions</em> about the data generating process.</p>
<p>My previous post on <a href="../../post/causal-design-patterns">causal design patterns</a> outlines a number of foundational causal methods, but I’ll briefly recap to emphasize the different ways that sources of variation, data, and context are used:</p>
<ul>
<li><strong>Stratification and Inverse Propensity Score Weighting</strong>:
<ul>
<li>Exploits “similar” populations of treated and untreated individuals</li>
<li>Assumes we can observe and control for common causes of the treatment and the outcome</li>
</ul></li>
<li><strong>Regression Discontinuity</strong>:
<ul>
<li>Exploits a sharp, semi-arbitrary cut-off between treated and untreated individuals</li>
<li>Assumes that the outcome is continuous with respect to the assigment variable and the assignment mechanism is unknown to individuals (to avoid self-selection)</li>
</ul></li>
<li><strong>Difference in Differences</strong>:
<ul>
<li>Exploits variation between <em>behavior over time</em> of treated and untreated <em>groups</em></li>
<li>Assumes that the treatment assignment is unrelated to expected future outcomes and that the treatment is well-isolated to the treatment group</li>
</ul></li>
</ul>
<p>Notably, the assumptions mentioned above are largely untestable statistically (e.g.&nbsp;not like testing for normality or multicolinearity) but rely on knowledge of past strategies and policies that guided differential treatment in historical data.<sup>3</sup></p>
</section>
<section id="industrys-unique-advantages-deploying-causal-inference" class="level2">
<h2 class="anchored" data-anchor-id="industrys-unique-advantages-deploying-causal-inference">Industry’s unique advantages deploying causal inference</h2>
<p><img src="https://emilyriederer.com/post/causal-data/industry-advantages.png" class="img-fluid"></p>
<p>Many causal methods originated in fields like epidemiology, economics, political science, and other social sciences. In such fields, direct experimentation is often impossible and even first-hand data collection is less common. Often, researchers may have to rely on pre-existing data sources like censuses, surveys, and administrative data (e.g.&nbsp;electronic health records).</p>
<p>Despite the lineage of these methods, industry has many advantages over traditional research fields in using them because each company controls the entire “universe” in which its customers exist. This should in theory provide a distinct advantage when collecting each of the three “ingredients” that causal methods use to replace randomization:</p>
<ul>
<li><strong>Variation</strong>: We control customer engagement strategies through methods like customer segmentation or models. Subsequent customer treatments are completely known to us but inherently have some arbitrary, judgmental component to exploit</li>
<li><strong>Data</strong>: We tend to be able to collect more measurements of our customers both as a snapshot (more variety in fields) and longitudinally (more observations over time) that can be brought into our analyses to control for confounders<sup>4</sup>, reduce other sources of variation in our estimate, and have additional ‘out of time’ data left over to conduct forms of validation like placebo tests</li>
<li><strong>Context</strong>: We tend to know how past strategies were set-up, how they looked to individuals involved, and <em>why</em> those decisions were made. This can be critical in reasoning whether our assumptions hold</li>
</ul>
<p>However, to convert this theoretical benefit to a practical one requires information management.</p>
</section>
<section id="data-management-for-causal-inference" class="level2">
<h2 class="anchored" data-anchor-id="data-management-for-causal-inference">Data management for causal inference</h2>
<p><img src="https://emilyriederer.com/post/causal-data/featured.png" class="img-fluid"></p>
<p>While all causal methods will be enhanced with better enterprise information management, it’s easiest to see the motivation by thinking back to specific examples. Causal inference can benefit from better data, metadata, and knowledge management. These are illustrated by propensity score weighting, regression discontinuity, and diff-in-diff respectively.</p>
<p><strong>Integrated Data Management</strong></p>
<p>Earlier, we posited that one advantage that industry has over academia for causal inference is access to richer historical data sources as a higher level of resolution (more measures per individual at more time points). A rich set of customer measures is critical for stratification and propensity score weighting where we attempt to control for selection on observables by balancing populations along dimensions that might be common causes of treatment assignment and outcome. (And, we may also wish to control for other unrelated sources of variation that effect only the outcome to develop more precise estimates.)</p>
<p>However, this is only true if customer data is proactively <em>collected, cleaned, and harmonized</em> across sources in the true spirit of a customer 360 view. Enterprises may collect data about customers from many different operational systems – for example, demographic information provided at registration, digital data on their logins and web activity, campaign data on attempted customer touchpoints and engagement, behavioral or fulfillment data on purchases / subscription renewals / etc. Any of these sources could be useful “observables” that help close confounding pathways in our analyses.</p>
<p>To make this data useful and accessible for analysis, it must be <em>proactively integrated</em> into a common source like a data warehouse, <em>well-documented</em> to help future users understand the nuances of each system, <em>harmonized</em> so fields have standard definitions (e.g.&nbsp;common definitions of an “account” and a “customer”), and <em>unified</em> by using techniques like entity resolution to ensure all sources share common identifiers so that they can be merged for analysis.</p>
<p><strong>Metadata Management</strong></p>
<p>Beyond those “typical” sources of customer data, our past customer strategies create data beyond the data directly generated by our customers. Metadata about past campaigns such as precise business logic on the different treatments offered (e.g.&nbsp;if sending customers a discount, what algorithmically determined the amount?), the campaign targeting and segmentation (e.g.&nbsp;What historical behaviors were used to segments customers? Was treatment determined by a predictive model?), and launch timing can all be critical to clearly identifying those sources of variation that we wish to exploit. For example, we might know that we once ran an re-engagement campaign to attempt the nudge interaction from customers who didn’t log-in to a website for some amount of time, but knowing whether that campaign was targeting customers &gt;30 days inactive or &gt;45 days inactive impacts our ability to analyze it with a regression discontinuity.</p>
<p>This means that we need to <em>treat metadata as first-class data</em> and ensure that it is extracted from operational source systems (or intent docs, config files, etc.), structured in a machine-readable format, and preserved in analytical data stores along with our customer data.</p>
<p>The importance of “metadata as data” extends beyond business-as-usual organization strategies. We can also fuel future causal inference with better metadata management of past formal experiments and execution errors.</p>
<p>As discussed above, formal experiments may represent a substantial <em>investment</em> in company resources so the data collected from them should be regarded as an <em>asset</em>. Beyond their utility for one-time reads and decisions, experiment designs and results should be carefully catalogued along with the assigned treatment group and the randomization criteria (such as fields characterizing <a href="https://www.census.gov/programs-surveys/acs/technical-documentation/user-notes/2022-07.html">sampling weights</a> as provided in US Census data). This can support future <em>observational</em> analysis of past experiments, including generalizing and transporting results to different populations.</p>
<p>Furthermore, even <em>mistakes</em> in executing past strategies may become “natural experiments” to help businesses understand scenarios that they might never have prioritized for testing. So, machine-readable incident logs and impacted populations can be useful as well.</p>
<p><strong>Knowledge Management</strong></p>
<p>Of course, not <em>all</em> information can be condensed into a nice, machine-readable spreadsheet. Methods like difference-in-differences illustrate how conceptual context can also help us battle-test assumptions like whether the decision-to-treat could have spilled over into the control population or been influenced by an anticipated change in the future outcome. This is the one area where industry may sometimes <em>lag</em> social sciences in information since some population-level treatments like a state law or local ordinance often have documented histories through the legislative process, news coverage, and historical knowledge about their implementation.</p>
<p>Industry can catch up on knowledge management by documenting and preserving in a centralized knowledge repository key information about strategic decisions undertaken, the motivating factors, and the anticipated customer experience. Such documents are inevitably created when working on new projects through memos ad decks intended to communicate the business case, intent, and expected customer experience. However, proactively figuring out how to <em>organize and index</em> this information through a classification system and <em>democratize access</em> through centralized knowledge repositories is critical to giving future users entree to this tribal knowledge. Projects like Airbnb’s <a href="https://github.com/airbnb/knowledge-repo">Knowledge Repository</a> suggest what such a system might look like in practice.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>For example, see https://arxiv.org/abs/1710.10251↩︎</p></li>
<li id="fn2"><p>If you’ve heard of ‘selection on observables’ in causal literature, richer data means observables!↩︎</p></li>
<li id="fn3"><p>There are some exceptions to this like placebo tests, bunching checks, etc.↩︎</p></li>
<li id="fn4"><p>Notable, the availability of more data absolutely does <em>not</em> mean that we should simply “dump in” all the data we have. Controlling for certain variables like colliders is counterproductive.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>causal</category>
  <category>data</category>
  <guid>https://emilyriederer.com/post/causal-data/</guid>
  <pubDate>Tue, 30 May 2023 05:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/causal-data/featured.png" medium="image" type="image/png" height="60" width="144"/>
</item>
<item>
  <title>DataFold Data Quality Meet Up</title>
  <link>https://emilyriederer.com/talk/meetup-datafold/</link>
  <description><![CDATA[ 



<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Quick Links</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Abstract</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">Slides</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-4" aria-controls="tabset-1-4" aria-selected="false">Video</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<p><span><i class="bi bi-file-bar-graph"></i> <a href="slides.pdf">Slides</a> </span><br>
<span><i class="bi bi-play"></i> <a href="https://www.youtube.com/watch?v=uAe74zdLHbM">Video</a> </span></p>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<p>This is the full recording from Datafold’s 9th Data Quality Meetup on Thursday, May 11th, 2023, which was focused on ‘Running dbt at scale’.</p>
<p>Following our usual structure, each of our speakers present a lightning talk and then we transition into a panel discussion moderated by Gleb Mezhanskiy - who pulls in the audiences’ questions.</p>
<p>We had 6 guest speakers &amp; panelists: 1. Emily Riederer @ Capital One - “Operationalizing Column Name Contracts” 2. Felix Kreitschmann and Jorrit Posor @ FINN Auto - “Supercharging Analytics Engineers: How to save time and prevent technical debt by automating CI checks” 3. Alexandra Gronemeyer @ Airbyte - “adopting and running dbt within a small data team at Airbyte” 4. Jason Jones @ Virgin Media O2 - “Zero to 200: scaling analytics engineering within an enterprise” 5. Sung Won Chung @ dbt Labs - “Experiences implementing dbt at scale”</p>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<div id="slides" style="width:100%; aspect-ratio:16/11;">
<embed src="slides.pdf#zoom=Fit" width="100%" height="100%">
</div>
</div>
<div id="tabset-1-4" class="tab-pane" aria-labelledby="tabset-1-4-tab">
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/uAe74zdLHbM" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
</div>
</div>
</div>



 ]]></description>
  <category>elt</category>
  <category>data</category>
  <guid>https://emilyriederer.com/talk/meetup-datafold/</guid>
  <pubDate>Fri, 12 May 2023 05:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/talk/meetup-datafold/featured.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Crosspost: The Art of Abstraction in ETL</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/abstraction-airbyte/</link>
  <description><![CDATA[ 





<p><img src="https://emilyriederer.com/post/abstraction-airbyte/featured.PNG" class="img-fluid"></p>
<p>I previously shared the first in my three-part series of guest posts on Airbyte’s developer blog about ETL. The first focused on errors in data extraction. The next two focused on the countless, small decisions one makes when loading data, and finally the DataOps burden to keep things up-and-running.</p>
<p>This post serves only to serve as a quick reference to those posts:</p>
<ul>
<li><a href="https://airbyte.com/blog/dodging-data-extraction-errors">Dodging extraction errors</a></li>
<li><a href="https://airbyte.com/blog/loading-data-in-etl">Making sound loading decisions</a></li>
<li><a href="https://airbyte.com/blog/etl-good-practices">Keeping the good things going</a></li>
</ul>



 ]]></description>
  <category>data</category>
  <category>workflow</category>
  <category>elt</category>
  <category>crosspost</category>
  <guid>https://emilyriederer.com/post/abstraction-airbyte/</guid>
  <pubDate>Wed, 03 May 2023 05:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/abstraction-airbyte/featured.PNG" medium="image"/>
</item>
<item>
  <title>The Art of Abstraction in ETL: Dodging Data Extraction Errors</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/abstraction-extraction/</link>
  <description><![CDATA[ 





<p><img src="https://emilyriederer.com/post/abstraction-extraction/featured.png" class="img-fluid"></p>
<p>Whenever I think about data developer tooling, I always like to take the perspectives of:</p>
<ol type="1">
<li>Understanding what higher-level abstractions that it provides that help eliminate rote work or reduce mental overhead for data teams. In the spirit of <a href="../..\post/team-of-packages/">my post on the jobs-to-be-done of innersource analysis tools</a>, this can be framed as what ‘jobs’ that tool can be hired to do (and with what level of responsibility and autonomy)</li>
<li>Interrogating the likely failure modes in the data stack based on the mechanics of the system, in the spirit of my <a href="../..\post/grouping-data-quality/">call for hypothesis-driven data quality testing</a></li>
</ol>
<p>These two themes motivated my recent guest post for Airbyte’s developer blog on <a href="https://airbyte.com/blog/dodging-data-extraction-errors">The Art of Abstraction in ETL: Dodging Data Extraction Errors</a>. In this post, I argue:</p>
<blockquote class="blockquote">
<p>Cooking a meal versus grocery shopping. Interior decorating versus loading the moving van. Transformation versus Extract-Load. It’s human nature to get excited by flashy outcomes and, consequently, the most proximate processes that evidently created them.</p>
</blockquote>
<blockquote class="blockquote">
<p>This pattern repeats in the data world. Conferences, blog posts, corporate roadmaps, and even budgets focus on data transformation and the allure of “business insights” that might follow. The steps to extract and load data are sometimes discounted as a trivial exercise of scripting and scheduling a few API calls.</p>
</blockquote>
<blockquote class="blockquote">
<p>However, the elegance of Extract-Load is not just the outcome but the execution – the art of things not going wrong. Just as interior decorating cannot salvage a painting damaged in transit or a carefully planned menu cannot be prepared if half of the ingredients are out-of-stock, the Extract-Load steps of data processing have countless pitfalls which can sideline data teams from their ambitious agendas and aspirations.</p>
</blockquote>
<p>I then go on to explore common challenges in successfully extracting data from an API and the abstractions that can aid in this process.</p>
<p>Please check out the full post on Airbyte’s site! I hope it resonates.</p>



 ]]></description>
  <category>data</category>
  <category>workflow</category>
  <category>elt</category>
  <category>crosspost</category>
  <guid>https://emilyriederer.com/post/abstraction-extraction/</guid>
  <pubDate>Wed, 22 Mar 2023 05:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/abstraction-extraction/featured.PNG" medium="image"/>
</item>
<item>
  <title>The Data (error) Generating Process</title>
  <link>https://emilyriederer.com/talk/data-error-gen/</link>
  <description><![CDATA[ 



<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Quick Links</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Abstract</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">Slides</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-4" aria-controls="tabset-1-4" aria-selected="false">Video</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<p><span><i class="bi bi-file-bar-graph"></i> <a href="slides.pdf">Slides</a> </span><br>
<span><i class="bi bi-play"></i> <a href="https://www.youtube.com/watch?v=LkfP4dEv11Q">Video</a> </span><br>
<span><i class="bi bi-pencil"></i> <a href="../../post/grouping-data-quality/">Post - Why Group Data Tests?</a> </span><br>
<span><i class="bi bi-pencil"></i> <a href="../../post/grouping-data-quality-update/">Post - Grouped Data Tests in dbt-utils</a> </span></p>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<p>Statisticians often approach probabilistic modeling by first understanding the conceptual data generating process. However, when validating messy real-world data, the technical aspects of the data generating process is largely ignored.</p>
<p>In this talk, I will argue the case for developing more semantically meaningful and well-curated data tests by incorporating both conceptual and technical aspects of “how the data gets made”.</p>
<p>To illustrate these concepts, we will explore the NYC subway rides open dataset to see how the simple act of reasoning about real-world events their collection through ETL processes can help craft far more sensitive and expressive data quality checks. I will also illustrate how to implement such checks based on new features which I recently contributed to the open-source <code>dbt-utils</code> package.</p>
<p>Audience members should leave this talk with a clear framework in mind for ideating better tests for their own pipelines.</p>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<div id="slides" style="width:100%; aspect-ratio:16/11;">
<embed src="slides.pdf#zoom=Fit" width="100%" height="100%">
</div>
</div>
<div id="tabset-1-4" class="tab-pane" aria-labelledby="tabset-1-4-tab">
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/LkfP4dEv11Q" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
</div>
</div>
</div>



 ]]></description>
  <category>data</category>
  <guid>https://emilyriederer.com/talk/data-error-gen/</guid>
  <pubDate>Sat, 12 Nov 2022 06:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/talk/data-error-gen/featured.png" medium="image" type="image/png" height="54" width="144"/>
</item>
<item>
  <title>Goin’ to Carolina in my mind (or on my hard drive)</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/duckdb-carolina/</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://emilyriederer.com/post/duckdb-carolina/featured.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Photo Credit to <a href="https://unsplash.com/@element5digital">Element5 Digital</a> on Unsplash</figcaption>
</figure>
</div>
<p>There comes a time in every analyst’s life when data becomes too big for their laptop’s RAM. While open-source tools like R, python, and SQL have made “team of one” data analysts ever more powerful, analysts abilities to derive value from their skillsets are highly interdependent with the tools at their disposal.</p>
<p>For R and python, the size of datasets becomes a limiting factor to local processing; for a SQL-focused analyst, the existence of a database is prerequisite, as the gap between “democratized” SQL <em>querying</em> skills and data engineering and database management skills is not insignificant. The ever-increasing number of managed cloud services (from data warehouses, containers, hosted IDEs and notebooks) offer a trendy and effective solution. However, budget constraints, technical know-how, security concerns, or tight-timelines can all be headwinds to adoption.</p>
<p>So what’s an analyst to do when they have the knowledge and tools but not the infrastructure to tackle their problem?</p>
<p><a href="https://DuckDB.org/"><code>DuckDB</code></a> is quickly gaining popularity as a solution to some of these problems. DuckDB is a no-dependency, serverless database management system that can help parse massive amounts of data out-of-memory via familiar SQL, python, and R APIs. Key features include:</p>
<ul>
<li><strong>Easy set-up</strong>: Easily installed as an executable or embedded within R or python packages</li>
<li><strong>Columnar storage</strong>: For efficient retrieval and vectorized computation in analytics settings</li>
<li><strong>No installation or infrastructure required</strong>: Runs seamlessly on a local machine launched from an executable</li>
<li><strong>No loading required</strong>: Can read external CSV and Parquet files <em>and</em> can smartly exploit Hive-partitioned Parquet datasets in optimization</li>
<li><strong>Expressive SQL</strong>: Provides semantic sugar for analytical SQL uses with clauses like <code>except</code> and <code>group by all</code> (see blog <a href="https://DuckDB.org/2022/05/04/friendlier-sql.html">here</a>)</li>
</ul>
<p>This combination of features can empower analysts to use what they have and what they know to ease into the processing of much larger datasets.</p>
<p>In this post, I’ll walk through a scrappy, minimum-viable setup for analysts using <code>DuckDB</code>, motivated by the <a href="https://www.ncsbe.gov/results-data">North Carolina State Board of Election</a>’s rich voter data. Those interested can follow along in <a href="https://github.com/emilyriederer/nc-votes-DuckDB">this repo</a> and put it to the test by launching a free 8GB RAM GitHub Codespaces.</p>
<p>This is very much <em>not</em> a demonstration of best practices of anything. It’s also not a technical benchmarking of the speed and capabilities of <code>DuckDB</code> versus alternatives. (That ground is well-trod. If interested, see <a href="https://DuckDB.org/2021/05/14/sql-on-pandas.html">a head-to-head to pandas</a> or <a href="https://benchmark.clickhouse.com/">a matrix of comparisons across database alternatives</a>.) If anything, it is perhaps a “user experience benchmark”, or a description of a minimum-viable set-up to help analysts use what they know to do what they need to do.</p>
<section id="motivation-north-carolina-election-data" class="level2">
<h2 class="anchored" data-anchor-id="motivation-north-carolina-election-data">Motivation: North Carolina election data</h2>
<p>North Carolina (which began accepting ballots in early September for the upcoming November midterm elections) offers a rich collection of voter data, including daily-updating information on the current election, full voter registration data, and ten years of voting history.</p>
<ul>
<li>NC 2022 midterm early vote data from <a href="https://www.ncsbe.gov/results-data">NCSBE</a> (~6K records as-of 9/23 and growing fast!)</li>
<li>NC voter registration file from <a href="https://www.ncsbe.gov/results-data">NCSBE</a> (~9M records / 3.7G unzipped, will be static for this cycle once registration closes in October)</li>
<li>NC 10-year voter history file from <a href="https://www.ncsbe.gov/results-data">NCSBE</a> (~22M records / 5G unzipped, static)</li>
</ul>
<p>All of these files are released as zipped full-population (as opposed to delta) CSV files.</p>
<p>One can imagine that this data is of great interest to campaign staff, political scientists, pollsters, and run-of-the-mill political junkies and prognosticators. However, the file sizes of registration and history data, which is critical for predicting turnout and detecting divergent trends, could be prohibitive.</p>
<p>Beyond these files, analysis using this data could surely be enriched by additional third-party sources such as:</p>
<ul>
<li>Current Population Survey 2022 November voting supplement from <a href="https://www.census.gov/data/datasets/time-series/demo/cps/cps-supp_cps-repwgt/cps-voting.html">US Census Bureau</a></li>
<li>County-level past election results from <a href="https://dataverse.harvard.edu/file.xhtml?fileId=6104822&amp;version=10.0">MIT Election Lab via Harvard Dataverse</a></li>
<li>Countless other data sources either from the US Census, public or internal campaign polls, organization-specific mobilizaton efforts, etc.</li>
</ul>
<p>Your mileage may vary based on your system RAM, but many run-of-the-mill consumer laptops might struggle to let R or python load all of this data into memory. Or, a SQL-focused analyst might yearn for a database to handle all these complex joins.</p>
<p>So how can <code>DuckDB</code> assist?</p>
</section>
<section id="duckdb-highlights" class="level2">
<h2 class="anchored" data-anchor-id="duckdb-highlights">DuckDB highlights</h2>
<p>To explain, we’ll first level-set with a brief demo of some of the most relevant features of <code>DuckDB</code>.</p>
<p>Suppose we have flat files of data, like a <code>sample.csv</code> (just many orders of magnitude larger!)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>:[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>:[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>:[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]})</span>
<span id="cb1-3">df.head()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   a  b  c
0  1  4  7
1  2  5  8
2  3  6  9</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">df.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sample.csv'</span>, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
<p><code>DuckDB</code> can directly infer it’s schema and read it in a SQL-like interface by using functions like <code>read_csv_auto()</code> in the <code>FROM</code> clause.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> duckdb</span>
<span id="cb4-2">con <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duckdb.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>()</span>
<span id="cb4-3">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select * from read_csv_auto('sample.csv')"</span>).fetchdf()</span>
<span id="cb4-4">df.head()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   a  b  c
0  1  4  7
1  2  5  8
2  3  6  9</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">con.close()</span></code></pre></div>
</div>
<p>While very useful, this is of course bulky to type. We may also set-up a persistent DuckDB database as a <code>.duckdb</code> file as save tables with CTAS statements, as with any normal relational database. Below, we create the <code>sample-db.duckdb</code> database and add one table and one view with our data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">con <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duckdb.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sample-db.duckdb'</span>)</span>
<span id="cb7-2">ctas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"create or replace table sample as (select * from read_csv_auto('sample.csv'));"</span></span>
<span id="cb7-3">con.execute(ctas)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;duckdb.DuckDBPyConnection object at 0x0000000030026F70&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">cvas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"create or replace view sample_vw as (select * from read_csv_auto('sample.csv'));"</span> </span>
<span id="cb9-2">con.execute(cvas)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;duckdb.DuckDBPyConnection object at 0x0000000030026F70&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">con.close()</span></code></pre></div>
</div>
<p>Now, suppose the data in <code>sample.csv</code> changes (now with 4 rows versus 3).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>:[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>:[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>:[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]})</span>
<span id="cb12-2">df.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sample.csv'</span>, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
<p>Our table stored the data directly within the database (“disconnected” from the file) so it remains the same as before whereas our view changed.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">con <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duckdb.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sample-db.duckdb'</span>)</span>
<span id="cb13-2">df1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select count(1) from sample"</span>).fetchdf()</span>
<span id="cb13-3">df2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select count(1) from sample_vw"</span>).fetchdf()</span>
<span id="cb13-4">con.close()</span>
<span id="cb13-5">df1.head()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   count(1)
0         3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">df2.head()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   count(1)
0         4</code></pre>
</div>
</div>
<p>(Here, I focus just on the features we will use; not strictly the coolest or most important. I highly encourage taking a spin through the <a href="https://duckdb.org/docs/guides/python/sql_on_pandas">docs</a> for countless features not discussed – like directly querying from or fetching to pandas and Arrow formats, an alternative relational API, etc.)</p>
</section>
<section id="data-management-pattern" class="level2">
<h2 class="anchored" data-anchor-id="data-management-pattern">Data management pattern</h2>
<p>With these features in mind, we return to the problem at hand. How can an analyst mimic the experience of having the infrastructure needed to do their work?</p>
<p>One approach could look something like the following. As a one-time exercise someone would:</p>
<ol type="1">
<li>Download all relevant files</li>
<li>(Optionally) Convert large, static files to Parquet versus CSV. DuckDB handles both well, but Parquet has some benefits that we’ll discuss in the next section</li>
<li>Create a DuckDB database with references to the files as <code>view</code>s</li>
</ol>
<p>Then, any analyst wanting to interact with the data could:</p>
<ol type="1">
<li>Interact with DuckDB as with any database connection</li>
<li>Whenever needed, re-download the files to the same name/directory to “refresh” the “database”</li>
</ol>
<p>The <a href="https://github.com/emilyriederer/nc-votes-duckdb">nc-votes-duckdb</a> GitHub repo shows this flow in practice. If you want to follow along, you can click <code>Code &gt; Create codespaces on master</code> and follow the more detailed instructions in the <code>README.md</code> or at the bottom of this post.</p>
<section id="one-time-set-up" class="level3">
<h3 class="anchored" data-anchor-id="one-time-set-up">One-time set-up</h3>
<p>The scripts for the first set of steps are in the <code>etl</code> subdirectory. The e-step (extract) isn’t all that interesting – just some basic python scripts for downloading files from the internet, unzipping, and moving them around. These land the raw data in the <code>data/raw</code> subdirectory.</p>
<p>Data transformation mostly involves converting large CSVs to Parquet format (and dropping personally-identifying fields from the data on principle). As mentioned above, this step is optional but has some benefits. First, if one person is “configuring” a database for many analysts, Parquet compression makes files smaller for storage and sharing. Second, at query-time Parquet is:</p>
<ul>
<li>More reliably structured with a well-defined schema</li>
<li>Faster to retrieve due to columnar storage</li>
<li>Able to be pruned by a savvy database optimizer (when appropriately partitioned by columns relevant to common query patterns)</li>
</ul>
<p><a href="https://duckdb.org/docs/guides/import/parquet_export">Conversion from CSV to Parquet</a> itself can be done with DuckDB. However, as of writing, I don’t believe that writing to a Hive-partitioned dataset is possible, so for this step, I used <code>pyarrow</code>, the python interface to <a href="https://arrow.apache.org/">Apache Arrow</a> (another promising, memory-conserving data processing framework.)</p>
<p>This snippet from <a href="https://raw.githubusercontent.com/emilyriederer/nc-votes-duckdb/master/etl/transform-register.py">etl/transform-register.py</a> demonstrates streaming a CSV by chunk and writing it out to county-level partitions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert to hive-partitioned parquet</span></span>
<span id="cb17-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.exists(path_temp):</span>
<span id="cb17-3">    shutil.rmtree(path_temp)</span>
<span id="cb17-4"></span>
<span id="cb17-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> csv.open_csv(path_raw, </span>
<span id="cb17-6">                  convert_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> opts_convr_reg, </span>
<span id="cb17-7">                  parse_options <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> opts_parse,</span>
<span id="cb17-8">                  read_options <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> opts_read_reg) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> reader:</span>
<span id="cb17-9"></span>
<span id="cb17-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> next_chunk <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> reader:</span>
<span id="cb17-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> next_chunk <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb17-12">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb17-13">        tbl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pa.Table.from_batches([next_chunk])</span>
<span id="cb17-14">        pq.write_to_dataset(</span>
<span id="cb17-15">                tbl,</span>
<span id="cb17-16">                root_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> path_temp,</span>
<span id="cb17-17">                use_dictionary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cols_reg_dict,</span>
<span id="cb17-18">                partition_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'county_id'</span>]</span>
<span id="cb17-19">        )</span></code></pre></div>
</div>
<p>(Notably: counties are rather imbalanced in size and not the most important geography in many election contexts. This is for example purpose only, but partitions should always be picked based on how you expect to use the data. )</p>
<p>Once all the data in transformed, we can “load” our DuckDB database with relative-path references to our data. Again, this step can be done through any DuckDB API or the command line. Below, I use python in the <a href="https://github.com/emilyriederer/nc-votes-duckdb/blob/master/etl/load-db.py">etl/load-db.py</a> to create the <code>nc.duckdb</code> database and create references to the different datasets.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> duckdb</span>
<span id="cb18-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clean-up if already exists</span></span>
<span id="cb18-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.exists(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nc.duckdb'</span>):</span>
<span id="cb18-6">  os.remove(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nc.duckdb'</span>)</span>
<span id="cb18-7"></span>
<span id="cb18-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create new duckdb files </span></span>
<span id="cb18-9">con <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duckdb.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nc.duckdb'</span>)</span>
<span id="cb18-10"></span>
<span id="cb18-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate SQL to register tables</span></span>
<span id="cb18-12">template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb18-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  CREATE VIEW </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{view_name}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> as </span></span>
<span id="cb18-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  (select * from read_parquet('</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{path}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{opts}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb18-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  """</span></span>
<span id="cb18-16">data_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb18-17">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'early_vote'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/early_vt.parquet'</span>,</span>
<span id="cb18-18">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hist_gen'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/history_general/*/*.parquet'</span>,</span>
<span id="cb18-19">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hist_oth'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/history_other/*/*.parquet'</span>,</span>
<span id="cb18-20">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'register'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/register/*/*.parquet'</span>,</span>
<span id="cb18-21">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cps_suppl'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/cps_suppl.parquet'</span></span>
<span id="cb18-22">}</span>
<span id="cb18-23">partitioned <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hist_gen'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hist_pri'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'register'</span>]</span>
<span id="cb18-24"></span>
<span id="cb18-25"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k,v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> data_dict.items():</span>
<span id="cb18-26"></span>
<span id="cb18-27">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Loading </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{view_name}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> data..."</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(view_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> k))</span>
<span id="cb18-28">  opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', HIVE_PARTITIONING=1'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> partitioned <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb18-29">  cvas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> template.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(view_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> k, path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v, opts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> opt)</span>
<span id="cb18-30">  con.execute(cvas)</span>
<span id="cb18-31"></span>
<span id="cb18-32">con.close()</span></code></pre></div>
</div>
<p>Similarly, other views could be defined as desired that query these views to do further data transformation.</p>
</section>
<section id="ongoing-usage" class="level3">
<h3 class="anchored" data-anchor-id="ongoing-usage">Ongoing usage</h3>
<p>Due to the decoupling of storage and compute, ongoing data management is nearly trivial. With this “infrastructure” set-up, analysts would need only to selectively redownload any changed datasets (in my project, using the <code>extract-.*.py</code> scripts as needed) to allow their queries to pull in the latest data.</p>
<p>Big picture, that means that (after initial set-up) an analyst would have no more overhead “managing their database” than they would with a “typical” CSV-driven workflow. Specifically for this project, the early votes data is the only dataset that changes frequently. For ease-of-use, it could even be left in CSV format to make the download process even easier for any users.</p>
</section>
</section>
<section id="data-access-patterns" class="level2">
<h2 class="anchored" data-anchor-id="data-access-patterns">Data access patterns</h2>
<p>With this set-up in place, analysts can then use their favorite tools to query the data.</p>
<section id="python" class="level3">
<h3 class="anchored" data-anchor-id="python">python</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> duckdb</span>
<span id="cb19-2">con <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duckdb.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nc.duckdb'</span>)</span>
<span id="cb19-3">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select count(1) from early_vote'</span>).fetchdf()</span>
<span id="cb19-4">con.close()</span></code></pre></div>
</div>
</section>
<section id="r" class="level3">
<h3 class="anchored" data-anchor-id="r">R</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(duckdb)</span>
<span id="cb20-2">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">duckdb</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nc.duckdb'</span>) )</span>
<span id="cb20-3">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbGetQuery</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select count(1) from early_vote'</span>)</span>
<span id="cb20-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbDisconnect</span>(con, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shutdown =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
</section>
<section id="cli" class="level3">
<h3 class="anchored" data-anchor-id="cli">CLI</h3>
<pre><code>duckdb my-db.duckdb
&gt; select count(1) from early_vote</code></pre>
</section>
<section id="sql-ide-dbeaver" class="level3">
<h3 class="anchored" data-anchor-id="sql-ide-dbeaver">SQL IDE (DBeaver)</h3>
<p>DuckDB also works with open-source database IDEs like <a href="https://dbeaver.com/">DBeaver</a> for the full, “traditional” database experience. The <a href="https://duckdb.org/docs/guides/sql_editors/dbeaver">DuckDB website</a> gives full set-up instructions. With DBeaver, analysts get the “full” database experience with navigable access to table schemas and metadata.</p>
<p><img src="https://emilyriederer.com/post/duckdb-carolina/dbeaver-query.png" class="img-fluid"></p>
<p><img src="https://emilyriederer.com/post/duckdb-carolina/dbeaver-er.png" class="img-fluid"></p>
<p>Notably <strong>if you are using relative file paths in your view definitions, you have to launch DBeaver from your command line after moving into the appropriate working directory</strong>. (Thanks to <a href="https://twitter.com/Mause_me/status/1571126401482510336?s=20&amp;t=uYOnuHSjZcjkrbwYb0aXvA">Elliana May on Twitter</a> for the pointer.) (In the terminal: <code>cd my/dir/path; dbeaver</code>)</p>
</section>
</section>
<section id="codespaces-demo" class="level2">
<h2 class="anchored" data-anchor-id="codespaces-demo">Codespaces Demo</h2>
<p>So can DuckDB help analysts wrangle the whole state of North Carolina with 8GB RAM? To find out, launch a GitHub Codespaces from the <a href="https://github.com/emilyriederer/nc-votes-duckdb">nc-votes-duckdb</a> repo and see for yourself!</p>
<ol type="1">
<li><p>Launch on Codespaces</p></li>
<li><p>Set-up environment:</p></li>
</ol>
<pre><code>python3 -m venv venv
source venv/bin/activate
python3 -m pip install -r requirements.txt</code></pre>
<ol start="3" type="1">
<li>Pull all raw data:</li>
</ol>
<pre><code>chmod +x etl/extract-all.sh
etl/extract-all.sh</code></pre>
<ol start="4" type="1">
<li>Transform all raw data:</li>
</ol>
<pre><code>chmod +x etl/transform-all.sh
etl/transform-all.sh</code></pre>
<ol start="5" type="1">
<li>Create duckdb database:</li>
</ol>
<pre><code>python etl/load-db.py</code></pre>
<ol start="6" type="1">
<li>(Optional) Install duckdb CLI</li>
</ol>
<pre><code>chmod +x get-duckdb-cli.sh
./get-duckdb-cli.sh</code></pre>
<ol start="7" type="1">
<li>Run sample queries</li>
</ol>
<p>7a. Run sample queries in CLI</p>
<p>Launch the CLI:</p>
<pre><code>./duckdb nc.duckdb
.timer on</code></pre>
<p>(Note: you can exit CLI with Ctrl+D)</p>
<p>Try out some sample queries. For example, we might wonder how many past general elections that early voters have voted in before:</p>
<pre><code>with voter_general as (
select early_vote.ncid, count(1) as n
from 
  early_vote 
  left join 
  hist_gen 
  on early_vote.ncid = hist_gen.ncid 
group by 1)
select n, count(1) as freq
from voter_general
group by 1
order by 1
;</code></pre>
<p>And, this question is more interesting if we join on registration data to learn how many prior general elections each voter was eligible to vote in:</p>
<pre><code>with voter_general as (
select 
  early_vote.ncid, 
  extract('year' from register.registr_dt) as register_year, 
  count(1) as n
from 
  early_vote 
  left join 
  hist_gen 
  on early_vote.ncid = hist_gen.ncid 
  left join
  register
  on early_vote.ncid = register.ncid
group by 1,2)
select
  n, 
  case 
  when register_year &lt; 2012 then 'Pre-2012'
  else register_year
  end as register_year,
  count(1) as freq
from voter_general
group by 1,2
order by 1,2
;</code></pre>
<p>(Yes, of course <em>date</em> matters more than year here, etc. etc. This is purely to demonstrate <code>duckdb</code> not rigorous analysis!)</p>
<p>7b. Run sample queries in python</p>
<p>In python: See sample queries in <code>test-query.py</code> file</p>
<ol start="8" type="1">
<li>Run <code>free</code> in the terminal to marvel at what 8GB of RAM can do!</li>
</ol>


</section>

 ]]></description>
  <category>data</category>
  <category>sql</category>
  <guid>https://emilyriederer.com/post/duckdb-carolina/</guid>
  <pubDate>Sun, 25 Sep 2022 05:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/duckdb-carolina/featured.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Oh, I’m sure it’s probably nothing</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/nulls-polyglot/</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://emilyriederer.com/post/nulls-polyglot/featured.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Photo credit to <a href="https://unsplash.com/@davideragusa">Davide Ragusa</a> on Unsplash</figcaption>
</figure>
</div>
<p>Language interoperability and different ways of enabling “polyglot” workflows have seemed to take centerstage in the data world recently:</p>
<ul>
<li><a href="https://arrow.apache.org/">Apache Arrow</a> promises a language-independent memory format for interoperability, - <a href="https://www.rstudio.com/blog/rstudio-is-becoming-posit/">RStudio</a> its rebranding as Posit to cement their place as a leader in language-agnostic data tooling,</li>
<li>RStudio simultaneously announced <a href="https://quarto.org/">Quarto</a> as an interoperable alternative to RMarkdown which will treat python, Julia, and JS as first-class citizens</li>
<li>dbt has released its beta of <a href="https://docs.getdbt.com/docs/building-a-dbt-project/building-models/python-models">python models</a> to extend is previously SQL-focused paradigm</li>
</ul>
<p>As a general matter, these are all exciting advances with great potential to aid in different workflows <em>when used judiciously</em>. However, it also poses the question: what cognitive burdens do we alleviate and which do we add when our projects begin to leverage multiple languages?</p>
<p>Despite common data analysis tools like SQL, R, and python being high-level languages with declarative interfaces (in the case of R’s <code>tidyverse</code> and python’s <code>pandas</code>), successful usage still requires understanding the underlying assumptions and operations of each tool. There is not such thing as a truly declarative language; only those that generally make decisions that the user likes well-enough to ask for the “what” and delegate the “how”. These differences can emerge at many different levels: such as foundational issues like whether data structures are copied or modified in-place or broader design choices like default hyperparameters in machine learning libraries (e.g.&nbsp;python’s <code>scikitlearn</code> notoriously uses regularized logistic regression as the default for logistic regression.) Somewhere along that spectrum lies the fickle issue of handling null values.</p>
<p>In this post, I recap a quick case study of how incautious null handling risks data analysis validity. Then, taking a step back, I compare how R, python, and SQL behave differently when confront with null values and the implications for analysts switching between languages.</p>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">TLDR</h2>
<p>A summary of these different behaviors is provided below:</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;"><strong>R</strong></th>
<th style="text-align: center;"><strong>python</strong></th>
<th style="text-align: center;"><strong>SQL</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><em>Column Aggregation</em></td>
<td style="text-align: center;">NA</td>
<td style="text-align: center;">np: NA<br>pd: Value</td>
<td style="text-align: center;">Value</td>
</tr>
<tr class="even">
<td style="text-align: center;"><em>Row-wise Transformation</em></td>
<td style="text-align: center;">NA</td>
<td style="text-align: center;">NA</td>
<td style="text-align: center;">NA</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><em>Joining</em></td>
<td style="text-align: center;">Match by default</td>
<td style="text-align: center;">Match</td>
<td style="text-align: center;">No match</td>
</tr>
<tr class="even">
<td style="text-align: center;"><em>Filtering</em></td>
<td style="text-align: center;">No match</td>
<td style="text-align: center;">Match</td>
<td style="text-align: center;">No match</td>
</tr>
</tbody>
</table>
</section>
<section id="case-study" class="level2">
<h2 class="anchored" data-anchor-id="case-study">Case Study</h2>
<p>Before comparing different languages, let’s walk through a brief case study to see all the way that “lurking” nulls can surprise a junior analyst in any one language and observe a few different “contours” of the problem space.</p>
<p>Consider two tables in a retailer’s database. The <code>spend</code> table reports total sales by month and store identifier (null if online).</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>  STORE_ID MONTH AMT_SPEND
1        1     1 100.12011
2        2     1 100.31441
3       NA     1 100.40517
4        1     2  99.67098
5        2     2  98.39703
6       NA     2  98.81231
7        1     3 102.27124
8        2     3 100.20843
9       NA     3        NA</code></pre>
</div>
</div>
<p>Similarly, the <code>returns</code> table reports returned sales at the same grain.</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>  STORE_ID MONTH AMT_RETURN
1        1     1         NA
2        2     1   9.972159
3       NA     1  10.071639
4        1     2   9.798444
5        2     2  10.254347
6       NA     2   9.881071
7        1     3  10.108880
8        2     3   9.951398
9       NA     3   9.849277</code></pre>
</div>
</div>
<p>In both cases, nulls are used in the <code>'AMT_*'</code> fields to denote zeros for the respective <code>month x store_id</code> combinations`.</p>
<p>To calculate something as simple as the average gross spend per store across months, an analyst might attempt to write:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> </span>
<span id="cb3-2">  store_id, </span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">avg</span>(amt_spend)</span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> spend</span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">group</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">by</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">order</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">by</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">store_id</th>
<th style="text-align: right;">avg(amt_spend)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">NA</td>
<td style="text-align: right;">99.60874</td>
</tr>
<tr class="even">
<td style="text-align: right;">1</td>
<td style="text-align: right;">100.68744</td>
</tr>
<tr class="odd">
<td style="text-align: right;">2</td>
<td style="text-align: right;">99.63996</td>
</tr>
</tbody>
</table>
</div>
<p>However, because SQL silently drops nulls in column aggregations, the online spend is not appropriately “penalized” for its lack of March spend. The averages across all three stores look nearly equal.</p>
<p>Not only is this answer “wrong”, it can also be thought of as fundamentally changing the <strong>computand</strong> (a word I just made up. In statistics, we talk about estimands as “the conceptual thing we are trying to estimate with an estimator”. Here, we aren’t estimating anything – just computing. But, there’s still a concentual “thing we are trying to measure” and in this case, it’s our <em>tools</em> and not our <em>methods</em> that are imposing assumptions on that) to one that answers a fundamentally different question:</p>
<p>Instead of measuring “average monthly spend in Q1 by store”, we’re measuring “averaging monthly spend in Q1 by store <em>conditional on</em> there being spend”.</p>
<p>To obtain the correct result, one would write:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> </span>
<span id="cb4-2">  store_id, </span>
<span id="cb4-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- wrong answers</span></span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">avg</span>(amt_spend) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> wrong1,  </span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(amt_spend) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(amt_spend) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> wrong2,</span>
<span id="cb4-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- right answers</span></span>
<span id="cb4-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(amt_spend) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> right1,</span>
<span id="cb4-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">avg</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coalesce</span>(amt_spend, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> right2</span>
<span id="cb4-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> spend</span>
<span id="cb4-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">group</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">by</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">order</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">by</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">store_id</th>
<th style="text-align: right;">wrong1</th>
<th style="text-align: right;">wrong2</th>
<th style="text-align: right;">right1</th>
<th style="text-align: right;">right2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">NA</td>
<td style="text-align: right;">99.60874</td>
<td style="text-align: right;">99.60874</td>
<td style="text-align: right;">66.40583</td>
<td style="text-align: right;">66.40583</td>
</tr>
<tr class="even">
<td style="text-align: right;">1</td>
<td style="text-align: right;">100.68744</td>
<td style="text-align: right;">100.68744</td>
<td style="text-align: right;">100.68744</td>
<td style="text-align: right;">100.68744</td>
</tr>
<tr class="odd">
<td style="text-align: right;">2</td>
<td style="text-align: right;">99.63996</td>
<td style="text-align: right;">99.63996</td>
<td style="text-align: right;">99.63996</td>
<td style="text-align: right;">99.63996</td>
</tr>
</tbody>
</table>
</div>
<p>With a better understand of gross sales, the analyst might next proceed to compute net sales.</p>
<p>This first requires joining the <code>spend</code> and <code>returns</code> tables. Naively, they might attempt:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> </span>
<span id="cb5-2">  spend.<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>,</span>
<span id="cb5-3">  returns.amt_return</span>
<span id="cb5-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> </span>
<span id="cb5-5">  spend</span>
<span id="cb5-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">inner</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">join</span></span>
<span id="cb5-7">  returns </span>
<span id="cb5-8">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">on</span></span>
<span id="cb5-9">  spend.store_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> returns.store_id <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span></span>
<span id="cb5-10">  spend.<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">month</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> returns.<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">month</span></span></code></pre></div>
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">STORE_ID</th>
<th style="text-align: right;">MONTH</th>
<th style="text-align: right;">AMT_SPEND</th>
<th style="text-align: right;">amt_return</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">100.12011</td>
<td style="text-align: right;">NA</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">100.31441</td>
<td style="text-align: right;">9.972159</td>
</tr>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">99.67098</td>
<td style="text-align: right;">9.798444</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">98.39703</td>
<td style="text-align: right;">10.254347</td>
</tr>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">102.27124</td>
<td style="text-align: right;">10.108880</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">100.20843</td>
<td style="text-align: right;">9.951398</td>
</tr>
</tbody>
</table>
</div>
<p>However, this once again fails. Why? Although SQL handled nulls “permissively” when aggregating a column, it took a stricted stance when making the comparison on <code>spend.store_id = returns.store_id</code> in the join clause. SQL doesn’t recognize different nulls as equal. To the extent than null means “I dunno” versus “The field is not relevant to this observation”, it’s reasonable that SQL should find it hard to decide whether two “I dunno”s are equal.</p>
<p>Once again, this isn’t a “random” or inconsequential error. Continuing to use this corrupted dataset changes the computand from “net sales by month” to “net sales by month at physical retail locations”.</p>
<p>To remedy this, we can force <code>store_id</code> to take on a value:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb6-2">  spend.<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>,</span>
<span id="cb6-3">  returns.amt_return</span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> </span>
<span id="cb6-5">  spend</span>
<span id="cb6-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">inner</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">join</span></span>
<span id="cb6-7">  returns </span>
<span id="cb6-8">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">on</span></span>
<span id="cb6-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coalesce</span>(spend.store_id, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coalesce</span>(returns.store_id, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span></span>
<span id="cb6-10">  spend.<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">month</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> returns.<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">month</span></span></code></pre></div>
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">STORE_ID</th>
<th style="text-align: right;">MONTH</th>
<th style="text-align: right;">AMT_SPEND</th>
<th style="text-align: right;">amt_return</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">100.12011</td>
<td style="text-align: right;">NA</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">100.31441</td>
<td style="text-align: right;">9.972159</td>
</tr>
<tr class="odd">
<td style="text-align: right;">NA</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">100.40517</td>
<td style="text-align: right;">10.071639</td>
</tr>
<tr class="even">
<td style="text-align: right;">1</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">99.67098</td>
<td style="text-align: right;">9.798444</td>
</tr>
<tr class="odd">
<td style="text-align: right;">2</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">98.39703</td>
<td style="text-align: right;">10.254347</td>
</tr>
<tr class="even">
<td style="text-align: right;">NA</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">98.81231</td>
<td style="text-align: right;">9.881071</td>
</tr>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">102.27124</td>
<td style="text-align: right;">10.108880</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">100.20843</td>
<td style="text-align: right;">9.951398</td>
</tr>
<tr class="odd">
<td style="text-align: right;">NA</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">NA</td>
<td style="text-align: right;">9.849277</td>
</tr>
</tbody>
</table>
</div>
<p>And next we proceed with computing sales by month net of returns across all stores:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb7-2">  spend.<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">month</span>, </span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(amt_spend <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> amt_return) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> net_spend</span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> </span>
<span id="cb7-5">  spend</span>
<span id="cb7-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">inner</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">join</span></span>
<span id="cb7-7">  returns </span>
<span id="cb7-8">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">on</span></span>
<span id="cb7-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coalesce</span>(spend.store_id, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coalesce</span>(returns.store_id, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span></span>
<span id="cb7-10">  spend.<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">month</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> returns.<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">month</span></span>
<span id="cb7-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">group</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">by</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">order</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">by</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">month</th>
<th style="text-align: right;">net_spend</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">180.6758</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">266.9465</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: right;">182.4194</td>
</tr>
</tbody>
</table>
</div>
<p>However, by now, you should not be surprised that this result is also incorrect. If we inspect the sequence of computations, we realize that SQL is also stricter in its null handing in <em>rowwise computations</em> than <em>column-wise aggregations</em>. The subtraction of <code>amt_spend</code> and <code>amt_return</code> obliterates the total when either is null. So, we fail to include the gross spend at Store 1 in January simply because there were no returns (and vice versa for Internet sales in March).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb8-2">  spend.<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">month</span>, </span>
<span id="cb8-3">  spend.store_id,</span>
<span id="cb8-4">  amt_spend,</span>
<span id="cb8-5">  amt_return,</span>
<span id="cb8-6">  amt_spend <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> amt_return <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> net_spend</span>
<span id="cb8-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> </span>
<span id="cb8-8">  spend</span>
<span id="cb8-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">inner</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">join</span></span>
<span id="cb8-10">  returns </span>
<span id="cb8-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">on</span></span>
<span id="cb8-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coalesce</span>(spend.store_id, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coalesce</span>(returns.store_id, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span></span>
<span id="cb8-13">  spend.<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">month</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> returns.<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">month</span></span></code></pre></div>
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">month</th>
<th style="text-align: right;">store_id</th>
<th style="text-align: right;">amt_spend</th>
<th style="text-align: right;">amt_return</th>
<th style="text-align: right;">net_spend</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">100.12011</td>
<td style="text-align: right;">NA</td>
<td style="text-align: right;">NA</td>
</tr>
<tr class="even">
<td style="text-align: right;">1</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">100.31441</td>
<td style="text-align: right;">9.972159</td>
<td style="text-align: right;">90.34225</td>
</tr>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">NA</td>
<td style="text-align: right;">100.40517</td>
<td style="text-align: right;">10.071639</td>
<td style="text-align: right;">90.33353</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">99.67098</td>
<td style="text-align: right;">9.798444</td>
<td style="text-align: right;">89.87254</td>
</tr>
<tr class="odd">
<td style="text-align: right;">2</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">98.39703</td>
<td style="text-align: right;">10.254347</td>
<td style="text-align: right;">88.14268</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">NA</td>
<td style="text-align: right;">98.81231</td>
<td style="text-align: right;">9.881071</td>
<td style="text-align: right;">88.93124</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">102.27124</td>
<td style="text-align: right;">10.108880</td>
<td style="text-align: right;">92.16236</td>
</tr>
<tr class="even">
<td style="text-align: right;">3</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">100.20843</td>
<td style="text-align: right;">9.951398</td>
<td style="text-align: right;">90.25704</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: right;">NA</td>
<td style="text-align: right;">NA</td>
<td style="text-align: right;">9.849277</td>
<td style="text-align: right;">NA</td>
</tr>
</tbody>
</table>
</div>
<p>A few ways to get the correct answer are shown below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb9-2">  spend.<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">month</span>, </span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coalesce</span>(amt_spend,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coalesce</span>(amt_return,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> right1,</span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(amt_spend) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(amt_return) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> right2</span>
<span id="cb9-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> </span>
<span id="cb9-6">  spend</span>
<span id="cb9-7">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">inner</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">join</span></span>
<span id="cb9-8">  returns </span>
<span id="cb9-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">on</span></span>
<span id="cb9-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coalesce</span>(spend.store_id, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coalesce</span>(returns.store_id, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span></span>
<span id="cb9-11">  spend.<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">month</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> returns.<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">month</span></span>
<span id="cb9-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">group</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">by</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">order</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">by</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">month</th>
<th style="text-align: right;">right1</th>
<th style="text-align: right;">right2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">280.7959</td>
<td style="text-align: right;">280.7959</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">266.9465</td>
<td style="text-align: right;">266.9465</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: right;">172.5701</td>
<td style="text-align: right;">172.5701</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="observations" class="level2">
<h2 class="anchored" data-anchor-id="observations">Observations</h2>
<p>The preceding example hopefully illustrates a few points:</p>
<ul>
<li>Nulls can cause issues in the most basic of analyses</li>
<li>Beyond causing random or marginal errors, null handling changes the questions being answered</li>
<li>Even within a language, null handling may feel inconsistent (w.r.t. strictness) across different operations</li>
</ul>
<p>So, with that, let’s compare languages!</p>
</section>
<section id="comparison" class="level2">
<h2 class="anchored" data-anchor-id="comparison">Comparison</h2>
<p>Below, we compare how R, SQL, and python handle column aggregation, rowwise transformation, joining, and filtering.</p>
<section id="aggregation" class="level3">
<h3 class="anchored" data-anchor-id="aggregation">Aggregation</h3>
<p>SQL, as we saw before, simply ignores nulls in aggregation functions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> </span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(x) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> sum_x, </span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_null_x</span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> tbl</span></code></pre></div>
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">sum_x</th>
<th style="text-align: right;">n_null_x</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: right;">1</td>
</tr>
</tbody>
</table>
</div>
<p>Built by and for statistician’s, R is scandalized at the very idea of attempting to do math with null columns. For aggregation functions, it returns <code>NA</code> as a form of protest should any entry of the vector provided be null. (This can be overridden with the <code>na.rm</code> parameter.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(x)</span>
<span id="cb11-3"></span>
<span id="cb11-4">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x)</span>
<span id="cb11-5">dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(x))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] NA</code></pre>
</div>
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">x</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">NA</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>When it comes to python, well, it depends. Base and <code>numpy</code> operations act more like R whereas <code>pandas</code> aggregation acts more like SQL.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb13-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb13-3">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,np.nan]</span>
<span id="cb13-4">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb13-5">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>:x,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>:y})</span>
<span id="cb13-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(x)</span>
<span id="cb13-7">np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(x)</span>
<span id="cb13-8">df.agg({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>]})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>nan
nan
       x
sum  3.0</code></pre>
</div>
</div>
</section>
<section id="transformation" class="level3">
<h3 class="anchored" data-anchor-id="transformation">Transformation</h3>
<p>All of SQL, R, and python return NA when <code>NA</code>s are used in atomic or rowwise transformations.</p>
<p>In SQL:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> z</span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> tbl</span></code></pre></div>
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">x</th>
<th style="text-align: right;">y</th>
<th style="text-align: right;">z</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">-2</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">-2</td>
</tr>
<tr class="odd">
<td style="text-align: right;">NA</td>
<td style="text-align: right;">5</td>
<td style="text-align: right;">NA</td>
</tr>
</tbody>
</table>
</div>
<p>In R:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb16-2">dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y)</span>
<span id="cb16-3"></span>
<span id="cb16-4">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(df, x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y)</span>
<span id="cb16-5">df</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">x</th>
<th style="text-align: right;">y</th>
<th style="text-align: right;">z</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">-2</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">-2</td>
</tr>
<tr class="odd">
<td style="text-align: right;">NA</td>
<td style="text-align: right;">5</td>
<td style="text-align: right;">NA</td>
</tr>
</tbody>
</table>
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">x</th>
<th style="text-align: right;">y</th>
<th style="text-align: right;">z</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">-2</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">-2</td>
</tr>
<tr class="odd">
<td style="text-align: right;">NA</td>
<td style="text-align: right;">5</td>
<td style="text-align: right;">NA</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>In python:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">np.array(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.array(y)</span>
<span id="cb17-2">df.assign(z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> d: d.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> d.y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>array([-2., -2., nan])
     x  y    z
0  1.0  3 -2.0
1  2.0  4 -2.0
2  NaN  5  NaN</code></pre>
</div>
</div>
</section>
<section id="joining" class="level3">
<h3 class="anchored" data-anchor-id="joining">Joining</h3>
<p>The situation with joins may feel like the opposite of aggregation. Here, R and python’s most popular data wrangling packages are more permissive than SQL.</p>
<p>As we saw in the case study, SQL does not match on nulls.</p>
<p>Consider <code>tbl1</code> and <code>tbl2</code> as shown below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> tbl1</span></code></pre></div>
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">A</th>
<th style="text-align: left;">B</th>
<th style="text-align: left;">X</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">TRUE</td>
</tr>
</tbody>
</table>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb20-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> tbl2</span></code></pre></div>
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">A</th>
<th style="text-align: left;">B</th>
<th style="text-align: left;">Y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">FALSE</td>
</tr>
</tbody>
</table>
</div>
<p>Attempts to join return no results:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> tbl1.<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>, tbl2.Y </span>
<span id="cb21-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> </span>
<span id="cb21-3">  tbl1 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">inner</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">join</span> tbl2 </span>
<span id="cb21-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">on</span> </span>
<span id="cb21-5">  tbl1.A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tbl2.A <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> </span>
<span id="cb21-6">  tbl1.B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tbl2.B</span></code></pre></div>
<table>
<thead>
<tr class="header">
<th style="text-align: right;">A</th>
<th style="text-align: left;">B</th>
<th style="text-align: left;">X</th>
<th style="text-align: left;">y</th>
</tr>
</thead>
<tbody>
</tbody>
</table>
</div>
<p>In contrast, default behavior for base R’s <code>merge</code> and <code>dplyr</code> <em>does match</em> on nulls. (Although, either behavior can be altered with the <code>incomparables</code> or <code>na_matches</code> arguments, respectively.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">df1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">B =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb22-2">df2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">B =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb22-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">merge</span>(df1, df2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>))</span>
<span id="cb22-4">dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inner_join</span>(df1, df2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>))</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">A</th>
<th style="text-align: left;">B</th>
<th style="text-align: left;">X</th>
<th style="text-align: left;">Y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">TRUE</td>
<td style="text-align: left;">FALSE</td>
</tr>
</tbody>
</table>
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">A</th>
<th style="text-align: left;">B</th>
<th style="text-align: left;">X</th>
<th style="text-align: left;">Y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">TRUE</td>
<td style="text-align: left;">FALSE</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Similarly, <code>pandas</code> also matches on nulls for joining.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb23-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb23-3">df1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, np.nan, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>]], columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>])</span>
<span id="cb23-4">df2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, np.nan, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>]], columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span>])</span>
<span id="cb23-5">pd.merge(df1, df2, on <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   A   B     X      Y
0  1 NaN  True  False</code></pre>
</div>
</div>
<p><code>R</code> and <code>python</code>’s behavior here seems most surprising. One might expect joining to work the same as raw logical evaluation works. However, neither language “likes” null comparison in its raw form. Instead, the default behavior is intentionally altered in these higher-level joining functions.</p>
<p>In R:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] NA</code></pre>
</div>
</div>
<p>In python:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">np.nan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> np.nan</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>False</code></pre>
</div>
</div>
</section>
<section id="filtering" class="level3">
<h3 class="anchored" data-anchor-id="filtering">Filtering</h3>
<p>Finally, both SQL and R drop null records used in filtering statements since comparisons with these values are incapable of returning a TRUE/FALSE value that is used to subset the rows. In python, however, pandas does preserve nulls in filter conditions.</p>
<p>Using the same <code>tbl1</code> shown above, we can also confirm that SQL proactively drops nulls in where clauses where they cannot be readily compared to non-null values. This seems quite consistent with its behavior in the joining case.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb29-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> A, B, X </span>
<span id="cb29-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> tbl1 </span>
<span id="cb29-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span> B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<table>
<thead>
<tr class="header">
<th style="text-align: right;">a</th>
<th style="text-align: left;">b</th>
<th style="text-align: left;">x</th>
</tr>
</thead>
<tbody>
</tbody>
</table>
</div>
<p>Both base R and <code>dplyr</code> paradigms follow suit here.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">df1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">B =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb30-2">df1[df1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>B <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,]</span>
<span id="cb30-3">dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(df1, B <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: left;"></th>
<th style="text-align: right;">A</th>
<th style="text-align: left;">B</th>
<th style="text-align: left;">X</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">NA</td>
<td style="text-align: right;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th style="text-align: right;">A</th>
<th style="text-align: left;">B</th>
<th style="text-align: left;">X</th>
</tr>
</thead>
<tbody>
</tbody>
</table>
</div>
</div>
<p>However, bucking the trend, multiple approaches to subsetting <code>pandas</code> data will not drop nulls in filtering comparisons.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">df1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, np.nan, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>]], columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>])</span>
<span id="cb31-2">df1[df1.B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb31-3">df1.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B != 1'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   A   B     X
0  1 NaN  True
   A   B     X
0  1 NaN  True</code></pre>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In data computation and analysis, the devil is often in the details. It’s not breaking news that low-level reasoning on the careful handling of null values can jeopardize the resulting analyses. However, as analysts take on increasingly complex tasks and using a plehora of different tools, it’s more important than ever for both data producers and consumers to consider the choices they are making in encoding and handling these values across the stack.</p>


</section>

 ]]></description>
  <category>rstats</category>
  <category>python</category>
  <category>sql</category>
  <category>data</category>
  <category>data-disasters</category>
  <guid>https://emilyriederer.com/post/nulls-polyglot/</guid>
  <pubDate>Mon, 05 Sep 2022 05:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/nulls-polyglot/featured.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Update: grouped data quality check PR merged to dbt-utils</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/grouping-data-quality-update/</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://emilyriederer.com/post/grouping-data-quality-update/featured.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Photo credit to <a href="https://unsplash.com/@greysonjoralemon">Greyson Joralemon</a> on Unsplash</figcaption>
</figure>
</div>
<p>Last fall, I wrote about the <a href="https://www.emilyriederer.com/post/grouping-data-quality/">unreasonably effectiveness of grouping in data quality checks</a>. In this follow-up, I want to share that my <a href="https://github.com/dbt-labs/dbt-utils/pull/633">pull request</a> for such features has just been merged into the development branch of the <code>dbt-utils</code> package, a common add-on to the <code>dbt</code> data transformation stack. This feature will officially “go live” in the 1.0.0 version release that is planned for later this fall.</p>
<p>In this brief post, I’ll recall the benefits of such checks (which my original post further illustrates with NYC subway data) and demonstrate how these checks can now be implemented in <code>dbt-utils</code>.</p>
<p>For those interested, I’ll also provide a brief overview of how I implemented this change, but I recommend checking out the PR itself for complete details.</p>
<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>To recap the benefits of such checks from my initial post:</p>
<ul>
<li>Some data checks can only be expressed within a group (e.g.&nbsp;ID values should be unique within a group but can be repeated between groups)</li>
<li>Some data checks are more precise when done by group (e.g.&nbsp;not only should table row-counts be equal but the counts within each group should be equal)</li>
</ul>
<p>Of course, these benefits are more or less relevant to different types of data checks. My PR updates the following tests:</p>
<ul>
<li>equal_rowcount()</li>
<li>recency()</li>
<li>fewer_rows_than()</li>
<li>at_least_one()</li>
<li>not_constant()</li>
<li>non_null_proportion()</li>
<li>sequential_values()</li>
</ul>
<p>Of these checks, most fall in the category of providing more rigor when being conducted at the group level. Only the <code>sequential_values()</code> test is often unable to be expressed without grouping.</p>
</section>
<section id="demo" class="level2">
<h2 class="anchored" data-anchor-id="demo">Demo</h2>
<p><a href="https://docs.getdbt.com/docs/building-a-dbt-project/tests">Data tests</a> in <code>dbt</code> are specified in the <code>schema.yml</code> file for relevant models. Adding grouping to the tests listed above will now be as simple as adding a <code>group_by_columns</code> key-value pair to the tests, as desired, which accepts either a single variable name or a list of variables to be used for grouping.</p>
<p><code>{yaml eval = FALSE}   - name: data_test_at_least_one     columns:       - name: field         tests:           - dbt_utils.at_least_one:               group_by_columns: ['grouping_column']</code></p>
<p>For those that have not used <code>dbt</code>’s data testing framework before, this configuration is then used to generate SQL (now with the custom <code>GROUP BY</code> clause) which are evaluated when <code>dbt test</code> is run.</p>
</section>
<section id="implementation" class="level2">
<h2 class="anchored" data-anchor-id="implementation">Implementation</h2>
<p>In implementing this PR, I considered a few core principles:</p>
<ul>
<li>Make this feature as unobtrusive and isolated as possible with respect to the macros broader implementation</li>
<li>Follow standard DRY principles (e.g.&nbsp;specifically, render needed text as few times as possible)</li>
<li>Implement consistently across macros</li>
</ul>
<p>With these principles in mind, the majority of implementations are like that of the <code>recency</code> macro where all relevant SQL strings are pre-computed:</p>
<pre><code>{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}
{% if group_by_columns|length() &gt; 0 %}
  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}
  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}
{% endif %}</code></pre>
<p>The main deviations to this were the sequential() macro (requiring a window function) and the equal_rowcount()/fewer_rows_than() (requiring joins)</p>


</section>

 ]]></description>
  <category>data</category>
  <category>dbt</category>
  <guid>https://emilyriederer.com/post/grouping-data-quality-update/</guid>
  <pubDate>Fri, 26 Aug 2022 05:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/grouping-data-quality-update/featured.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>The Data Engineering Podcast: Column Names as Contracts</title>
  <link>https://emilyriederer.com/talk/pod-tdep-colnames/</link>
  <description><![CDATA[ 



<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Quick Links</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Abstract</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">Listen</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<p><span><i class="bi bi-play"></i> <a href="https://www.dataengineeringpodcast.com/controlled-vocabulary-with-dbtplyr-episode-252/">Pod</a> </span><br>
<span><i class="bi bi-download"></i><a href="tdep_col-name-contracts.mp3">Download MP3</a></span><br>
<span><i class="bi bi-pencil"></i> <a href="../../post/column-name-contracts/">Post - Column Names as Contracts</a> </span></p>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<p>Communication and shared context are the hardest part of any data system. In recent years the focus has been on data catalogs as the means for documenting data assets, but those introduce a secondary system of record in order to find the necessary information. In this episode Emily Riederer shares her work to create a controlled vocabulary for managing the semantic elements of the data managed by her team and encoding it in the schema definitions in her data warehouse. She also explains how she created the dbtplyr package to simplify the work of creating and enforcing your own controlled vocabularies.</p>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<iframe src="https://player.fireside.fm/v2/fE6B9ALy+6SCH5nMW?theme=dark" width="740" height="200" frameborder="0" scrolling="no">
</iframe>
</div>
</div>
</div>



 ]]></description>
  <category>data</category>
  <guid>https://emilyriederer.com/talk/pod-tdep-colnames/</guid>
  <pubDate>Wed, 12 Jan 2022 06:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/talk/pod-tdep-colnames/featured.PNG" medium="image"/>
</item>
<item>
  <title>Using databases with Shiny</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/shiny-db/</link>
  <description><![CDATA[ 




<p>Shiny apps are R’s answer to building interface-driven applications that help expose important data, metrics, algorithms, and more with end-users. However, the more interesting work that your Shiny app allows users to do, the more likely users are to want to save, return to, and alter some of the ways that they interacted with your work.</p>
<p>This creates a need for <strong>persistent storage</strong> in your Shiny application, as opposed to the ephemeral in-memory of basic Shiny applications that “forget” the data that they generated as soon as the application is stopped.</p>
<p>Relational databases are a classic form of persistent storage for web applications. Many analysts may be familiar with <em>querying</em> relational databases to retrieve data, but <em>managing</em> a database for use with a web application is slightly more complex. You’ll find yourself needing to define tables, secure data, and manage connections. More importantly, you might worry about what things that you do not know you should be worrying about.</p>
<p>This post provides some tips, call-outs, and solutions for using a relational database for persistent storage with Shiny. In my case, I rely on a Shiny app built with the <a href="https://thinkr-open.github.io/golem/"><code>golem</code> framework</a> and served on the Digital Ocean App platform.</p>
<section id="databases-options-for-storage" class="level2">
<h2 class="anchored" data-anchor-id="databases-options-for-storage">Databases &amp; Options for Storage</h2>
<p>Dean Attali’s <a href="https://deanattali.com/blog/shiny-persistent-data-storage/">blog post on persistent storage</a> compares a range of options for persistent storage including databases, S3 buckets, Google Drive, and more.</p>
<p>For my application, I anticipated the need to store and retrieve sizable amounts of structured data, so using a relational database seemed like a good option. Since I was hosting my application on <a href="https://m.do.co/c/6c5fdc198503">Digital Ocean App Platform</a>, I could create a <a href="https://www.digitalocean.com/products/managed-databases/">managed Postgres database</a> with just a few button clicks. As I share in the “Key Issues” section, this solution offers some significant benefits in terms of security.</p>
<p>For more information on different options for hosting Shiny apps and some insight into why I chose Digital Ocean, check out Peter Solymos’ excellent blog on <a href="https://hosting.analythium.io/">Hosting Data Apps</a>.</p>
</section>
<section id="talking-to-your-database-through-shiny" class="level2">
<h2 class="anchored" data-anchor-id="talking-to-your-database-through-shiny">Talking to your database through Shiny</h2>
<p>General information on working with databases with R is included on RStudio’s <a href="https://db.rstudio.com/">excellent website</a>. Below, I focus on a few topics specific to databases with Shiny, Shiny apps built in the <code>{golem}</code> framework, and Shiny apps served on Digital Ocean in particular.</p>
<section id="creating-a-database" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-database">Creating a database</h3>
<p>To create a database for my application in DigitalOcean, I simply went to:</p>
<p><code>Settings &gt; Add Component &gt; Database</code></p>
<p>This creates a fully-managed Postgres databases so you do not have to thing a ton about the underlying set-up or configuration.</p>
<p>At the time on writing, I was able to add a 1GB Dev Database for /$7 / month. For new users, DigitalOcean offers a generous number of free credits for use in the first 60 days. For a more mature product, one can add or switch to a production-ready Managed Database.</p>
<p>After a few minutes, the database has launched and its Connection Parameters are provided, which look something like this:</p>
<pre><code>host     : abc.b.db.ondigitalocean.com
port     : 25060
username : db
password : abc123
database : db
sslmode  : require</code></pre>
<p>By default, the Dev Database registers your application as a Trusted Source, meaning that only traffic from the application can attempt to access the database. As the <a href="https://docs.digitalocean.com/products/databases/postgresql/how-to/secure/#firewalls">documentation</a> explains, this type of firewall improves security by preventing against brute-force password or denial-of-service attacks from the outside.</p>
<p><em>Note: If you just want to experiment with databases and Shiny but aren’t using an in-production, served application, you can mostly skip this step and use the “Dev” approach that is discuss in “Dev versus Prod” subsection of “Key Issues” below.</em></p>
</section>
<section id="connecting-to-the-database" class="level3">
<h3 class="anchored" data-anchor-id="connecting-to-the-database">Connecting to the database</h3>
<p>We can use the connection parameters provided to connect to the database using R’s <code>DBI</code> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(RPostgres<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Postgres</span>(),</span>
<span id="cb2-2">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">host   =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aabc.b.db.ondigitalocean.com"</span>,</span>
<span id="cb2-3">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dbname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"db"</span>,</span>
<span id="cb2-4">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">user      =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"db"</span>,</span>
<span id="cb2-5">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">password  =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abc123"</span>,</span>
<span id="cb2-6">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">port     =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25060</span>)</span></code></pre></div>
</div>
<p>We will talk about ways to not hardcode one’s password in the last section.</p>
</section>
<section id="creating-tables" class="level3">
<h3 class="anchored" data-anchor-id="creating-tables">Creating tables</h3>
<p>Next, you can set up tables in your database that your application will require.</p>
<p>If you know SQL DDL, you can write a <a href="https://www.tutorialspoint.com/sql_certificate/using_ddl_statements.html">CREATE TABLE statement</a> which defines a tables names, fields, and data types. However, this can feel verbose or uncomfortable to analysts who mostly use DML (e.g.&nbsp;<code>SELECT</code>, <code>FROM</code>, <code>WHERE</code>).</p>
<p>Fortunately, you can also define a table using R’s <code>DBI</code> package. First, create a simple dataframe with a single record to help R infer the appropriate and expected data types. Then pass the first <em>zero</em> rows of the table (essentially, only the schema) to <code>DBI::dbCreateTable()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-01-01"</span>))</span>
<span id="cb3-2">DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbCreateTable</span>(con, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_data"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fields =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(df, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span></code></pre></div>
</div>
<p>To prove that this works, I show a “round trip” of the data using an in-memory SQLite database. Note that this is <em>not</em> an option for persistent storage because in-memory databases are not persistent. This is only to “prove” that this approach can create database tables.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">con_lite <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(RSQLite<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SQLite</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":memory:"</span>)</span>
<span id="cb4-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-01-01"</span>))</span>
<span id="cb4-3">DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbCreateTable</span>(con_lite, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_data"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fields =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(df, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb4-4">DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbListTables</span>(con_lite)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "my_data"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbReadTable</span>(con_lite, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_data"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] x y z
&lt;0 rows&gt; (or 0-length row.names)</code></pre>
</div>
</div>
<p>But where should you run this script? You do <em>not</em> want to put this code in your app to run every time the app launches, but we just limited database traffic to the app so we cannot run it locally. Instead, you can run this code from the app’s <a href="https://docs.digitalocean.com/products/app-platform/concepts/console/">console</a>. (Alternatively, if you upgrade to a Managed Database, I believe you can also whitelist your local IP as another trusted source.)</p>
</section>
<section id="forming-the-connection-within-your-app" class="level3">
<h3 class="anchored" data-anchor-id="forming-the-connection-within-your-app">Forming the connection within your app</h3>
<p>Once your database is set-up and ready to go, you can begin to integrate it into your application.</p>
<p>I was using the <a href="https://thinkr-open.github.io/golem/"><code>golem</code> framework</a> for my application, so I connected to the database and made the initial data pull by adding the following lines in my top-level <code>app_server.R</code> file.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">db_con</span>()</span>
<span id="cb8-2">tbl_init <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbReadTable</span>(con, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_data"</span>)</span></code></pre></div>
</div>
<p>The custom <code>db_con()</code> function contains <em>roughly</em> the <code>DBI::dbConnect()</code> code we saw above, but I turned it into a function to incorporate some added complexity which I will describe shortly.</p>
<p>Most of the rest of my application uses Shiny modules, and this connection object and initial data pull can be seamless passed into either.</p>
<p>To see similar code in a full app, check out Colin Fay’s <a href="https://github.com/ColinFay/golemexamples/blob/master/golemqlite/R/app_server.R#L7"><code>golemqlite</code></a> project on Github.</p>
</section>
<section id="crud-operations" class="level3">
<h3 class="anchored" data-anchor-id="crud-operations">CRUD operations</h3>
<p>CRUD operations (Create, Read, Update, Delete) are at the heart of any interactive application with persistent data storage.</p>
<p>Interacting with your database within Shiny begins to look like more rote Shiny code. I do not describe this process in much detail since it is quite specific to what your app is trying to accomplish, but <a href="https://www.tychobra.com/posts/2020-01-29-shiny-crud-traditional/">this blog post</a> provides some nice examples.</p>
<p>In short:</p>
<ul>
<li>To add records to the table, you can use <code>DBI::dbAppendTable()</code></li>
<li>To remove records from the table, you can construct a <code>DELETE FROM my_data WHERE &lt;conditions&gt;</code> statement and run it with <code>DBI::dbExecute()</code></li>
</ul>
<p>Some cautions on the second piece are included in the “Key Issues” section.</p>
</section>
</section>
<section id="key-issues" class="level2">
<h2 class="anchored" data-anchor-id="key-issues">Key Issues</h2>
<p>Adding a permanent data store to your application can open up a lot of exciting new functionality. However, it may create some challenges that your typical data analyst or Shiny developer has not faced before. In this last section, I highlight a few key issues that you should be aware of and provide some recommendations.</p>
<section id="securing-data-transfer" class="level3">
<h3 class="anchored" data-anchor-id="securing-data-transfer">Securing data transfer</h3>
<p>Already, we have one safeguard in place for data security since our application is the only Trusted Source able to interface with our database.</p>
<p>But, just like we secure our database credentials, it becomes important to think about securing the database itself. This is made easy with DigitalOcean because data is <a href="https://docs.digitalocean.com/products/databases/">end-to-end encrypted</a>, but depending on how or by whom your data is managed, this is something to bear in mind.</p>
</section>
<section id="securing-database-credentials" class="level3">
<h3 class="anchored" data-anchor-id="securing-database-credentials">Securing database credentials</h3>
<p>No matter how safe the data itself is, it still may be at risk if anyone can obtain our database credentials.</p>
<p>Previously, I demonstrated how to connect to a database from R like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(RPostgres<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Postgres</span>(),</span>
<span id="cb9-2">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">host   =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aabc.b.db.ondigitalocean.com"</span>,</span>
<span id="cb9-3">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dbname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"db"</span>,</span>
<span id="cb9-4">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">user      =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"db"</span>,</span>
<span id="cb9-5">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">password  =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abc123"</span>,</span>
<span id="cb9-6">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">port     =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25060</span>)</span></code></pre></div>
</div>
<p>However, you should never ever put your password in plaintext like this. Instead, you can use <em>environment variables</em> to store the value of sensitive credentials like a password or even a username like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(RPostgres<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Postgres</span>(),</span>
<span id="cb10-2">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">host   =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aabc.b.db.ondigitalocean.com"</span>,</span>
<span id="cb10-3">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dbname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"db"</span>,</span>
<span id="cb10-4">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">user      =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"db"</span>,</span>
<span id="cb10-5">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">password  =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DB_PASS"</span>),</span>
<span id="cb10-6">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">port     =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25060</span>)</span></code></pre></div>
</div>
<p>Then, you can define that same environment variable more securely in <a href="https://docs.digitalocean.com/products/app-platform/how-to/use-environment-variables/">within the App Platform</a>.</p>
</section>
<section id="securing-input-integrity-sql-injection" class="level3">
<h3 class="anchored" data-anchor-id="securing-input-integrity-sql-injection">Securing input integrity (SQL injection)</h3>
<p>Finally, it’s also important to be aware of <a href="https://www.w3schools.com/sql/sql_injection.asp">SQL injection</a> to ensure that your database does not get corrupted.</p>
<p>SQL injection is usually discussed in the concept of malicious attacks. For example, W3 schools shows the following example where an application could be tricked into providing data on <em>all</em> users instead of a single user:</p>
<pre><code>txtUserId = getRequestString("UserId");
txtSQL = "SELECT * FROM Users WHERE UserId = " + txtUserId;</code></pre>
<p>If the entered <code>UserId</code> is <code>"UserId = 105 OR 1=1"</code>, then the full SQL string will be <code>"SELECT * FROM Users WHERE UserId = 105 OR 1=1;"</code>.</p>
<p>SQL injection is also at jokes you make have heard about “little Bobby Drop Tables” (<a href="https://xkcd.com/327/">xkcd</a>).</p>
<p><img src="https://imgs.xkcd.com/comics/exploits_of_a_mom.png" class="img-fluid"></p>
<p>That joke also, in some odd way, highlights that SQL injection need not be malicious. Rather, whenever we have software opened up to users beyond ourselves, they will likely use it in unexpected ways that push the system to its limit. For example, a user might try to enter or remove values from our database with double quotes, semicolons, or other features that mean something different to SQL than in human parlance and corrupt the code. Regardless of intent, we can protect against bad SQL that will break our application by using the <code>DBI::sqlInterpolate()</code> function.</p>
<p>A demonstration of this function and how it can protect against bad query generation is shown in <a href="https://shiny.rstudio.com/articles/sql-injections.html">this post</a> by RStudio.</p>
</section>
<section id="dev-versus-prod" class="level3">
<h3 class="anchored" data-anchor-id="dev-versus-prod">Dev versus Prod</h3>
<p>However, you may have realized a flaw in this approach. Our entire app now depends on forming a connection <em>that can only be made by the in-production app.</em> This meams you cannot test your application locally. However, even if our local traffic was not categorically blocked, we wouldn’t <em>want</em> to test our app on the production database and recklessly add and remove entries.</p>
<p>Instead, we would ideally have <em>separate</em> databases: one for development and one for production. Ideally, these would be the same type of database (e.g.&nbsp;both Postgres) to catch nuances of different SQL syntax and database operations. However, to keep things simpler (and cheaper), I decided to use an in-memory SQLite database locally.</p>
<p>To accomplish this, I wrapped my database connection in a custom <code>db_con()</code> function that checks if the app is running in development or production (using <code>golem::app_prod()</code> which in turn checks the <code>R_CONFIG_ACTIVE</code> environment variable) and connects to different databases in either case. In the development case, it creates an in-memory SQLite database and remakes the empty table.</p>
<p>(Another alternative to creating the database on-the-fly is to <a href="https://datacarpentry.org/R-ecology-lesson/05-r-and-databases.html#Creating_a_new_SQLite_database">pre-make a SQLite database</a> saved to a <code>.sqlite</code> file and connect to that. But for this example, my sample table is so simple, creating it manually takes a negligible amount of time and keeps things quite readable, so I left it as-is.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">db_con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prod =</span> golem<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">app_prod</span>()) {</span>
<span id="cb12-2">  </span>
<span id="cb12-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (prod) {</span>
<span id="cb12-4">    </span>
<span id="cb12-5">    con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(RPostgres<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Postgres</span>(),</span>
<span id="cb12-6">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">host   =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abc.b.db.ondigitalocean.com"</span>,</span>
<span id="cb12-7">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dbname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"db"</span>,</span>
<span id="cb12-8">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">user      =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"db"</span>,</span>
<span id="cb12-9">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">password  =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DB_PASS"</span>),</span>
<span id="cb12-10">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">port     =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25060</span>)</span>
<span id="cb12-11">    </span>
<span id="cb12-12">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb12-13">    </span>
<span id="cb12-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">require</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RSQLite"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quietly =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) )</span>
<span id="cb12-15">    con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SQLite</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":memory:"</span>)</span>
<span id="cb12-16">    df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-01-01"</span>))</span>
<span id="cb12-17">    DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbWriteTable</span>(con, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_data"</span>, df)</span>
<span id="cb12-18">    </span>
<span id="cb12-19">  }</span>
<span id="cb12-20">  </span>
<span id="cb12-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(con)</span>
<span id="cb12-22">  </span>
<span id="cb12-23">}</span></code></pre></div>
</div>
</section>
<section id="managing-connections" class="level3">
<h3 class="anchored" data-anchor-id="managing-connections">Managing connections</h3>
<p>So, you’ve built a robust app that can run against a database locally or on your production server. Great! It’s time to share your application with the world. But what if it is <em>so</em> popular that you have a lot of concurrent users and they are all trying to work with the database at once?</p>
<p>To maintain good application performance, you have to be careful about managing the database connection objects that you create (with <code>DBI::dbConnect()</code>) and to close them when you are doing using them.</p>
<p>If this sounds manual and tedious, you’re in luck! The <a href="https://rstudio.github.io/pool/">{pool}</a> package adds a layer of abstraction to manage a <em>set</em> of connections and execute new queries to an available idle collection. Full examples are given on the package’s website, but in short <code>{pool}</code> is quite easy to implement due to it’s <code>DBI</code>-like syntax. You can replace <code>DBI::dbConenct()</code> with <code>pool::dbPool()</code> and proceed as usual!</p>


</section>
</section>

 ]]></description>
  <category>rstats</category>
  <category>shiny</category>
  <category>data</category>
  <guid>https://emilyriederer.com/post/shiny-db/</guid>
  <pubDate>Sun, 02 Jan 2022 06:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/shiny-db/featured.png" medium="image" type="image/png" height="107" width="144"/>
</item>
<item>
  <title>Make grouping a first-class citizen in data quality checks</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/grouping-data-quality/</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://emilyriederer.com/post/grouping-data-quality/featured.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Photo credit to <a href="https://unsplash.com/@greysonjoralemon">Greyson Joralemon</a> on Unsplash</figcaption>
</figure>
</div>
<p>Which of these numbers doesn’t belong? -1, 0, 1, NA.</p>
<p>It may be hard to tell. If the data in question should be non-negative, -1 is clearly wrong; if it should be complete, the NA is problematic; if it represents the signs to be used in summation, 0 is questionable. In short, there is no data quality without data context.</p>
<p>The past few years have seen an explosion in different solutions for monitoring in-production data quality. These tools, including software like <code>dbt</code> and <code>Great Expectations</code> as well as platforms like <code>Monte Carlo</code>, bring a more DevOps flavor to data production with important functionality like automated testing <em>within</em> pipelines (not just at the end), expressive and configurable semantics for common data checks, and more.</p>
<p>However, despite all these features, I notice a common gap across the landscape which may limit the ability of these tools to encode richer domain context and detect common classes of data failures. I previously wrote about the importance of <a href="https://emilyriederer.netlify.app/post/data-error-gen/">validating data based on its data generating process</a> – both along the technical and conceptual dimensions. Following this logic, an important and lacking functionality<sup>1</sup> across the data quality monitoring landscape, is the ability to readily apply checks separately to groups of data. On a quick survey, I count about 8/14 <code>dbt</code> tests (from the add-on <a href="https://github.com/dbt-labs/dbt-utils">dbt-utils</a> package), 15/37 <a href="https://docs.greatexpectations.io/docs/reference/glossary_of_expectations">Great Expectations</a> column tests, and most all of the <a href="https://docs.getmontecarlo.com/docs/field-health-metrics">Monte Carlo</a> field health metrics that would be improved with first-class grouping functionality. (Lists at the bottom of the post.)</p>
<p>Group-based checks can be important for fully articulating good “business rules” against which to assess data quality. For example, groups could reflect either computationally-relevant dimensions of the ETL process (e.g.&nbsp;data loaded from different sources) or semantically-relevant dimensions of the real-world process that our data captures (e.g.&nbsp;repeated measures pertaining to many individual customers, patients, product lines, etc.)</p>
<p>In this post, I make my case for why grouping should be a first-class citizen in data quality tooling.</p>
<section id="use-cases" class="level2">
<h2 class="anchored" data-anchor-id="use-cases">Use Cases</h2>
<p>There are three main use-cases for enabling easy data quality checks by group: checks that can only be expressed by group, checks that can be more rigorous by group, and checks that are more semantically intuitive by group.</p>
<p><strong>Some checks can be more rigorous by group.</strong> Consider a recency check (i.e.&nbsp;that the maximum date represented in the data is appropriately close to the present.) If the data loads from multiple sources (e.g.&nbsp;customer acquisitions from web and mobile perhaps logging to different source systems), the maximum value of the field could pass the check if any one source loaded, but unless the data is grouped in such a way that reflects different data sources and <em>each</em> group’s maximum date is checked, stale data could go undetected.</p>
<p><strong>Some types of checks can only be expressed by group.</strong> Consider a check for consecutive data values. If a table that measures some sort of user engagements, there might be fields for the <code>USER_ID</code> and <code>MONTHS_SINCE_ACQUISITION</code>. A month counter will most certainly <em>not</em> be strictly increasing across the entire dataset but absolutely should be monotonic within each user.</p>
<p><strong>Some checks are more semantically intuitive by group.</strong> Consider a uniqueness check for the same example as above. The month counter is also not unique across the whole table but could be checked for uniqueness within each user. Group semantics would not be required to accomplish this; a simple <code>USER_ID x MONTHS_SINCE_ACQUISITION</code> composite variable could be produced and checked for uniqueness. However, it feels cumbersome and less semantically meaningful to derive additional fields just to fully check the properties of existing fields. (But for the other two categories, this alone would not justify adding such new features.)</p>
<p>These categories demonstrate the specific use cases for grouped data checks. However, there are also soft benefits.</p>
<p>Most prevalent, having group-based checks be first class citizens opens up a new <a href="https://english.stackexchange.com/questions/77535/what-does-falling-into-the-pit-of-success-mean"><strong>pit of success</strong></a><sup>2</sup>. If you believe, as do I, that this is a often a fundamentally important aspect of confirming data quality and not getting “false promises” (as in the first case where non-grouped checks are less rigorous), configuring checks this way should be as close to zero-friction as possible.</p>
</section>
<section id="demo-nyc-turnstile-data" class="level2">
<h2 class="anchored" data-anchor-id="demo-nyc-turnstile-data">Demo: NYC turnstile data</h2>
<section id="context" class="level3">
<h3 class="anchored" data-anchor-id="context">Context</h3>
<p>To better motivate this need, we will look at a real-world example. For this, I turn to New York City’s <a href="http://web.mta.info/developers/turnstile.html">subway turnstile data</a> which I can always count on to have plenty of data quality quirks (which, to be clear, I do not say as a criticism. There’s nothing unexpected about this in real-world “data as residue” data.)</p>
<p>Specifically, we’ll pull down data extracts for roughly the first quarter of 2020 (published on Jan 11 - April 11, corresponding to weeks ending Jan 10 - April 10.)<sup>3</sup></p>
<p>This data contains 2869965 records, corresponding to one unique record per unique control area (<code>CA</code>), turnstile unit (<code>UNIT</code>), and individual turnstile device (<code>SCP</code>) at internals of four hours of the day.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(full_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2869965</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">distinct</span>(full_data, CA, UNIT, SCP, DATE, TIME))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2869965</code></pre>
</div>
</div>
<p>Because this is raw turnstile data, the values for <code>ENTRIES</code> and <code>EXITS</code> may not be what one first expects. These fields contain the <em>cumulative number of turns of the turnstile</em> since it was last zeroed-out. Thus, to get the actual number of <em>incremental</em> entries during a given time period, one must take the difference between the current and previous number of entries <em>at the turnstile level</em>. Thus, missing or corrupted values<sup>4</sup> could cascade in unpredictable ways throughout the transformation process.</p>
<p>Looking at the data for a single turnstile unit makes the way this data is encoded more clear:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">full_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(CA <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A002"</span>, </span>
<span id="cb5-3">         UNIT <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R051"</span>, </span>
<span id="cb5-4">         SCP <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"02-00-00"</span>, </span>
<span id="cb5-5">         DATE <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2020-01-04"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(TIME) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(TIME, ENTRIES, EXITS)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 x 3
  TIME       ENTRIES   EXITS
  &lt;hms&gt;        &lt;int&gt;   &lt;int&gt;
1 10800 secs 7331213 2484849
2 25200 secs 7331224 2484861
3 39600 secs 7331281 2484936
4 54000 secs 7331454 2485014
5 68400 secs 7331759 2485106
6 82800 secs 7331951 2485166</code></pre>
</div>
</div>
</section>
<section id="quality-checks" class="level3">
<h3 class="anchored" data-anchor-id="quality-checks">Quality checks</h3>
<p>So how does this map to the use cases above?</p>
<p>First, lets consider checks that are <strong>more rigorous by group</strong>. One example of this is checking for completeness of the range of data.</p>
<p>Looking at the aggregate level, the data appears complete. The minimum data is the correct start date for the week ending Jan 10 and the maximum date is the correct end date for the week ending April 10.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(full_data,</span>
<span id="cb7-2">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(DATE),</span>
<span id="cb7-3">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(DATE))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 x 2
  `min(DATE)` `max(DATE)`
  &lt;date&gt;      &lt;date&gt;     
1 2020-01-04  2020-04-10 </code></pre>
</div>
</div>
<p>This check might provide a false sense of security.</p>
<p>However, what happens if we repeat this check at the actual grain of records which we <em>need</em> to be complete and subsequent calculations probably assume<sup>5</sup> are complete? We find many individual units whose data does not appear appropriately recent.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">full_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(CA, UNIT, SCP) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">MAX =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(DATE)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(MAX <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2020-04-10"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`summarise()` has grouped output by 'CA', 'UNIT'. You can override using the
`.groups` argument.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 54 x 4
# Groups:   CA, UNIT [24]
   CA    UNIT  SCP      MAX       
   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;    &lt;date&gt;    
 1 C021  R212  00-00-00 2020-01-06
 2 C021  R212  00-00-01 2020-01-06
 3 C021  R212  00-00-02 2020-01-06
 4 C021  R212  00-00-03 2020-01-06
 5 H007  R248  00-00-00 2020-03-07
 6 H007  R248  00-00-01 2020-02-15
 7 H007  R248  00-03-00 2020-02-15
 8 H007  R248  00-03-01 2020-02-15
 9 H007  R248  00-03-02 2020-02-15
10 H009  R235  00-03-04 2020-03-20
# i 44 more rows</code></pre>
</div>
</div>
<p>Next, consider checks that are <strong>only expressible by group</strong>. One example of this is a monotonicity (value always increasing) check.</p>
<p>For example, <code>ENTRIES</code> is certainly <em>not</em> monotonically increasing at the row level. Each individual turnstile device is counting up according to its own usage. However, in an ideal world, these fields should be monotonic over time at the level of individual devices. (Spoiler alert: due to the maintenance, malfunction, and maxing-out scenarios mentioned above, it’s not.) Thus, this type of check is only possible at the grouped level.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">full_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(CA, UNIT, SCP) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(DATE, TIME) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">LAG_ENTRIES =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lag</span>(ENTRIES)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(ENTRIES <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> LAG_ENTRIES, DATE <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2020-01-25'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(CA, UNIT, SCP, DATE, TIME, ENTRIES, LAG_ENTRIES) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(ENTRIES <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> LAG_ENTRIES)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 19,281 x 7
# Groups:   CA, UNIT, SCP [262]
   CA    UNIT  SCP      DATE       TIME        ENTRIES LAG_ENTRIES
   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;    &lt;date&gt;     &lt;hms&gt;         &lt;int&gt;       &lt;int&gt;
 1 R231  R176  00-00-05 2020-03-09 75600 secs       99  1054865694
 2 R412  R146  00-03-03 2020-02-04 43200 secs 51627403   318991420
 3 N029  R333  01-00-00 2020-03-15 75600 secs       18   168628048
 4 R327  R361  01-06-00 2020-03-03 72000 secs   524397   135382887
 5 R312  R405  00-05-00 2020-02-16 57600 secs   131089   118174528
 6 N091  R029  02-05-00 2020-02-01 54000 secs   524368   118146213
 7 A025  R023  01-06-00 2020-03-04 82800 secs 11525743    67822764
 8 A025  R023  01-00-00 2020-03-04 82800 secs  5276291    28448967
 9 R238  R046  00-03-00 2020-02-15 82800 secs        5    16336060
10 R533  R055  00-03-04 2020-03-14 43200 secs      104    15209650
# i 19,271 more rows</code></pre>
</div>
</div>
</section>
</section>
<section id="alternatives-considered" class="level2">
<h2 class="anchored" data-anchor-id="alternatives-considered">Alternatives Considered</h2>
<p>Given that this post is, to some extent, a feature request across all data quality tools ever, it’s only polite to discuss downsides and alternative solutions that I considered. Clearly, finer-grained checks incur a greater computational cost and could, in some cases, be achieved via other means.</p>
<p><strong>Grouped data check might seem excessive.</strong> After all, data quality checks do not, perhaps, aim to guarantee every field is 100% correct. Rather, they are higher-level metrics which aim to catch signals of deeper issues. My counterargument is largely based in the first use case listed above. Without testing data at the right level of granularity, checks could almost do more harm than good if they promote a false sense of data quality by masking issues.</p>
<p><strong>Not all grains of data are equally likely to break.</strong> Taking the previous point into account, we likely cannot check everything, so we ought to focus our attention on some combination of the most “important” errors and the most “likely” errors. In the subway example, turnstile-level failures are likely because each individual turnstile is a sensor that is independently involved in the <em>data collection process</em> and can break in its own unique ways. However, for something like a clickstream for different users on a website, the data collection process is centralized, so it would be less like (and infeasible to check) for individual customer-level data to break in dramatically different ways.</p>
<p><strong>High-risk grouped data is possibly ungrouped further upstream.</strong> Following the logic that grouped data is more dangerous if groups denote units responsible for their own data collection, in theory this data is being transmitted separately at some point in the pipeline. Thus, in some cases it could be checked before it is grouped. However, we cannot always get infinitely far upstream in the data pipeline as some pieces may be outside of our control or produced atomically by a third-party platform.</p>
<p><strong>Some grouped checks can be achieved in other ways.</strong> Some (but not all) of these checks can be mocked by creating composite variables, using other built-in features<sup>6</sup>, or writing custom checks <sup>7</sup>. However, there solutions seem to defy part of the benefits of these tools: semantically meaningful checks wrapped in readable syntax and ready for use out-of-the-box. This also implies that grouped operations are far less than first-class citizens. This also limits the ability to make use of some of the excellent functionality these tools offer for documenting data quality checks in metadata and reporting on their outcomes.</p>
<p>I also considered the possibility that this is a niche, personal need moreso than a general one because I work with a <em>lot</em> of panel data. However, I generally believe <em>most</em> data is nested in some way. I can at least confirm that I’ve not completely alone in this desire with a peak at GitHub issue feature requests in different data quality tools. For example, three stale stale GitHub issues on the <code>Great Expectations</code> repo (<a href="https://github.com/great-expectations/great_expectations/issues/351">1</a>, <a href="https://github.com/great-expectations/great_expectations/issues/402">2</a>, <a href="https://github.com/great-expectations/great_expectations/issues/373">3</a>) request similar functionality.</p>
</section>
<section id="downsides" class="level2">
<h2 class="anchored" data-anchor-id="downsides">Downsides</h2>
<p>There’s no such thing as a free lunch or a free feature enhancement. My point is in no way to criticize existing data quality tools that do not have this functionality. Designing any tool is a process of trade-offs, and it’s only fair to discuss the downsides. These issues are exacerbated further when adding “just one more thing” to mature, heavily used tools as opposed to developing new ones.</p>
<p><strong>Grouped checks are more computational expensive.</strong> Partitioning and grouping can make data check operations more expensive by disabling certain computational shortcuts<sup>8</sup> and requiring more total data to be retained. This is particularly true if the data is indexed or partitioned along different dimensions than the groups used for checks. The extra time required to run more fine-grained checks could become intractable or at least unappealing, particularly in an interactive or continuous integration context. However, in many cases it could be a better use of time to more rigorously test recently loaded data as opposed to (or in conjunction with) running higher-level checks across larger swaths of data.</p>
<p><strong>API bloat makes tools less navigable.</strong> Any new feature has to be documented by developers and comprehended by users. Having too many “first-class citizen” features can lead to features being ignored, unknown, or misused. It’s easy to point to any one feature in isolation and claim it is important; it’s much harder to stare at a full backlog and decide where the benefits are worth the cost.</p>
<p><strong>Incremental functionality adds more overhead.</strong> Every new feature demands careful programming and testing. Beyond that, there’s a substantial mental tax in thinking through how that feature needs to interact with existing functionality while, at the same time, preserving backwards compatibility.</p>
<p><strong>Every feature built means a different one isn’t.</strong> As a software user, it’s easy to have a great idea for a feature that should absolutely be added. That’s a far different challenge than that faced by the developers and maintainers who must prioritize a rich backlog full of competing priorities.</p>
</section>
<section id="survey-of-available-tools" class="level2">
<h2 class="anchored" data-anchor-id="survey-of-available-tools">Survey of available tools</h2>
<p>My goal is in no way to critique any of the amazing, feature-rich data quality tools available today. However, to further illustrate my point, I pulled down key data checks from a few prominent packages to assess how many of their tests would be potentially enhanced with the ability to provided grouping parameters. Below are lists for <code>dbt-utils</code>, <code>Great Expectations</code>, and <code>Monte Carlo</code> with relevant tests <em>in bold</em>.</p>
<section id="dbt-utils-8-14" class="level3">
<h3 class="anchored" data-anchor-id="dbt-utils-8-14">dbt-utils (8 / 14)</h3>
<ul>
<li><strong>equal_rowcount</strong></li>
<li>equality</li>
<li>expression_is_true</li>
<li><strong>recency</strong><br>
</li>
<li><strong>at_least_one</strong></li>
<li><strong>not_constant</strong></li>
<li><strong>cardinality_equality</strong></li>
<li><strong>unique_where</strong></li>
<li>not_null_where<br>
</li>
<li><strong>not_null_proportion</strong></li>
<li>relationships_where</li>
<li>mutually_exclusive_ranges</li>
<li><strong>unique_combination_of_columns</strong> (<em>but less important - only for semantics</em>)</li>
<li>accepted_range</li>
</ul>
</section>
<section id="great-expectations-15-37" class="level3">
<h3 class="anchored" data-anchor-id="great-expectations-15-37">Great Expectations (15 / 37)</h3>
<ul>
<li><strong>expect_column_values_to_be_unique</strong> (<em>but less important - only for semantics</em>)</li>
<li>expect_column_values_to_not_be_null<br>
</li>
<li>expect_column_values_to_be_null<br>
</li>
<li>expect_column_values_to_be_of_type<br>
</li>
<li>expect_column_values_to_be_in_type_list</li>
<li>expect_column_values_to_be_in_set</li>
<li>expect_column_values_to_not_be_in_set</li>
<li>expect_column_values_to_be_between<br>
</li>
<li><strong>expect_column_values_to_be_increasing</strong></li>
<li><strong>expect_column_values_to_be_decreasing</strong></li>
<li>expect_column_value_lengths_to_be_between</li>
<li>expect_column_value_lengths_to_equal</li>
<li>expect_column_values_to_match_regex</li>
<li>expect_column_values_to_not_match_regex</li>
<li>expect_column_values_to_match_regex_list</li>
<li>expect_column_values_to_not_match_regex_list</li>
<li>expect_column_values_to_match_like_pattern</li>
<li>expect_column_values_to_not_match_like_pattern</li>
<li>expect_column_values_to_match_like_pattern_list</li>
<li>expect_column_values_to_not_match_like_pattern_list</li>
<li>expect_column_values_to_match_strftime_format</li>
<li>expect_column_values_to_be_dateutil_parseable</li>
<li>expect_column_values_to_be_json_parseable</li>
<li>expect_column_values_to_match_json_schema</li>
<li>expect_column_distinct_values_to_be_in_set</li>
<li><strong>expect_column_distinct_values_to_contain_set</strong></li>
<li><strong>expect_column_distinct_values_to_equal_set</strong></li>
<li><strong>expect_column_mean_to_be_between</strong></li>
<li><strong>expect_column_median_to_be_between</strong></li>
<li><strong>expect_column_quantile_values_to_be_between</strong></li>
<li><strong>expect_column_stdev_to_be_between</strong></li>
<li><strong>expect_column_unique_value_count_to_be_between</strong></li>
<li><strong>expect_column_proportion_of_unique_values_to_be_between</strong></li>
<li><strong>expect_column_most_common_value_to_be_in_set</strong></li>
<li><strong>expect_column_max_to_be_between</strong></li>
<li><strong>expect_column_min_to_be_between</strong></li>
<li><strong>expect_column_sum_to_be_between</strong></li>
</ul>
</section>
<section id="monte-carlo-all" class="level3">
<h3 class="anchored" data-anchor-id="monte-carlo-all">Monte Carlo (All)</h3>
<p>Any of Monte Carlo’s checks might be more sensitive to detecting changes with subgrouping. Since these “health metrics” tend to represent distributional properties, it can be useful to ensure that “good groups” aren’t pulling down the average value and masking errors in “bad groups”.</p>
<ul>
<li>Pct NUll<br>
</li>
<li>Pct Unique</li>
<li>Pct Zero<br>
</li>
<li>Pct Negative<br>
</li>
<li>Min</li>
<li>p20</li>
<li>p40</li>
<li>p60</li>
<li>p80</li>
<li>Mean</li>
<li>Std</li>
<li>Max</li>
<li>Pct Whitespace</li>
<li>Pct Integer</li>
<li>Pct “Null”/“None”</li>
<li>Pct Float</li>
<li>Pct UUID</li>
</ul>
</section>
</section>
<section id="code-appendix" class="level2">
<h2 class="anchored" data-anchor-id="code-appendix">Code Appendix</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># data source: http://web.mta.info/developers/turnstile.html</span></span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb14-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb14-4"></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define read function with schema ----</span></span>
<span id="cb14-6">read_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(url) {</span>
<span id="cb14-7">  </span>
<span id="cb14-8">  readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(url,</span>
<span id="cb14-9">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb14-10">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_types =</span></span>
<span id="cb14-11">                    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cols</span>(</span>
<span id="cb14-12">                      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">C/A</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_character</span>(),</span>
<span id="cb14-13">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">UNIT =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_character</span>(),</span>
<span id="cb14-14">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">SCP =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_character</span>(),</span>
<span id="cb14-15">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">STATION =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_character</span>(),</span>
<span id="cb14-16">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">LINENAME =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_character</span>(),</span>
<span id="cb14-17">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">DIVISION =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_character</span>(),</span>
<span id="cb14-18">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">DATE =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_date</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%m/%d/%Y"</span>),</span>
<span id="cb14-19">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">TIME =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_time</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>),</span>
<span id="cb14-20">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">DESC =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_character</span>(),</span>
<span id="cb14-21">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ENTRIES =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_integer</span>(),</span>
<span id="cb14-22">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">EXITS =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_integer</span>()</span>
<span id="cb14-23">                    ))</span>
<span id="cb14-24">  </span>
<span id="cb14-25">}</span>
<span id="cb14-26"></span>
<span id="cb14-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ridership data ----</span></span>
<span id="cb14-28">dates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq.Date</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2020-01-11'</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2020-04-11'</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'7 days'</span>)</span>
<span id="cb14-29">dates_str <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(dates, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%y%m%d'</span>)</span>
<span id="cb14-30">dates_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'http://web.mta.info/developers/data/nyct/turnstile/turnstile_%s.txt'</span>, dates_str)</span>
<span id="cb14-31">datasets <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(dates_url, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> read_data)</span>
<span id="cb14-32">full_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(rbind, datasets)</span>
<span id="cb14-33">full_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> full_data[full_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>DESC <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"REGULAR"</span>,]</span>
<span id="cb14-34"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(full_data)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CA"</span></span></code></pre></div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>With the exception of <code>pointblank</code> which kindly entertained an issue I opened on this topic: https://github.com/rich-iannone/pointblank/issues/300↩︎</p></li>
<li id="fn2"><p>The “pit of success” is the idea that well-designed tools can help nudge people to do the “right” thing by default because its also the easiest. I first learned of it in a talk by Hadley Wickham, and it is originally attributed to Microsoft program manage Rico Mariani.↩︎</p></li>
<li id="fn3"><p>Code for this pull is at the bottom of the post.↩︎</p></li>
<li id="fn4"><p>This can happen for many reasons including turnstile maintenance or replacement. My goal in this post is not to go into all of the nuances of this particular dataset, of which much has already been written, so I’m simplifying somewhat to keep it as a tractable motivating example.↩︎</p></li>
<li id="fn5"><p>Transformations should probably never assume this. Any real ETL process using this data would like have to account for incompleteness in an automated fashion because it really is not a rare event. Again, we are simplifying here for the sake of example↩︎</p></li>
<li id="fn6"><p>For example, Great Expectations does offer conditional expectations which can be executed on manually-specified subsets of data. This could be a tractable solution for applying data checks to a small number of categorical variables, but less so for large or ill-defined categories like user IDs. More here: https://legacy.docs.greatexpectations.io/en/latest/reference/core_concepts/conditional_expectations.html↩︎</p></li>
<li id="fn7"><p>Like, in the case of <code>Great Expectation</code>’s python-based API, writing custom code to partition data before applying checks, or, in the case of <code>dbt</code>/<code>dbt-utils</code> writing a custom macro.↩︎</p></li>
<li id="fn8"><p>For example, the maximum of a set of numbers is the maximum of the maximums of the subsets. Thus, if my data is distributed, I can find the max by comparing only summary statistics from the distributed subsets instead of pulling all of the raw data back together.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>data</category>
  <guid>https://emilyriederer.com/post/grouping-data-quality/</guid>
  <pubDate>Sat, 27 Nov 2021 06:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/grouping-data-quality/featured.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>A lightweight data validation ecosystem with R, GitHub, and Slack</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/data-valid-lightweight/</link>
  <description><![CDATA[ 




<p>Data quality monitoring is an essential part of any data analysis or business intelligence workflow. As such, an increasing number of promising tools<sup>1</sup> have emerged as part of the <a href="https://moderndatastack.xyz/">Modern Data Stack</a> to offer better orchestration, testing, and reporting.</p>
<p>Although I’m very excited about the developments in this space, I realize that emerging products may not be the best fit for every organization. Enterprise tools can be financial costly, and, more broadly, even free and open-source offerings bring costs in the time and risks associated with vetting tools for security, training associates, and committing to potential lock-in of building workflows around these tools. Additionally, data end-users may not always have the ability to get far enough “upstream” in the production process of their data to make these tools make sense.</p>
<p>“Right-sizing” technology to the problem at hand is a critical task. A “best” solution with the most polished, professional, exciting product isn’t always the best <em>fit</em> for your needs. Trade-offs must be made between feature completeness and fit-for-purpose. In other words, sometimes its more important for technology to be <em>“good enough”</em>.<sup>2</sup></p>
<p>Additionally, in an embarassment of riches of developer tools, sometimes the number of tools (no matter how good) we have to work with can become a burden. Personally, I like to leverage a core set of tools like Slack and GitHub for as many of their strengths when possible instead of allowing a creep of many different project-specific communication and project management tools.</p>
<p>With all of that in mind, in this post I explore a lightweight approach to a data quality workflow using a minimal set of tools that are likely already part of many team’s data stacks: R, GitHub, and Slack. This approach may be far from perfect, but I believe it provides a lot of “bang for the buck” by enabling scheduling data quality monitoring, instantaneous alerting, and workflow management at little-to-no incremental overhead.</p>
<p>The full code for this demo is available in my <a href="https://github.com/emilyriederer/data-validation-demo">emilyriederer/data-validation-demo</a> repo on GitHub.</p>
<section id="overall-workflow" class="level2">
<h2 class="anchored" data-anchor-id="overall-workflow">Overall Workflow</h2>
<p>To think about right-sizing, it’s first useful to think about what features from some of the “hot” data quality monitoring products make them so appealing. Key features and tradeoffs include:</p>
<ul>
<li><strong>Always-on monitoring</strong>: Monitoring any time data is loaded or changed (or preferably <em>before</em> – such as dbt’s dev schemas and Great Expectation’s in-pipeline integration)</li>
<li><strong>Reporting</strong>: Dashboards or tools to review outputs of data validation</li>
<li><strong>Alerting</strong>: Proactive logging and alerting of failures of data validation checks</li>
<li><strong>Integration in data production process</strong>: As alluded to in the “always-on” point, the more validation is not just a passive activity but part of data production itself the better (e.g.&nbsp;preventing bad data from being loaded)</li>
</ul>
<p>This approach makes some tradeoffs. It’s not orchestrated or trigger-based but can be scheduled to run on a regular basis. It’s also loosely-coupled with data production, but as we will see it can still support a better GitHub-based workflow for seeing issues through to resolution.</p>
<p>The basic idea of this workflow is to recreate as many of these strengths as possibly by maximally leveraging the strengths of existing tools. We use each for what its already good at, including:</p>
<ul>
<li><strong>R</strong>:
<ul>
<li>Data validation with the <a href="https://rich-iannone.github.io/pointblank/"><code>pointblank</code> package</a> can be run directly or “outsourced” upstream to run in-place in a database (if that is where your data lives)</li>
<li>Validation failures are logged as GitHub issues using the <a href="https://emilyriederer.github.io/projmgr/"><code>projmgr</code> package</a></li>
<li>A more aesthetic version of data quality reporting output is produced by running the above steps by rendering an <strong>R Markdown</strong> document to HTML</li>
</ul></li>
<li><strong>GitHub</strong>: Serves as the central nervous system for execution, project management, and reporting
<ul>
<li><strong>Actions</strong>: Reruns the <code>pointblank</code> checks on a regular basis and updates an RMarkdown-based website</li>
<li><strong>Pages</strong>: Hosts the resultings RMarkdown-generated HTML for accessible data quality reporting</li>
<li><strong>Issues</strong>: Record data quality errors caught by <code>pointblank</code>. This provides an easy platform to assign owners, discuss issues, and track progress. With detailed labels, closed issues can also serve as a way to catalog past errors and identify trends or needed areas of improvement (where repeat failures occur)</li>
</ul></li>
<li><strong>Slack</strong>: Integrates with GitHub to provide alerts on new issues on a Slack channel. Individual teams or team members can use Slack’s controls to determine how they receive notifications (e.g.&nbsp;email, mobile notification, etc.) for time-sensitive issues</li>
</ul>
<p>Intrigued? Next we’ll step through the technical details.</p>
</section>
<section id="detailed-implementation" class="level2">
<h2 class="anchored" data-anchor-id="detailed-implementation">Detailed Implementation</h2>
<p>This workflow revolves around a single main R Markdown document. The full version can be found <a href="https://github.com/emilyriederer/data-validation-demo/blob/master/data-valid-pipe.Rmd">on GitHub</a>, and we will step through key components of the code and its interaction with the GitHub and Slack platforms below.</p>
<section id="validating-data-with-pointblank" class="level3">
<h3 class="anchored" data-anchor-id="validating-data-with-pointblank">Validating data (with <code>pointblank</code>)</h3>
<p><img src="https://emilyriederer.com/post/data-valid-lightweight/report.PNG" class="img-fluid"></p>
<p>The first key step is setting up validation with <code>pointblank</code>. Here, I show a minimal example which uses a very small toy dataset. However, <code>pointblank</code> can also connect to a number of remote datasources like databases and run these checks on the data in-place<sup>3</sup> The following example just runs a few checks for data ranges, nulls, and duplicates although a wide array of premade and customizable checks are available.</p>
<p>Out of the box, we can produce an aesthetic table of validation results.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb1-2">act <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">action_levels</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">warn_at =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">notify_at =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stop_at =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb1-3">table_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_table"</span></span>
<span id="cb1-4">agent <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_agent</span>(tbl, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">actions =</span> act) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_vals_between</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(x), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_vals_not_null</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(x)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rows_distinct</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(x,y))</span>
<span id="cb1-9">res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interrogate</span>(agent)</span>
<span id="cb1-10">res</span></code></pre></div>
</div>
</section>
<section id="posting-results-as-github-issues-with-projmgr" class="level3">
<h3 class="anchored" data-anchor-id="posting-results-as-github-issues-with-projmgr">Posting results as GitHub issues (with <code>projmgr</code>)</h3>
<p><img src="https://emilyriederer.com/post/data-valid-lightweight/issues.PNG" class="img-fluid"></p>
<p>Beyond <code>pointblank</code>’s aesthetic output, we can also extract an underlying dataframe with all of the check information include which columns were included in the check, a human-readable description of the check, and the failure rate.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb2-2">  res<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>validation_set <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(warn) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(columns_expr, brief, column, n, n_failed, f_failed) </span></code></pre></div>
</div>
<p>With this information, we can use <code>projmgr</code> to connect to a GitHub repository<sup>4</sup>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">repo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_repo_ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"emilyriederer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data-validation-demo"</span>)</span></code></pre></div>
</div>
<p>The full data wrangling steps are shown in the <a href="https://github.com/emilyriederer/data-validation-demo/blob/master/data-valid-pipe.Rmd">R Markdown</a>, but after light data wrangling of the output dataset (<code>out</code>) to convert validation results into a title, description, and labels, we can post these issues to our repository.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">issue_numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap</span>(issues_df, </span>
<span id="cb4-2">                      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">possibly</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">post_issue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ref =</span> repo, ...), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">otherwise =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb4-3">                      )</span></code></pre></div>
</div>
<p>This creates the two issues shown above with labels for each table and variable.</p>
<p>The full R Markdown also shows how this collection of issues can also be pulled back into the resulting report to provide context on the status of each issue such as whether it has been assigned to an owner and the number of comments it has.</p>
</section>
<section id="running-on-github-actions" class="level3">
<h3 class="anchored" data-anchor-id="running-on-github-actions">Running on GitHub Actions</h3>
<p>Of course, monitoring isn’t useful if it doesn’t run and detect new errors at a reasonable cadence. One way to run this report regularly is using <a href="https://github.com/features/actions">GitHub Actions</a>. With a simple <a href="https://github.com/emilyriederer/data-validation-demo/blob/master/.github/workflows/run-validation.yaml">config file</a>, we are able to schedule a daily cron job. This job:</p>
<ul>
<li>Exposes the GITHUB personal access token we need for <code>projmgr</code> to be able to write issues to our repository<sup>5</sup></li>
<li>Sets up R and pandoc to be able to knit an R Markdown</li>
<li>Installs needed packages</li>
<li>Renders the R Markdown to the file <code>docs/index.html</code> (Why this name? See the next step)</li>
<li>Pushes the results back to the repo</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">on<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-2">  schedule<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-3">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> cron<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"30 4 * * 3"</span></span>
<span id="cb5-4">  push<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-5">    branches<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-6">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> master</span>
<span id="cb5-7"></span>
<span id="cb5-8">jobs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-9">  render<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-10">    name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Render my document</span>
<span id="cb5-11">    runs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>on<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> macOS<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>latest</span>
<span id="cb5-12">    steps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-13">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Create and populate .Renviron file</span>
<span id="cb5-14">        run<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb5-15">          echo GITHUB_PAT<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$GH_PAT"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">~/</span>.Renviron</span>
<span id="cb5-16">        shell<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> bash</span>
<span id="cb5-17">        env<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-18">          GH_PAT<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">$</span>{{secrets.GH_PAT}}</span>
<span id="cb5-19">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> uses<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> actions<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>checkout<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>v2</span>
<span id="cb5-20">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> uses<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> r<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>actions<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>setup<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>v1</span>
<span id="cb5-21">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> uses<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> r<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>actions<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>setup<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>pandoc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>v1</span>
<span id="cb5-22">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> uses<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> r<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>actions<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>setup<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>tinytex<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>v1</span>
<span id="cb5-23">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Install rmarkdown</span>
<span id="cb5-24">        run<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Rscript <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>e <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'install.packages(c("pointblank", "projmgr", "dplyr", "purrr", "glue", "rmarkdown", "knitr"))'</span></span>
<span id="cb5-25">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Render my document to all types</span>
<span id="cb5-26">        run<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Rscript <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>e <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rmarkdown::render("data-valid-pipe.Rmd", output_file = "index.html", output_dir = "docs")'</span></span>
<span id="cb5-27">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Commit results</span>
<span id="cb5-28">        run<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb5-29">          git add <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>force docs</span>
<span id="cb5-30">          git commit <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>m <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rerun validation checks'</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> echo <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No changes to commit"</span></span>
<span id="cb5-31">          git push origin <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> echo <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No changes to commit"</span></span></code></pre></div>
</div>
</section>
<section id="publishing-on-github-pages" class="level3">
<h3 class="anchored" data-anchor-id="publishing-on-github-pages">Publishing on GitHub Pages</h3>
<p>Now that we’ve created an HTML report from our R Markdown, we can easily host it on <a href="https://pages.github.com/">GitHub Pages</a> by going to our repo’s <code>Settings &gt; Pages</code> and selecting as a <code>Source</code> the <code>main</code> or <code>master</code> branch and, specifically, the <code>docs</code> folder. GitHub will then provide a URL to our pages where the <code>docs/index.html</code> file serves as the main page.</p>
<p>In the case of my repo <code>emilyriederer/data-validation-demo</code>, the URL is https://emilyriederer.github.io/data-validation-demo/.</p>
</section>
<section id="setting-up-slack-notifications" class="level3">
<h3 class="anchored" data-anchor-id="setting-up-slack-notifications">Setting up Slack notifications</h3>
<p><img src="https://emilyriederer.com/post/data-valid-lightweight/featured.png" class="img-fluid"></p>
<p>Of course, no one wants to go check one more report every single day. While you can watch a repository on GitHub and receive emails about new issues, you might prefer not to fill up your own inbox or have more control over how you manage these notifications. In your team is already using Slack, <a href="https://github.com/integrations/slack">GitHub + Slack integration</a> offers a great alternative.</p>
<p>You can consider making a dedicated Slack channel for data issues and automate instant Slack notifications when any new issues are opened. First, as described in the link above, install GitHub integration for Slack. Then, the following commands (typed simply as if you are writing a message on the Slack channel) connect to your GitHub repo and unsubscribe from all notifications except for issues.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>invite <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>github</span>
<span id="cb6-2"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>github subscribe your<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>org<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>your<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>repo</span>
<span id="cb6-3"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>github unsubscribe your<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>org<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>your<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>repo pulls commits releases deployments</span></code></pre></div>
</div>
<p>Slack messages can both allow teams to customize how and when they are notified about emerging issues across different devices. This also allows a space for “meta” discussions, such as who is equipped to handle an issue, before someone is assigned and the conversation moves to GitHub itself.</p>
</section>
</section>
<section id="trade-offs" class="level2">
<h2 class="anchored" data-anchor-id="trade-offs">Trade Offs</h2>
<p>There’s always a fine line between exploiting the synergies of different tools or creating an incoherent Rube Goldberg machine with rough edges and new problems. However, different solutions are best suited for different organizations, teams, and data needs. I’m very excited about all of the emerging data quality tools and platforms, and for large enterprises I suspect that may be the way to go. However, if you’re looking for scaling up your data management practices with minimal new tools, infrastructure, or tech debt, I hope this set of powerful but lightweight tools can be a first step in a good direction.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Just to name a few: dbt, datafold, Soda, Great Expectations, and Monte Carlo↩︎</p></li>
<li id="fn2"><p>With love and admiration, I borrow this phrase from the excellent paper “Good Enough Practices in Scientific Computing”: https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005510↩︎</p></li>
<li id="fn3"><p>Logic is translated to SQL via <code>dbplyr</code>.↩︎</p></li>
<li id="fn4"><p>Assuming you have your personal access token set per the documentation: https://emilyriederer.github.io/projmgr/articles/github-pat.html↩︎</p></li>
<li id="fn5"><p>This assumes that within GitHub, the PAT is defined as a secret called GH_PAT. Curiously, GitHub does not allow secrets that start with the word “GITHUB”. Who knew? Additionally, depending on the privacy level of your repository, you might not need a PAT to make issues and could skip this step.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>rstats</category>
  <category>data</category>
  <category>elt</category>
  <guid>https://emilyriederer.com/post/data-valid-lightweight/</guid>
  <pubDate>Thu, 26 Aug 2021 05:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/data-valid-lightweight/featured.png" medium="image" type="image/png" height="105" width="144"/>
</item>
<item>
  <title>97 Things Every Data Engineer Should Know: Collective Wisdom from the Experts</title>
  <dc:creator>Tobias Macey</dc:creator>
  <link>https://emilyriederer.com/publication/data-eng-97-things/</link>
  <description><![CDATA[ 



<p>I contributed six chapters to the book:</p>
<ul>
<li><strong>Develop communities - not just code</strong>: On building developing communities along with code bases and empowering versus patronizing your data product’s customers</li>
<li><strong>Give data products a front-end with latent documentation</strong>: On low effort practices for improving data documentation and usability</li>
<li><strong>There’s no such thing as data quality</strong>: On the value of data “fit for purpose”</li>
<li><strong>The many meanings of missingness</strong>: On causes and consequences of null field encoding</li>
<li><strong>Column names as contracts</strong>: On embedding metadata and performance “contracts” in column names</li>
<li><strong>Data validation needs more than summary statistics</strong>: On the importance of context-informed data validation</li>
</ul>



 ]]></description>
  <category>data</category>
  <guid>https://emilyriederer.com/publication/data-eng-97-things/</guid>
  <pubDate>Sun, 01 Aug 2021 05:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/publication/data-eng-97-things/featured.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Understanding the data (error) generating processes for data validation</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/data-error-gen/</link>
  <description><![CDATA[ 





<style>
table {
  width: 100%;
}

table strong { 
   color: darkred;
}

</style>
<p>Statistics literature often makes reference to the <em>data generating process</em> (DGP): an idealized description of a real-world system responsible for producing observed data. This leads to a modeling approach focused on describing that system as opposed to blindly fitting observations to a common functional form.<sup>1</sup></p>
<p>As a trivial example, if one wished to model the height of a group of adults, they might suppose that the height of women and the height of men each is normally distributed with separate means and standard deviations. Then the overall distribution of population heights could be models as a mixture of samples from these two distributions.<sup>2</sup></p>
<p>However, DGPs are not only useful for modeling. <strong>Conceptualizing the DGP of our observations can also lead to more principled data validation</strong> if we broaden the scope of the DGP to include the subsequent <em>manufacturing</em> of the data not just the originating <em>mechanism</em>.</p>
<p>Unfortunately, consumers of analytical data may not always be familiar with the craft of data production (including data engineering, data modeling, and data management). Without an understanding of the general flow of data processing between collection and publication to a data warehouse, data consumers are less able to theorize about failure modes. Instead, similarly to blindly fitting models without an underlying theory, consumers may default to cursory checks of summary statistics without hypotheses for the kind of errors they are trying to detect or how these checks might help them.</p>
<p>This post explores the DGP of system-generated data and the common ways that these processes can introduce risks to data quality. As we discuss data validation, we will make reference to the six dimensions of data quality defined by <a href="https://damauk.wildapricot.org/resources/Documents/DAMA%20UK%20DQ%20Dimensions%20White%20Paper2020.pdf">DAMA</a>: completeness, uniqueness, timeliness, validity, accuracy, and consistency. Along the way, we will explore how understanding how understanding key failure modes in the data production process can lead to more principled analytical data validation.<sup>3</sup></p>
<section id="the-four-dgps-for-data-management" class="level2">
<h2 class="anchored" data-anchor-id="the-four-dgps-for-data-management">The Four DGPs for Data Management</h2>
<p>To better theorize about data quality issues, it’s useful to think of four DGPs: the real-world DGP, the data collection/extraction DGP<sup>4</sup>, the data loading DGP, and the data transformation DGP.</p>
<p><img src="https://emilyriederer.com/post/data-error-gen/dgp.png" class="img-fluid"></p>
<p>For example, consider the role of each of these four DGPs for e-commerce data:</p>
<ul>
<li><strong>Real-world DGP</strong>: Supply, demand, marketing, and a range of factors motivate a consumer to visit a website and make a purchase</li>
<li><strong>Data collection DGP</strong>: Parts of the website are instrumented to log certain customer actions. This log is then extracted from the different operational system (login platforms, payment platforms, account records) to be used for analysis</li>
<li><strong>Data loading DGP</strong>: Data recorded by different systems is moved to a data warehouse for further processing through some sort of manual, scheduled, or orchestrated job. These different systems may make data available at different frequencies.</li>
<li><strong>Data transformation DGP</strong>: To arrive at that final data presentation requires creating a <a href="https://en.wikipedia.org/wiki/Data_model">data model</a> to describe domain-specific attributes with key variables crafted with data transformations</li>
</ul>
<p>Or, consider the role of each of these four DGPs for subway ridership data<sup>5</sup>:</p>
<ul>
<li><strong>Real-world DGP</strong>: Riders are motivated to use public transportation to commute, run errands, or visit friends. Different motivating factors may cause different weekly and annual seasonality</li>
<li><strong>Data collection DGP</strong>: To ride the subway, riders go to a station and enter and exit through turnstiles. The mechanical rotation of the turnstile caused by a rider passing through is recorded</li>
<li><strong>Data loading DGP</strong>: Data recorded at each turnstile is collected through a centralized computer system at the station. Once a week, each station uploads a flat file of this data to a data lake owned by the city’s Department of Transportation</li>
<li><strong>Data transformation DGP</strong>: Turnstiles from different companies may have different data formats. Transformation may include harmonizing disparate sources, coding system-generated codes (e.g.&nbsp;Station XYZ) to semantically meaningful names (e.g.&nbsp;Main Street Station), and publishing a final unified representation across stations and across time</li>
</ul>
<p>In the next sections, we’ll explore how understanding key concepts about each of these DGPs can help build a consumers’ intuition on where to look for problems.</p>
</section>
<section id="data-collection" class="level2">
<h2 class="anchored" data-anchor-id="data-collection">Data Collection</h2>
<p>Data collection is necessarily the first step in data production, but the very goal of data collection: translating complex human concepts into tabular data records is fraught with error. Data collection is effectively dimensionality reduction, and just like statistical dimensionality reduction, it must sometimes sacrifice accuracy for clarity.</p>
<p>This tradeoff makes data collection vulnerable to one of the largest risks to data validity: not that the data itself is incorrect <em>given its stated purpose</em> but rather that users misconstrue the population or metrics it includes. Thus, understanding what systems are intending to capture, publish, and extract and how they chose to encode information for those observations is essential for data validation and subsequent analysis.</p>
<p>Data collection can happen in countless different ways: experimentation, surveys, observation, sensors, etc. In many business settings, data is often extracted from source systems whose primary purpose is to execute some sort of real-world process.<sup>6</sup> Such systems may naturally collect data for operational purposes or may be <em>instrumented</em> to collect and log data as they are used. This production data is then often extracted from a source system to an alternative location such as a data warehouse for analysis.</p>
<section id="what-counts" class="level3">
<h3 class="anchored" data-anchor-id="what-counts">What Counts</h3>
<p>One of the tricky nuances of data collection is understanding what precisely is getting captured and logged in the first place.</p>
<p>Consider something as simple as a login system where users must enter their credentials, endure a Captcha-like verification process to prove that they are not a robot, and enter a multi-factor authentication code.</p>
<p><img src="https://emilyriederer.com/post/data-error-gen/login-log.png" class="img-fluid"></p>
<p>Which of these events gets collected and recorded has a significant impact on subsequent data processing. In a technical sense, no inclusion/exclusion decision here is <em>incorrect</em>, persay, but if the producers’ choices don’t match the consumers’ understandings, it can lead to misleading results.</p>
<p>For example, an analyst might seek out a <code>logins</code> table in order to calculate the rate of successful website logins. Reasonably enough, they might compute this rate as the sum of successful events over the total. Now, suppose two users attempt to login to their account, and ultimately, one succeeds in accessing their private information and the other doesn’t. The analyst would probably hope to compute and report a 50% login success rate. However, depending on how the data is represented, they could quite easily compute nearly any value from 0% to 100%.</p>
<p><img src="https://emilyriederer.com/post/data-error-gen/login-rate.png" class="img-fluid"></p>
<ul>
<li><strong>Per Attempt</strong>: If data is logged once per overall login attempt, successful attempts only trigger one event, but a user who forgot their password may try (and fail) to login multiple times. In the case illustrated above, that deflates the successful login rate to <strong>25%</strong>.</li>
<li><strong>Per Event</strong>: If the logins table contains a row for every login-related event, each ‘success’ will trigger a large number of positive events and each ‘failure’ will trigger a negative event preceded by zero or more positive events. In the case illustrated below, this inflates our successful login rate to <strong>86%</strong>.</li>
<li><strong>Per Conditional</strong>: If the collector decided to only look at downstream events, perhaps to circumvent record duplication, they might decide to create a record only to denote the success or failure of the final step in the login process (MFA). However, login attempts that failed an upstream step would not generate any record for this stage because they’ve already fallen out of the funnel. In this case, the computed rate could reach <strong>100%</strong></li>
<li><strong>Per Intermediate</strong>: Similarly, if the login was defined specifically as successful password verification, the computed rate could his <strong>100%</strong> even if some users subsequently fail MFA</li>
</ul>
<table class="table">
<thead>
<tr class="header">
<th></th>
<th>Session</th>
<th>Attempt</th>
<th>Attempt</th>
<th>Outcome</th>
<th>Intermediate</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Success</td>
<td>1</td>
<td>1</td>
<td>6</td>
<td>1</td>
<td>2</td>
</tr>
<tr class="even">
<td>Total</td>
<td>2</td>
<td>4</td>
<td>7</td>
<td>1</td>
<td>2</td>
</tr>
<tr class="odd">
<td>Rate</td>
<td>50%</td>
<td><strong>25%</strong></td>
<td><strong>86%</strong></td>
<td><strong>100%</strong></td>
<td><strong>100%</strong></td>
</tr>
</tbody>
</table>
<p>While humans have a shared intuition of what concepts like a user, session, or login are, the act of collecting data forces us to map that intuition onto an atomic event . Any misunderstanding in precisely what that definition is can have massive impact on the perceived data quality; “per event” data will appear heavily duplicated if it is assumed to be “per session” data.</p>
<p>In some cases, this could be obvious to detect. If the system outputs fields that are incredibly specific (e.g.&nbsp;with some hyperbole, imagine a <code>step_in_the_login_process</code> field with values taking any of the human-readable descriptions of the fifteen processes listed in the image above), but depending how this source is organized (e.g.&nbsp;in contrast to above, if we only have fields like <code>sourceid</code> and <code>processid</code> with unintuitive alphanumeric encoded values) and defined, it could be nearly impossible to understand the nuances without uncovering quality metadata or talking to a data producer.<sup>7</sup></p>
</section>
<section id="what-doesnt-count" class="level3">
<h3 class="anchored" data-anchor-id="what-doesnt-count">What Doesn’t Count</h3>
<p>Along with thinking about what <em>does</em> count (or gets logged), it’s equally important to understand what systemically does not generate a record. Consider users who have the intent or desire to login (motivated by a real-world DGP) but cannot find the login page, or users who load the login page but never click a button because they know that they’ve forgotten their password and see no way to request it. Often, some of these corner cases may be some of the most critical and informative (e.g.&nbsp;here, demonstrating some major flaws in our UI). It’s hard to <em>computationally</em> validate what data doesn’t exist, so <em>conceptual</em> data validation is critical.</p>
</section>
<section id="the-many-meanings-of-null" class="level3">
<h3 class="anchored" data-anchor-id="the-many-meanings-of-null">The Many Meanings of Null</h3>
<p>Related to the presence and absence of full <em>records</em> is the presence or absence of individual <em>fields</em>. If records contain some but not all relevant information, they may be published with explicitly missing fields or the full record may not be published at all.</p>
<p><img src="https://emilyriederer.com/post/data-error-gen/missing-imp-exp.png" class="img-fluid"></p>
<p>Understanding what the system implies by each <em>explicitly</em> missing data field is also critical for validation and analysis. Checks for data completeness usually include counting null values, but null data isn’t always incorrect. In fact, null data can be highly informative if we know what it means. Some meanings of null data might include:</p>
<ul>
<li><strong>Field is not relevant</strong>: Perhaps our <code>logins</code> table reports the mobile phone operating system (iOS or Android) that was used to access the login page to track platform-specific issues. However, there is no valid value for this</li>
<li><strong>Relevant value is not known</strong>: Our <code>logins</code> table might also have an <code>account_id</code> field which attempts to match login attempts to known accounts/customers using different metadata like cookies or IP addresses. In theory, almost everyone trying to log in should have an account identifier, but our methods may not be good enough to identify them in all cases</li>
<li><strong>Relevant value is null</strong>: Of course, sometimes someone without an account at all might try to log in for some reason. In this case, the correct value for an <code>account_id</code> field truly <em>is</em> null</li>
<li><strong>Relevant value was recorded incorrectly</strong>: Sometimes systems have glitches. Without a doubt, every single login attempt <em>should</em> have a timestamp, but such a field could be null if this data was somehow lost or corrupted at the source</li>
</ul>
<p>Similarly, different systems might or might not report out these nulls in different ways such as:</p>
<ul>
<li><strong>True nulls</strong>: Literally the entry in the resulting dataset is null</li>
<li><strong>Null-like non-nulls</strong>: Blank values like an empty string (<code>''</code>) that contain a null amount of information but won’t be detected when counting null values</li>
<li><strong>Placeholder values</strong>: Meaningless values like an <code>account_id</code> of <code>00000000</code> for all unidentified accounts which preserve data <em>validity</em> (the expected structure) but have no intrinsic meaning</li>
<li><strong>Sentinel/shadow values</strong>: Abnormal values which attempt to indicate the reasons for null-ness such as an <code>account_id</code> of <code>-1</code> when no browser cookies were found or <code>-2</code> when cookies were found but did not help link to any specific customer record</li>
</ul>
<p>Each of these encoding choices changes the definitions of appropriate completeness and validity for each field and, even more critically, impacts the expectations and assertions we should form for data accuracy. We can’t expect 100% completeness if nulls are a relevant value; we can’t check validity of ranges as easily if sentinel values are used with values that are outside the normal range (hopefully, or we have much bigger problems!) So, understanding how upstream systems <em>should</em> work is essential for assessing if they <em>do</em> work.</p>
</section>
</section>
<section id="data-loading" class="level2">
<h2 class="anchored" data-anchor-id="data-loading">Data Loading</h2>
<p>Checking that data contains expected and <em>only</em> expected records (that is, completeness, uniqueness, and timeliness) is one of the most common first steps in data validation. However, the superficially simple act of loading data into a data warehouse or updating data between tables can introduce a variety of risks to data completeness which require different strategies to detect. Data loading errors can result in data that is stale, missing, duplicate, inconsistently up-to-date across sources, or complete but for only a subset of the range you think.</p>
<p>While the data quality principles of <strong>completeness</strong>, <strong>uniqueness</strong>, and <strong>timeliness</strong> would suggest that records should exist once and only once, the reality of many haphazard data loading process means data may appear sometime between zero and a handful of times. Data loads can occur in many different ways. For example, they might be:</p>
<ul>
<li>manually executed</li>
<li>scheduled (like a <a href="https://en.wikipedia.org/wiki/Cron">cron</a> job)</li>
<li>orchestrated (with a tool like <a href="https://airflow.apache.org/">Airflow</a> or <a href="https://www.prefect.io/">Prefect</a>)</li>
</ul>
<p>No approach is free from challenges. For example, scheduled jobs risk executing before an upstream process has completed (resulting in stale or missing data); poorly orchestrated jobs may be prevented from working due to one missing dependency or might allow multiple stream to get out of sync (resulting in multisource missing data). Regardless of the method, all approaches must be carefully configured to handle failures gracefully to avoid creating duplicates, and the frequency at which they are executed may cause partial loading issues if it is incompatible with the granularity of the source data.</p>
<section id="data-load-failure-modes" class="level3">
<h3 class="anchored" data-anchor-id="data-load-failure-modes">Data Load Failure Modes</h3>
<p>For example, suppose in the diagram below that each row of boxes represents one day of records in a table.</p>
<p><img src="https://emilyriederer.com/post/data-error-gen/data-load.png" class="img-fluid"></p>
<ul>
<li><strong>Stale data</strong> occurs when the data is not as up-to-date as would be expected from is regular refresh cadence. This could happen if a manual step was skipped, a scheduled job was executed before the upstream source was available, or orchestrated data checks found errors and quarantined new records</li>
<li><strong>Missing data</strong> occurs when one data load fails but subsequent loads have succeeded</li>
<li><strong>Duplicate data</strong> occurs when one data load is executed multiple times</li>
<li><strong>Multisource missing data</strong> occurs when a table is loaded from multiple sources, and some have continued to update as expected while others have not</li>
<li><strong>Partial data</strong> occurs when a table is loaded correctly as intended by the producer but contains less data than expected by the consumer (e.g.&nbsp;a table loads ever 12 hours but because there is some data for a given date, the user assumes that all relevant records for that date have been loaded)</li>
</ul>
<p>The differences in these failure modes become important when an analyst attempts to assess data completeness. One of the first approaches an analyst might consider is simply to check the <code>min()</code> and <code>max()</code> event dates in their table. However, this can only help detect stale data. To catch missing data, an analyst might instead attempt to count the number of <code>distinct</code> days represented in the data; to detect duplicate data, that analyst might need to count records by day and examine the pattern.</p>
<table class="table">
<colgroup>
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
</colgroup>
<thead>
<tr class="header">
<th>Metric</th>
<th>Stale</th>
<th>Missing</th>
<th>Duplicate</th>
<th>Multi</th>
<th>Partial</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>min(date)</code><br> <code>max(date)</code></td>
<td><strong>1<br>3</strong></td>
<td>1<br>4</td>
<td>1<br>4</td>
<td>1<br>4</td>
<td>1<br>4</td>
</tr>
<tr class="even">
<td><code>count(distinct date)</code></td>
<td><strong>3</strong></td>
<td><strong>3</strong></td>
<td>4</td>
<td>4</td>
<td>4</td>
</tr>
<tr class="odd">
<td><code>count(1) by date</code></td>
<td><strong>100<br>100<br>100<br>0</strong></td>
<td><strong>100<br>100<br>0<br>100</strong></td>
<td><strong>100<br>100<br>200<br>100</strong></td>
<td>100<br>100<br>66<br>66</td>
<td>100<br>100<br>100<br>50</td>
</tr>
<tr class="even">
<td><code>count(1)</code><br> <code>count(distinct PKs)</code></td>
<td>300<br>300</td>
<td>300<br>300</td>
<td><strong>400<br>300</strong></td>
<td>332<br>332</td>
<td>350<br>350</td>
</tr>
</tbody>
</table>
<p>In a case like the toy example above where the correct number of rows per date is highly predictable and the number of dates is small, such eyeballing is feasible; however when the expected number of records varies day-to-day or time series are long, this approach becomes subjective, error-prone, and intractable. Additionally, it still might be hard to catch errors in mutli-source data or partial loads if the lower number of records was still within the bounds of reasonable deviation for a series. These last two types deserve further exploration.</p>
</section>
<section id="multi-source" class="level3">
<h3 class="anchored" data-anchor-id="multi-source">Multi-Source</h3>
<p>A more effective strategy for assessing data completeness requires a better understanding of how data is being collected and loaded. In the case of multi-source data, one single source stopping loading may not be a big enough change to disrupt aggregate counts but could still jeopardize meaningful analysis. It would be more useful to conduct completeness checks by <em>subgroup</em> to identify these discrepancies.</p>
<p>But not any subgroup will do; the subgroup must correspond to the various data sources. For example, suppose we run an e-commerce store and wish to look at sales from the past month by category. Naturally, we might think to check the completeness of the data by category. But what if sales data is sourced from three separate locations: our Shopify site (80%), our Amazon Storefront (15%), and phone sales (5%). Unless we explicitly check completeness by channel (a dimension we don’t particularly care about for our analysis), it would be easy to miss if our data source for phone sales has stopped working or loads at a different frequency.</p>
<p>Another interesting aspect of multi-source data, is multiple sources can contribute either to different <em>rows/records</em> or different <em>columns/variables</em>. Table-level frequency counts won’t help us in the latter case since other sources might create the right total number of records but result in some specific fields in those records being missing or inaccurate.</p>
</section>
<section id="partial-loads" class="level3">
<h3 class="anchored" data-anchor-id="partial-loads">Partial Loads</h3>
<p>Partial loads really are not data errors at all, but are still important to detect since they can jeopardize an analysis. A common scenario might occur if a job loads new data every 12 hours (say, data from the morning and afternoon of day n-1 loads on day n at 12AM and 12PM, respectively). An analyst retrieving data at 11AM may be concerned to see an approximate ~50% drop in sales in the past day, despite confirming that their data looks to be “complete” since the maximum record date is, in fact, day n-1.<sup>8</sup></p>
</section>
<section id="delayed-or-transient-records" class="level3">
<h3 class="anchored" data-anchor-id="delayed-or-transient-records">Delayed or Transient Records</h3>
<p>The interaction between choices made in the data collection and data loading phases can introduce their own sets of problems.</p>
<p>Consider an <code>orders</code> table for an e-commerce company that analysts may use to track customer orders. It might contain one record per <code>order_id</code> x <code>event</code> (placement, processing, shipment), one record per order placed, one record per order shipping, or one record per order with a <code>status</code> field that changes over time to denote the order’s current stage of life.</p>
<p><img src="https://emilyriederer.com/post/data-error-gen/order-log.png" class="img-fluid"></p>
<p>Any of these modeling choices seem reasonable and the difference between them might appear immaterial. But consider the <em>collection</em> choice to record and report <em>shipped</em> events. Perhaps this might be operationally easier if shipment come from one source system whereas orders could come from many. However, an interesting thing about shipments is that they are often lagged in a variable way from the order date.</p>
<p><img src="https://emilyriederer.com/post/data-error-gen/order-date.png" class="img-fluid"></p>
<p>Suppose the e-commerce company in question offers three shipping speeds at checkout. The chart below shows the range of possible shipment dates based on the order dates for the three different speeds (shown in different bars/colors). How might this effect our perceived data quality?</p>
<ul>
<li>Order data could appear <strong>stale</strong> or not timely since orders with a given <code>order_date</code> would only load days later once shipped</li>
<li>Similar to <strong>missing</strong> or <strong>multisource</strong> data, the data <em>range</em> in the table could lead to deceptive and incomplete data validation because some orders from a later order date might ship (and thus be logged) before all orders from a previous order date</li>
<li>Put another way, we could have multiple order dates demonstrating <strong>partial</strong> data loads</li>
<li>These features of the data might behave inconsistently across time due to seasonality (e.g.&nbsp;no shipping on weekends or federal holidays), so heuristics developed to clean the data based on a small number of observations could fail</li>
<li>From an analytical perspective, orders with faster shipping would be disproportionately overrepresented in the “tail” (most recent) data. If shipping category correlated with other characteristics like total order spend, this could create an artificial trend in the data</li>
</ul>
<p>Once again, understanding that data is <em>collected</em> at point of shipment and reasoning how shipment timing varies and impacts <em>loading</em> is necessary for successful validation.</p>
</section>
</section>
<section id="data-transformation" class="level2">
<h2 class="anchored" data-anchor-id="data-transformation">Data Transformation</h2>
<p>Finally, once the data is roughly where we want it, it likely undergoes many transformations to translate all of the system-generated fields we discussed in data collection into semantically-relevant dimensions for analytical consumers. Of course, the types of transformations that could be done are innumerable with far more variation than data loading. So, we’ll just look at a few examples of common failure patterns.</p>
<section id="pre-aggregation" class="level3">
<h3 class="anchored" data-anchor-id="pre-aggregation">Pre-Aggregation</h3>
<p>Data transformations may include aggregating data up to higher levels of granularity for easier analysis. For example, a transformation might add up item-level purchase data to make it easier for an analyst to look at spend per <em>order</em> of a specific user.</p>
<p>Data transformations not only transform our data, but they also transform how the dimensions of data quality manifest. If data with some of the <strong>completeness</strong> or <strong>uniqueness</strong> issues we discussed with data loading is pre-aggregated, these problems can turn into problems of <strong>accuracy</strong>. For example, the duplicate or partial data loads that we discussed when aggregated could suggest inaccurately high or low quantities respectively.</p>
<p><img src="https://emilyriederer.com/post/data-error-gen/completeness-accuracy.png" class="img-fluid"></p>
</section>
<section id="field-encoding" class="level3">
<h3 class="anchored" data-anchor-id="field-encoding">Field Encoding</h3>
<p>When we assess data consistency across tables,</p>
<p>Categorical fields in a data set might be created in any number of ways including:</p>
<ul>
<li>Directly taken from the source</li>
<li>Coded in a transformation script</li>
<li>Transformed with logic in a shared user-defined function (<a href="https://docs.snowflake.com/en/sql-reference/user-defined-functions.html">UDFs</a>) or <a href="https://docs.getdbt.com/docs/building-a-dbt-project/jinja-macros/#macros">macro</a></li>
<li>Joined from a shared look-up table</li>
</ul>
<p>Each approach has different implications on data consistency and usability.</p>
<p><img src="https://emilyriederer.com/post/data-error-gen/field-encoding.png" class="img-fluid"></p>
<p>Using fields from the source simply is what it is – there’s no subjectivity or room for manual human error. If multiple tables come from the same source, it’s likely but not guaranteed that they will be encoded in the same way.</p>
<p>Coding transformations in the ELT process is easy for data producers. There’s no need to coordinate across multiple processes or use cases, and the transformation can be immediately modified when needed. However, that same lack of coordination can lead to different results for fields that should be the same.</p>
<p>Alternatively, macros, UDFs, and look-up tables provided centralized ways to map source data inputs to desired analytical data outputs in a systemic and consistent way. Of course, centralization has its own challenges. If something in the source data changes, the process of updating a centralized UDF or look-up table may be slowed down by the need to seek consensus and collaborate. So, data is more <em>consistent</em> but potentially less <em>accurate</em>.</p>
<p>Regardless, such engineered values require scrutiny – paticularly if they are being used as a key to join multiple tables – and the distinct values in them should be carefully examined.</p>
</section>
<section id="updating-transformations" class="level3">
<h3 class="anchored" data-anchor-id="updating-transformations">Updating Transformations</h3>
<p>Of course, data consistency is not only a problem across different data sources but within one data source. Regardless of the method of field encoding used in the previous step, the intersection of data loading and data transformation strategies can introduce data consistency errors over time.</p>
<p>Often, for computation efficiency, analytical tables are loaded using an <em>incremental</em> loading strategy. This means that only new records (determined by time period, a set of unique keys, or other criteria) from the upstream source are loaded to the downstream table. This is in contrast to a <em>full refresh</em> where the entire downstream table is recreated on each update.</p>
<p><img src="https://emilyriederer.com/post/data-error-gen/incr-full-good.png" class="img-fluid"></p>
<p>Incremental loads have many advantages. Rebuilding tables in entirety can be very time consuming and computationally expensive. In particular, in non-cloud data warehouses that are not able to scale computing power on demand, this sort of heavy duty processing job can noticeably drain resources from other queries that are trying to run in the database. Additionally, if the upstream staging data is ephemeral, fully rebuilding the table could mean failing to retain history.</p>
<p>However, in the case that our data transformations change, incremental loads may introduce inconsistency in our data overtime as only new records are created and inserted with the new logic.</p>
<p><img src="https://emilyriederer.com/post/data-error-gen/incr-full-bad-col.png" class="img-fluid"></p>
<p>This is also a problem more broadly if some short-term error is discovered either with data loading or transformation in historical data. Incremental strategies may not always update to include the corrected version of the data.</p>
<p><img src="https://emilyriederer.com/post/data-error-gen/incr-full-bad-row.png" class="img-fluid"></p>
<p>Regardless, this underscores the need to validate entire datasets and to re-validate when repulling data.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In statistical modeling, the goal of considering the data generating process is not to understand an encode every single nuance of the complete DGP. After all, if all of that were known, we wouldn’t need a model: we could simulate the universe.</p>
<p>Similarly for data validation, data consumers cannot know everything about the data production DGP without taking over the data production process in its entirety. But understanding some of the key failure modes faced by data producers can support data validation by helping consumers develop more realistic theories and expectations for the ways data may ‘break’ and how to refine strategies for detection them.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Michael Betancourt’s <a href="https://betanalpha.github.io/assets/case_studies/modeling_and_inference.html#1_probabilistic_modeling">tutorial</a> is a lovely example. Thanks to <a href="https://twitter.com/josephlewis1992">Joseph Lewis</a> on Twitter for the reference.↩︎</p></li>
<li id="fn2"><p>The open-source text <a href="https://web.stanford.edu/class/bios221/book/Chap-Mixtures.html"><em>Modern Statistics for Modern Biology</em></a> by Susan Holmes and Wolfgang Huber contains more examples.↩︎</p></li>
<li id="fn3"><p>Of course, strategies for collection, moving, transforming, storing, and validating data are innumerable. This is not intended to be a comprehensive guide on any of these topics but simply to illustrate why its important for analysts to keep in mind the <em>interplay</em> between these steps.↩︎</p></li>
<li id="fn4"><p>I don’t mean to imply statisticians do not regularly think about the data collection DGP! The rich literatures on missing data imputation, censored data in survival analysis, and non-response bias is survey data collection are just a few examples of how carefully statisticians think about how data collection impacts analysis. I chose to break it out here to discuss the more technical aspects of collection↩︎</p></li>
<li id="fn5"><p>Like NYC’s infamously messy <a href="http://web.mta.info/developers/turnstile.html">turnstile data</a>. I don’t claim to know precisely how this dataset is created, but many of the specific challenges it contains are highly relevant.↩︎</p></li>
<li id="fn6"><p>As Angela Bass so aptly <a href="https://medium.com/@angebassa/data-alone-isnt-ground-truth-9e733079dfd4">writes</a>: “Data isn’t ground truth. Data are artifacts of systems.”↩︎</p></li>
<li id="fn7"><p>Of course, this isn’t the only potential type of issue in data collection. While <em>instrumentation</em> often leads to these definitional challenges, other types of data collection like <em>sensors</em> can have other types of challenges like systematically failing to capture certain observations. Consider, for example, bus ridership data collected as riders scan their pass upon entering. If students can ride free by showing the driver their student ID, these observations may be systemically not recorded. Again, relying on an <em>operational</em> system could lead <em>analytics</em> uses astray (like failing to account for peak usage times for this demographic.)↩︎</p></li>
<li id="fn8"><p>Of course, this concern could be somewhat easily allayed if they then checked a timestamp field, but such a field might not exists or might not have been used for validation since its harder to anticipate the appropriate maximum timestamp than it is the maximum date.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>data</category>
  <category>elt</category>
  <guid>https://emilyriederer.com/post/data-error-gen/</guid>
  <pubDate>Thu, 27 May 2021 05:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/data-error-gen/featured.png" medium="image" type="image/png" height="62" width="144"/>
</item>
<item>
  <title>A Tale of Six States: Flexible data extraction with scraping and browser automation</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/states-scraping-automation/</link>
  <description><![CDATA[ 




<p>Like many Americans, last fall I was captivated by <a href="https://twitter.com/ElectProject">Professor Michael McDonald</a>’s <a href="http://www.electproject.org/">US Elections Project</a> and, in particular, his daily reporting of <a href="https://electproject.github.io/Early-Vote-2020G/">early vote totals</a> across all 50 states. Not only did this reporting provide fuel for anxious speculation and satiate an innate desire for reading the tea leaves, but it was also a quite a feat in data management.</p>
<p>In many discussions of <a href="https://a16z.com/2020/10/15/the-emerging-architectures-for-modern-data-infrastructure/">modern data management</a>, the extract-load-transform (ELT) process is offered as a solution to data silos. However, these tools largely focus on abstracting away the different REST APIs of common sources (e.g.&nbsp;Salesforce, Google Analytics, Facebook Ads) and destinations (e.g.&nbsp;BigQuery, Redshift, Snowflake). At the same time, many data science resources introduce static web page scraping as a tool in one’s toolkit but discuss less scraping websites rendered with client side JavaScript (as quite a bit of the internet is) or navigating arbitrary applications with browser automation.</p>
<p>For more “creative”, persay, sources, we need to build our own solutions. And this is particularly true when we’re attempting to access, standardize, and analyze 50 separate data sets published at different cadences, provided with different levels of granularity, partitioned along different dimensions, controlled by different levels of access and permission, and embedded in systems with vastly different underlying architecture. (Oh, and in Dr.&nbsp;McDonald’s case, with a good number of Twitter users starting to tweet at you if you haven’t refreshed your website by 8:02AM!)</p>
<p>To give an example of some of the diverse data sources used in the Elections Project:</p>
<ul>
<li><a href="https://elections.il.gov/VotingAndRegistrationSystems/PreElectionCounts.aspx?MID=l0hlXuSrKL0%3d&amp;T=637317257975604269">IL</a>, <a href="https://elections.wi.gov/index.php/publications/statistics/absentee">WI</a>, and <a href="https://dl.ncsbe.gov/?prefix=ENRS/2020_11_03/">NC</a> provide direct <code>csv</code> downloads with predictable URLs which contain all data to-date</li>
<li><a href="http://services.sos.wv.gov/Elections/AbsenteeBallotStats">WV</a> and <a href="https://www.elections.alaska.gov/doc/info/statstable.php">AK</a> display data in static tables rendere by server-side PHP</li>
<li><a href="https://www.vpap.org/elections/early-voting/">VA</a> shows its data in a dashboard rendered by client-side JavaScript (which may superficially sound like the last bullet but has different implications for the types of scraping tools that could lend a hand<sup>1</sup>)</li>
<li><a href="https://elections.sos.ga.gov/Elections/voterabsenteefile.do">GA</a> and <a href="https://earlyvoting.texas-election.com/Elections/getElectionEVDates.do">TX</a> offer downloadable data which requires navigating through a Java serverlet UI<sup>2</sup> to access</li>
<li><a href="https://app.powerbigov.us/view?r=eyJrIjoiMGEwN2E0MzUtOTA0OC00ZDA3LThjMTItZDZhYTBjYjU5ZjhjIiwidCI6IjJkMGYxZGI2LWRkNTktNDc3Mi04NjVmLTE5MTQxNzVkMDdjMiJ9">RI</a> publishes data in a PowerBI dashboard</li>
<li>AL, AZ, MI, IA, and PA were among those that didn’t publish data publicly and required Professor McDonald to directly contact their Secretary of State offices</li>
</ul>
<p>The disparities in these data publishing formats and access patterns seemed like an interesting opportunity to compare different tools for data extraction. This posts starts out with a few trivial examples of using <code>requests</code> for HTTP requests and <code>BeautifulSoup</code> for static web scraping in order to understand the strengths and limitations for each tool and the unmet needs that browser automation helps address. We’ll then switch over to <code>Playwright</code> (with a touch of <code>pytesseract</code>) for a sampling of the types of challenges that browser automation can tackle.</p>
<ul>
<li>NC: Direct Download with <code>urllib.request</code></li>
<li>WI: Direct Download with a Dynamic URL</li>
<li>AK: Web scraping with <code>BeautifulSoup</code></li>
<li>VA: Web scraping with <code>Playwright</code></li>
<li>TX: Browser automation with <code>Playwright</code></li>
<li>RI: Arbitrary UIs with OCR</li>
</ul>
<section id="nc-direct-download" class="level2">
<h2 class="anchored" data-anchor-id="nc-direct-download">NC: Direct Download</h2>
<p><img src="https://emilyriederer.com/post/states-scraping-automation/nc.PNG" class="img-fluid"></p>
<p>North Carolina provides one of the simplest paths to accessing paths to downloading its data. Data files live in a public S3 bucket with static file names based on the election date. Granular voter-level data can be downloaded easily with the <code>urllib.request</code> library.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> urllib.request</span>
<span id="cb1-2"></span>
<span id="cb1-3">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://s3.amazonaws.com/dl.ncsbe.gov/ENRS/2020_11_03/absentee_counts_county_20201103.csv'</span></span>
<span id="cb1-4">urllib.request.urlretrieve(url, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nc.csv'</span>)</span></code></pre></div>
</div>
</section>
<section id="wi-direct-download-with-dynamic-url" class="level2">
<h2 class="anchored" data-anchor-id="wi-direct-download-with-dynamic-url">WI: Direct Download with Dynamic URL</h2>
<p><img src="https://emilyriederer.com/post/states-scraping-automation/wi.PNG" class="img-fluid"></p>
<p>Wisconsin has similarly accessible data files available for download. However, when they update files during an election cycle, each new file is named by publishing date. So, unlike North Carolina, the URL of interest varies and it’s not altogether obvious what the most current one is.</p>
<p>We can still use <code>requests</code> to download this data, but it requires more caution in constructing the URL. The <code>retrieve_date()</code> function requires an ISO 8601 date to be passed in and attempts to construct a URL from it. Our <code>GET</code> request returns a status code of 500 if no such path exists, at which point we can throw an exception. Some calling program could decrement the date and try again.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> retrieve_date(date): </span>
<span id="cb2-5"></span>
<span id="cb2-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># format dates as needed</span></span>
<span id="cb2-7">  dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.datetime.strptime(date, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb2-8">  yyyy_mm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dt.strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Y-%m'</span>)</span>
<span id="cb2-9">  mm_d_yyyy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dt.strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%#d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-%Y'</span>)</span>
<span id="cb2-10">  </span>
<span id="cb2-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># download csv</span></span>
<span id="cb2-12">  url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'https://elections.wi.gov/sites/elections.wi.gov/files/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>yyyy_mm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/AbsenteeCounts_County%20</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mm_d_yyyy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.csv'</span></span>
<span id="cb2-13">  req <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(url)</span>
<span id="cb2-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> req.status_code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>:</span>
<span id="cb2-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Resource not found'</span>)</span>
<span id="cb2-16">  content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> req.content</span>
<span id="cb2-17">  </span>
<span id="cb2-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># write to file</span></span>
<span id="cb2-19">  csv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'wi.csv'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'wb'</span>)</span>
<span id="cb2-20">  csv.write(content)</span>
<span id="cb2-21">  csv.close()</span></code></pre></div>
</div>
</section>
<section id="ak-web-scraping-with-beautifulsoup" class="level2">
<h2 class="anchored" data-anchor-id="ak-web-scraping-with-beautifulsoup">AK: Web Scraping with <code>BeautifulSoup</code></h2>
<p><img src="https://emilyriederer.com/post/states-scraping-automation/ak.PNG" class="img-fluid"></p>
<p>Instead of provided a direct download, Arkansas publishes data to its election website by rendering a static HTML table with server-side PHP. As with before, we can retrieve this content with <code>requests</code>, but now we need to parse the output ourselves. Specifically, we want to iterate over table rows such as this:</p>
<pre><code>&lt;tr&gt;
  &lt;td&gt;Online Delivery&lt;/td&gt;
  &lt;td&gt;16,446&lt;/td&gt;
  &lt;td&gt;12,026&lt;/td&gt;
&lt;/tr&gt;</code></pre>
<p>For this, we can use <code>BeautifulSoup</code> to iterate through the table and save the results to a CSV file with <code>pandas</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bs4 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BeautifulSoup</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb4-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb4-5"></span>
<span id="cb4-6">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://www.elections.alaska.gov/doc/info/statstable.php"</span></span>
<span id="cb4-7">html_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(url).text</span>
<span id="cb4-8">soup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BeautifulSoup(html_content, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lxml"</span>)</span>
<span id="cb4-9">table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"table"</span>, attrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lctbl"</span>})</span>
<span id="cb4-10"></span>
<span id="cb4-11">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-12">rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> table.tbody.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tr"</span>)</span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate over rows excluding first (header) and last (total)</span></span>
<span id="cb4-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> r <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(rows) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>): </span>
<span id="cb4-16"></span>
<span id="cb4-17">  row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rows[r]</span>
<span id="cb4-18">  vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [d.get_text() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> d <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> row.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"td"</span>)]</span>
<span id="cb4-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert count columns to numeric</span></span>
<span id="cb4-20">  vals[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(vals[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>))</span>
<span id="cb4-21">  vals[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(vals[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>))</span>
<span id="cb4-22">    </span>
<span id="cb4-23">  data.append(vals)</span>
<span id="cb4-24">  </span>
<span id="cb4-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># save resulting data</span></span>
<span id="cb4-26">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(data, columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'channel'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n_issued'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n_returned'</span>])</span>
<span id="cb4-27">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dt_updated'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dt_fmt</span>
<span id="cb4-28">df.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ak.csv'</span>, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="va-web-scraping-with-playwright" class="level2">
<h2 class="anchored" data-anchor-id="va-web-scraping-with-playwright">VA: Web Scraping with <code>Playwright</code></h2>
<p><img src="https://emilyriederer.com/post/states-scraping-automation/va.PNG" class="img-fluid"></p>
<p>Virginia seems superficially similar to Arkansas insomuch as data is provided in an in-browser display. However, since this display is constructed with browser-side JavaScript, it won’t appear in the content that results from a call to <code>requests.get()</code>.</p>
<p>Many different approaches exist to force JavaScript to update the DOM before accessing the source<sup>3</sup>. Arguably Microsoft’s <code>Playwright</code> is overly complicated for this situation, but I use it for this example since it is a flexible tool for browser automation, and the next three examples help demonstrate the variety of features it offers.</p>
<p>The following script navigates to Virginia’s website with a headless Firefox browser and then extracts vote counts stored as attributes in the bar chart tooltip. Each bar is create with script like this:</p>
<pre><code>&lt;rect x="95.333" y="101" width="7.333" height="104" 
      data-toggle="popever" data-placement="top" title 
      data-content="In-Person: 140&lt;br /&gt;Mail: 94&lt;br /&gt;Total: 234" 
      data-original-title="Sep 30"&gt;
&lt;/rect&gt;</code></pre>
<p>As before, results are then coerced into a <code>pandas</code> dataframe and written to a <code>csv</code>.</p>
<p>The following script defines a <code>retrieve_county()</code> function to parse out this information for a single county.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> playwright.sync_api <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sync_playwright</span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb6-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span>
<span id="cb6-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> retrieve_county(county, page):</span>
<span id="cb6-7"></span>
<span id="cb6-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># navigate to county-specific page</span></span>
<span id="cb6-9">  county_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> county.lower().replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span>)</span>
<span id="cb6-10">  page.goto(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'https://www.vpap.org/elections/early-voting/year-2020/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>county_url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-va'</span>)</span>
<span id="cb6-11">  </span>
<span id="cb6-12">  county_records <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-13">  </span>
<span id="cb6-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>):</span>
<span id="cb6-15">  </span>
<span id="cb6-16">    selector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'#timeline g.popovers rect:nth-of-type(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span></span>
<span id="cb6-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb6-18">      date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> page.get_attribute(selector, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data-original-title'</span>)</span>
<span id="cb6-19">      vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> page.get_attribute(selector, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data-content'</span>)</span>
<span id="cb6-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span>:</span>
<span id="cb6-21">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb6-22"></span>
<span id="cb6-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># process data into tabular structure</span></span>
<span id="cb6-24">    vals_method <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.search(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'In-Person: (\d+)&lt;br /&gt;Mail: (\d+)&lt;br /&gt;Total: (\d+)'</span>, vals.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>))</span>
<span id="cb6-25">    date_parse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.datetime.strptime(date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' 2020'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%b </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> %Y'</span>).strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb6-26">    county_records.append([county, date_parse, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'In-Person'</span>, vals_method.group(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)])</span>
<span id="cb6-27">    county_records.append([county, date_parse, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mail'</span>, vals_method.group(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)])</span>
<span id="cb6-28">    </span>
<span id="cb6-29">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> county_records</span></code></pre></div>
</div>
<p>As a low fidelity but transparent example of it in operation, I show it looping over a few counties. In reality, we’d add more exception handling or save interim results separately so failures in any one county did not take down the whole process.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> sync_playwright() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> p:</span>
<span id="cb7-2"></span>
<span id="cb7-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set up</span></span>
<span id="cb7-4">  browser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p.firefox.launch()</span>
<span id="cb7-5">  context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> browser.new_context(accept_downloads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb7-6">  page <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context.new_page()</span>
<span id="cb7-7">  </span>
<span id="cb7-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate over counties</span></span>
<span id="cb7-9">  county <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Accomack County'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Albemarle County'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Alexandria City'</span>]</span>
<span id="cb7-10">  records <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> county:</span>
<span id="cb7-12">    records <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> retrieve_county(c, page)</span>
<span id="cb7-13">  </span>
<span id="cb7-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># save resulting data</span></span>
<span id="cb7-15">  df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(records, columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'county'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'channel'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n'</span>])</span>
<span id="cb7-16">  df.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'va.csv'</span>, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb7-17"></span>
<span id="cb7-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cleanup</span></span>
<span id="cb7-19">  page.close()</span>
<span id="cb7-20">  context.close()</span>
<span id="cb7-21">  browser.close()</span></code></pre></div>
</div>
<p>This creates the following data structure:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 x 4
  county          date       channel       n
  &lt;chr&gt;           &lt;date&gt;     &lt;chr&gt;     &lt;dbl&gt;
1 Accomack County 2020-09-17 In-Person     0
2 Accomack County 2020-09-17 Mail          0
3 Accomack County 2020-09-18 In-Person   212
4 Accomack County 2020-09-18 Mail          0
5 Accomack County 2020-09-19 In-Person     0
6 Accomack County 2020-09-19 Mail          0</code></pre>
</div>
</div>
</section>
<section id="tx-browser-automation-with-playwright" class="level2">
<h2 class="anchored" data-anchor-id="tx-browser-automation-with-playwright">TX: Browser Automation with <code>Playwright</code></h2>
<p><img src="https://emilyriederer.com/post/states-scraping-automation/tx.gif" class="img-fluid"></p>
<p>Next up, we come to Texas. Texas, somewhat paradoxically, generously provides rich data (by day, by voting method, by county, and even <em>by person</em>) and yet does so in a way that is particularly tedious to access. Navigating to the data download requires selecting an election and then a voting date out of a UI before clicking a button in a Java serverlet<sup>4</sup> that triggers the creation and downloading of a report as shown above.</p>
<p>This is where <code>Playwright</code> really shines. As with Virginia, it loads the Texas’ data in a headless<sup>5</sup> browser. But beyond just opening a browser, <code>Playwright</code> can interact with it in the same way as a user: selecting options from menus, clicking buttons, and more.</p>
<p>In the <code>retrieve_date()</code> function below, I tell my browser exactly what I want it to do: go to the website, pick an election, click submit, pick a date, click submit, and then finally click a button to download data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> playwright.sync_api <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sync_playwright</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> retrieve_date(date, page):</span>
<span id="cb9-5"></span>
<span id="cb9-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># navigate to date-specific page </span></span>
<span id="cb9-7">  target_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.datetime.strptime(date, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Y%m</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb9-8">  target_date_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> target_date.strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 00:00:00.0'</span>)</span>
<span id="cb9-9">  target_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tx-'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> target_date.strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Y%m</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.csv'</span></span>
<span id="cb9-10">  </span>
<span id="cb9-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pick election</span></span>
<span id="cb9-12">  page.goto(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://earlyvoting.texas-election.com/Elections/getElectionDetails.do'</span>)</span>
<span id="cb9-13">  page.select_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#idElection'</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2020 NOVEMBER 3RD GENERAL ELECTION"</span>)</span>
<span id="cb9-14">  page.click(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#electionsInfoForm button'</span>)</span>
<span id="cb9-15">  page.wait_for_selector(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#selectedDate'</span>)</span>
<span id="cb9-16">  </span>
<span id="cb9-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pick day</span></span>
<span id="cb9-18">  page.select_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#selectedDate'</span>, value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> target_date_str)</span>
<span id="cb9-19">  page.click(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#electionsInfoForm button:nth-child(2)'</span>)</span>
<span id="cb9-20">  page.wait_for_selector(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"Generate Statewide Report"'</span>)</span>
<span id="cb9-21"></span>
<span id="cb9-22">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># download report  </span></span>
<span id="cb9-23">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> page.expect_download() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> download_info:</span>
<span id="cb9-24">    page.click(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"Generate Statewide Report"'</span>)</span>
<span id="cb9-25">  download <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> download_info.value</span>
<span id="cb9-26">  download.save_as(target_file)</span></code></pre></div>
</div>
<p>This function could then be called for one or more dates of interest:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> sync_playwright() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> p:</span>
<span id="cb10-2"></span>
<span id="cb10-3">  browser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p.firefox.launch()</span>
<span id="cb10-4">  context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> browser.new_context(accept_downloads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-5">  page <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context.new_page()</span>
<span id="cb10-6">  </span>
<span id="cb10-7">  dates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'20201020'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'20201021'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'20201022'</span>]</span>
<span id="cb10-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> d <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dates:</span>
<span id="cb10-9">    retrieve_date(d, page)</span>
<span id="cb10-10"></span>
<span id="cb10-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cleanup</span></span>
<span id="cb10-12">  page.close()</span>
<span id="cb10-13">  context.close()</span>
<span id="cb10-14">  browser.close()</span></code></pre></div>
</div>
</section>
<section id="ri-arbitrary-uis-with-ocr" class="level2">
<h2 class="anchored" data-anchor-id="ri-arbitrary-uis-with-ocr">RI: Arbitrary UIs with OCR</h2>
<p><img src="https://emilyriederer.com/post/states-scraping-automation/ri.png" class="img-fluid"></p>
<p>The ability to navigate around a UI starts to blend the capabilities of <code>Playwright</code>’s <em>browser automation</em> with the more full-fledged concept of robotic process automation (RPA). RPA tools can similarly navigate arbitrary non-browser-based UIs to perform manual tasks with great speed. Abritrary UIs lack many of the features we’ve been using so far such as Xpaths and CSS IDs and classes to tell our tools where to do what. Instead, their often have built-in optical character recognition (OCR) to recognize buttons or input boxes “on sight”.</p>
<p><code>Playwright</code> doesn’t quite have these capabilities built in natively, but it does offer users the ability to screenshot their browser. This allows us to pass the screenshot to <code>pytesseract</code> for OCR in a similar manner.</p>
<p>This techniques comes in handy for Rhode Island whose data is hosted in an embedded PowerBI app. The following script navigates to and screenshots the app, converts the resulting image to text, extracts the total vote count, and writes the results to PDFs.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cv2</span>
<span id="cb11-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pytesseract</span>
<span id="cb11-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> playwright.sync_api <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sync_playwright</span>
<span id="cb11-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb11-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span>
<span id="cb11-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb11-7">pytesseract.pytesseract.tesseract_cmd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Program Files</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Tesseract-OCR</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">tesseract.exe'</span></span>
<span id="cb11-8"></span>
<span id="cb11-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> sync_playwright() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> p:</span>
<span id="cb11-10"></span>
<span id="cb11-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set up</span></span>
<span id="cb11-12">  browser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p.firefox.launch()</span>
<span id="cb11-13">  context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> browser.new_context(accept_downloads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb11-14">  page <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> context.new_page()</span>
<span id="cb11-15">  page.goto(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://app.powerbigov.us/view?r=eyJrIjoiMGEwN2E0MzUtOTA0OC00ZDA3LThjMTItZDZhYTBjYjU5ZjhjIiwidCI6IjJkMGYxZGI2LWRkNTktNDc3Mi04NjVmLTE5MTQxNzVkMDdjMiJ9'</span>)</span>
<span id="cb11-16">  page.wait_for_load_state(state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'networkidle'</span>)</span>
<span id="cb11-17">  time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb11-18">  page.screenshot(path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ri.png'</span>)</span>
<span id="cb11-19">  </span>
<span id="cb11-20">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cleanup</span></span>
<span id="cb11-21">  page.close()</span>
<span id="cb11-22">  context.close()</span>
<span id="cb11-23">  browser.close()</span>
<span id="cb11-24"></span>
<span id="cb11-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># extract text</span></span>
<span id="cb11-26">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv2.imread(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ri.png'</span>)</span>
<span id="cb11-27">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pytesseract.image_to_string(img)</span>
<span id="cb11-28">n_tot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.search(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Turnout</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">(\d+)'</span>, text.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)).group(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-29">n_mail <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.search(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mail Ballots Received by BOE</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">(\d+)'</span>, text.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)).group(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-30"></span>
<span id="cb11-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># write output</span></span>
<span id="cb11-32">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame([[n_tot, n_mail]], columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n_tot'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n_mail'</span>])</span>
<span id="cb11-33">df.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ri.csv'</span>, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
<p>This creates the following data structure:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 x 2
   n_tot n_mail
   &lt;dbl&gt;  &lt;dbl&gt;
1 305724 156178</code></pre>
</div>
</div>
</section>
<section id="what-next" class="level2">
<h2 class="anchored" data-anchor-id="what-next">What Next?</h2>
<p>Simply <em>accessing</em> data is only the first in many steps towards unifying and analyzing it. The full scope of the US Elections Project requires far more numerous and challenging steps including:</p>
<ul>
<li>Understanding the exact schema and variables of each data set</li>
<li>Understanding when historical data may be modified or corrected and adjusting accordingly</li>
<li>Accounting for sudden changes to reporting formats, cadences, or locations</li>
<li>Obtaining data from states where the <code>robots.txt</code> prevents scraping (I’m looking at you, IL)</li>
<li>Building relationships with Secretary of States’ offices where data is not publicly available</li>
</ul>
<p>Regardless, surveying what different states choose to publish and how they choose to share it provides an interesting opportunity to think about data access, usability, and available technologies for data retrieval.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Traditional tools like python’s <code>BeautifulSoup</code> or R’s <code>rvest</code> don’t play nicely with dynamic websites where client-side JavaScript is modifying the DOM↩︎</p></li>
<li id="fn2"><p>Or so <a href="https://stackoverflow.com/questions/3597582/why-do-java-webapps-use-do-extension-where-did-it-come-from">this StackExchange</a> would suggest based on the <code>.do</code> extension↩︎</p></li>
<li id="fn3"><p>Selenium and PhantomJS are popular related tools↩︎</p></li>
<li id="fn4"><p>The significance of this is that this button is not like clicking a link with a specific web URL.↩︎</p></li>
<li id="fn5"><p>Headless basically just means the browser doesn’t physically open on our computer so we don’t see it. Time and compute resources aren’t wasted on “painting” the browser to show us what is happening. However, if you enjoy watching your computer work in a “Look Mom, no hands!” sort of way, you can use the <code>headless = False</code> option when launching the browser.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>data</category>
  <category>elt</category>
  <category>python</category>
  <guid>https://emilyriederer.com/post/states-scraping-automation/</guid>
  <pubDate>Sat, 08 May 2021 05:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/states-scraping-automation/featured.png" medium="image" type="image/png" height="97" width="144"/>
</item>
<item>
  <title>Column Names as Contracts</title>
  <link>https://emilyriederer.com/talk/col-names-contract/</link>
  <description><![CDATA[ 



<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Quick Links</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Abstract</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">Slides</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-4" aria-controls="tabset-1-4" aria-selected="false">Video</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<p><span><i class="bi bi-file-bar-graph"></i> <a href="slides.pdf">Slides</a> </span><br>
<span><i class="bi bi-play"></i> <a href="https://www.youtube.com/watch?v=BknQ0ZNkMNY">Video</a> </span><br>
<span><i class="bi bi-pencil"></i> <a href="../../post/column-name-contracts/">Post - Column Names as Contracts</a> </span></p>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<p>Complex software systems make performance guarantees through documentation and unit tests, and they communicate these to users with conscientious interface design. However, published data tables exist in a gray area; they are static enough not to be considered a “service” or “software”, yet too raw to earn attentive user interface design. This ambiguity creates a disconnect between data producers and consumers and poses a risk for analytical correctness and reproducibility.</p>
<p>In this talk, I will explain how controlled vocabularies can be used to form contracts between data producers and data consumers. Explicitly embedding meaning in each component of variable names is a low-tech and low-friction approach which builds a shared understanding of how each field in the dataset is intended to work.</p>
<p>Doing so can offload the burden of data producers by facilitating automated data validation and metadata management. At the same time, data consumers benefit by a reduction in the cognitive load to remember names, a deeper understanding of variable encoding, and opportunities to more efficiently analyze the resulting dataset.</p>
<p>After discussing the theory of controlled vocabulary column-naming and related workflows, I illustrate how to implement these ideas at various stages in the data management lifecycle, either with the R package <code>convo</code> or with the SQL-based tool <code>dbt</code>.</p>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<div id="slides" style="width:100%; aspect-ratio:16/11;">
<embed src="slides.pdf#zoom=Fit" width="100%" height="100%">
</div>
</div>
<div id="tabset-1-4" class="tab-pane" aria-labelledby="tabset-1-4-tab">
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/BknQ0ZNkMNY" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
</div>
</div>
</div>



 ]]></description>
  <category>data</category>
  <guid>https://emilyriederer.com/talk/col-names-contract/</guid>
  <pubDate>Fri, 26 Feb 2021 06:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/talk/col-names-contract/featured.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Embedding column-name contracts in data pipelines with dbt</title>
  <dc:creator>Emily Riederer</dc:creator>
  <link>https://emilyriederer.com/post/convo-dbt/</link>
  <description><![CDATA[ 




<p><img src="https://emilyriederer.com/post/convo-dbt/featured.png" class="img-fluid" alt="Data model DAG autogenerated by dbt"> In my post <a href="../../post/column-name-contracts/">Column Names as Contracts</a>, I explore how using controlled vocabularies to name fields in a data table can create performance contracts between data producers and data consumers<sup>1</sup>. In short, I argue that field names can encode metadata<sup>2</sup> and illustrate with R and python how these names can be used to improve data documentation, wrangling, and validation.</p>
<p>However, demonstrations with R and python are biased towards the needs of data consumers. These popular data analysis tools provide handy, high-level interfaces for programmatically operating on columns. For example, <code>dplyr</code>’s <a href="https://tidyselect.r-lib.org/reference/select_helpers.html">select helpers</a> make it easy to quickly manipulate all columns whose names match given patterns. For example, suppose I know that all variables beginning with <code>IND_</code> are binary and non-null so I may sum them to get a count or average them to get a valid proportion. I can succinctly write:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize_at</span>(my_data,</span>
<span id="cb1-2">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IND"</span>)),</span>
<span id="cb1-3">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.funs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(sum, mean))</span></code></pre></div>
</div>
<p>In contrast, SQL remains a mainstay for data producers – both for use in traditional relational databases and SQL interfaces for modern large-scale data processing engines like Spark. As a <em>very</em> high-level and declarative language, SQL variants generally don’t offer a control flow (e.g.&nbsp;for loops, if statements) or programmatic control which would allow for column operations that are similar to the one shown above. That is, one might have to manually write:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> </span>
<span id="cb2-2">  mean(ind_a), </span>
<span id="cb2-3">  mean(ind_b), </span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(ind_a), </span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(ind_b)</span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> my_data</span></code></pre></div>
</div>
<p>But that is tedious, static (would not automatically adapt to the addition of more indicator variables), and error-prone (easy to miss or mistype a variable).</p>
<p>Although SQL itself is relatively inflexible, recent tools have added a layer of “programmability” on top of SQL which affords far more flexibility and customization. In this post, I’ll demonstrate how one such tool, <code>dbt</code>, can help data producers consistently apply controlled vocabularies when defining, manipulating, and testing tables for analytical users.</p>
<p><em>(In fact, after writing this post, I’ve also begun experimenting with a <a href="https://github.com/emilyriederer/dbt_dplyr">dbt package, <code>dbt_dplyr</code></a> that brings <code>dplyr</code>’s select-helper semantics to SQL.)</em></p>
<section id="a-brief-intro-to-dbt" class="level2">
<h2 class="anchored" data-anchor-id="a-brief-intro-to-dbt">A brief intro to <code>dbt</code></h2>
<p><code>dbt</code> (<a href="https://www.getdbt.com/">Data Build Tool</a>) “applies the principles of software engineering to analytics code”. Specifically, it encourages data producers to write modular, atomic SQL <code>SELECT</code> statements in separate files (as opposed to the use of CTEs or subqueries) from which dbt derives a DAG and orchestrates the execution on your database of choice<sup>3</sup>. Further, it enables the ability to write more programmatic (with control flow) SQL <em>templates</em> with <code>Jinja2</code> which <code>dbt</code> compiles to standard SQL files before executing.</p>
<p>For the purposes of implementing a controlled vocabulary, key advantages of this approach include:</p>
<ul>
<li>Templating with <code>if</code> statements and <code>for</code> loops</li>
<li>Dynamic insertion of local variables<sup>4</sup></li>
<li>Automated testing of each modular SQL unit</li>
<li>Code sharing with tests and macros exportable in a package framework</li>
</ul>
<p>Additional slick (but tangential for this post) <code>dbt</code> features include:</p>
<ul>
<li>The ability to switch between dev and production schemas</li>
<li>Easy toggling between views, tables, and inserts for the same base logic</li>
<li>Automatic generation of a static website documenting data lineage, metadata, and test results (the featured image above is a screenshot from the created website)</li>
<li>Orchestration of SQL statements in the DAG</li>
<li>Hooks for rote database management tasks like adding indices and keys or granting access</li>
</ul>
<p>For a general overview to <code>dbt</code>, check out the <a href="https://docs.getdbt.com/tutorial/setting-up">introductory tutorial</a> on their website, the <a href="https://www.getdbt.com/coalesce/agenda/dbt-101-eu-and-us-friendly">dbt101 presentation</a> from their recent Coalesce conference<sup>5</sup>, or the interview with one of their founders on the <a href="https://open.spotify.com/episode/1gKKgR8eZgdqdXztFGGkFe">Data Engineering Today</a> podcast.</p>
<p>In this post, I’ll demonstrate how three features of <code>dbt</code> can support the use of controlled vocabulary column naming by:</p>
<ul>
<li>Creating variable names that adhere to conventions with Jinja templating</li>
<li>Operating on subgroups of columns created by custom macros to enforce contracts</li>
<li>Validating subgroups of columns to ensure adherence to contracts with custom tests</li>
</ul>
</section>
<section id="scenario-covid-forecast-model-monitoring" class="level2">
<h2 class="anchored" data-anchor-id="scenario-covid-forecast-model-monitoring">Scenario: COVID Forecast Model Monitoring</h2>
<p>The full example code for this project is available <a href="http://github.com/emilyriederer/dbt-convo-covid">on GitHub</a>.</p>
<p>To illustrate these concepts, imagine we are tasked with monitoring the performance of a county-level COVID forecasting model using data similar to datasets available through <a href="https://cloud.google.com/blog/products/data-analytics/publicly-available-covid-19-data-for-analytics">Google BigQuery public dataset program</a>. We might want to continually log forecasted versus actual observations to ask questions like:</p>
<ul>
<li>Does the forecast perform well?</li>
<li>How far in advance does the forecast become reliable?</li>
<li>How does performance vary across counties?</li>
<li>Is the performance acceptable in particularly sensitive counties, such as those with known health professional shortages?</li>
</ul>
<p>Before we go further, a few caveats:</p>
<ul>
<li>I am not a COVID expert nor do I pretend to be. This is not a post about how one should monitor a COVID model. This is just an understandable, hypothetical example with data in a publicly available database<sup>6</sup></li>
<li>I do not attempt to demonstrate the best way to evaluate a forecasting model or a holistic approach to model monitoring. Again, this is just a hypothetical motivation to illustrate <em>data management</em> techniques</li>
<li>This may seem like significant over-engineering for the problem at hand. Once again, this is just an example</li>
</ul>
<p>Now, back to work.</p>
<section id="controlled-vocabulary" class="level3">
<h3 class="anchored" data-anchor-id="controlled-vocabulary">Controlled Vocabulary</h3>
<p>To operationalize this analytical goal, we might start out by defining our controlled vocabulary with relevant concepts and contracts.</p>
<p><strong>Units of measurement</strong>:</p>
<ul>
<li><code>ID</code>: Unique identifier of entity with no other semantic meaning
<ul>
<li>Non-null</li>
</ul></li>
<li><code>N</code>: Count
<ul>
<li>Integer</li>
<li>Non-null</li>
</ul></li>
<li><code>DT</code>: Date
<ul>
<li>Date format</li>
</ul></li>
<li><code>IND</code>: Binary indicator
<ul>
<li>Values of 0 or 1</li>
<li>Non-null</li>
</ul></li>
<li><code>PROP</code>: Proportion
<ul>
<li>Numeric</li>
<li>Bounded between 0 and 1</li>
</ul></li>
<li><code>PCT</code>: Percent
<ul>
<li>Numeric</li>
<li>Unlike <code>PROP</code>, <em>not</em> bounded (e.g.&nbsp;think “percent error”)</li>
</ul></li>
<li><code>CD</code>: System-generated character
<ul>
<li>Non-null</li>
</ul></li>
<li><code>NM</code>: Human-readable name</li>
</ul>
<p><strong>Units of observation</strong>:</p>
<ul>
<li><code>COUNTY</code>: US County</li>
<li><code>STATE</code>: US State</li>
<li><code>CASE</code>: Realized case (in practice, we would give this a more specific definition. What defines a case? What sort of confirmation is required? Is the event recorded on the date or realization or the date of reporting?)</li>
<li><code>HOSP</code>: Realized hospitalization (same note as above)</li>
<li><code>DEATH</code>: Realized death (same note as above)</li>
</ul>
<p><strong>Descriptors</strong>:</p>
<ul>
<li><code>ACTL</code>: Actual observed value</li>
<li><code>PRED</code>: Predicted value</li>
<li><code>HPSA</code>: Health Professional Shortage Area (county-level measure)</li>
</ul>
</section>
<section id="data-sources-and-flow" class="level3">
<h3 class="anchored" data-anchor-id="data-sources-and-flow">Data Sources and Flow</h3>
<p>Our goal is to end up with a <code>model_monitor</code> table with one record per <code>observation date</code> and <code>county</code> (same as the <code>actual</code> table). Using the grammar above, we may define the variables we intend to include in our final table:</p>
<ul>
<li><code>CD_(COUNTY|STATE)</code>: Unique county/state identifier (from Census Bureau FIPS codes)</li>
<li><code>NM_(COUNTY|STATE)</code>: Human-readable county/state names-</li>
<li><code>DT_COUNTY</code>: The date a county’s values are observed</li>
<li><code>N_(CASE|HOSP|DEATH)_(ACTL|PRED)_(07|14|21|28)</code>: The actual or predicted number of cases, hospitalizations, or deaths (and, for predictions only, the value of these predictions at 7, 14, 21, and 28 days prior to the day being forecasted)</li>
<li><code>IND_COUNTY_HPSA</code>: Indicator of whether county is considered a shortage area</li>
<li><code>PROP_COUNTY_HPSA</code>: Proportion of population that is underserved in a designated shortage area</li>
</ul>
<p>We will source these fields from four tables:</p>
<ul>
<li><code>actual</code> table
<ul>
<li>sourced from <code>bigquery-public-data</code>.<code>covid19_jhu_csse</code>.<code>summary</code></li>
<li>one record per <code>observation date</code> x <code>county</code></li>
<li>fields for county code, observation date, realized number of cases and deaths</li>
</ul></li>
<li><code>prediction</code> table
<ul>
<li>sourced from <code>bigquery-public-data</code>.<code>covid19_public_forecasts</code>.<code>county_28d_historical</code></li>
<li>one record per <code>date prediction was made</code> x <code>data being predicted</code> x <code>county</code> (initially)</li>
<li>fields for county code, observation date, prediction date, predicted number of cases and deaths</li>
<li>we transform to one record per <code>observation date</code> x <code>county</code> with observations at different time lags represented as separate fields</li>
</ul></li>
<li><code>hpsa</code> table
<ul>
<li>sourced from <code>bigquery-public-data</code>.<code>sdoh_hrsa_shortage_areas</code>.<code>hpsa_primary_care</code></li>
<li>(after some wrangling on our end) one record per <code>county</code> for counties identified as having a shortage</li>
<li>fields for the county code, date of designation, proportion of county under-served</li>
</ul></li>
<li><code>fips</code> table<sup>7</sup>
<ul>
<li>sourced from <code>bigquery-public-data</code>.<code>census_utility</code>.<code>fips_codes_all</code></li>
<li>(after some wrangling) one record per <code>county</code> for each county in the 50 US states</li>
<li>fields for FIPS code (Census Bureau county identifiers), state name, county name</li>
</ul></li>
</ul>
<p>For a conceptual mental map, once all the wrangling and cleaning is done for each of the tables above, we might have psuedocode for the final table that looks something like this.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> </span>
<span id="cb3-3">  actual </span>
<span id="cb3-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">left</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">join</span></span>
<span id="cb3-5">  predictions <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> (cd_county, dt_county)</span>
<span id="cb3-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">left</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">join</span></span>
<span id="cb3-7">  hpsa <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> (cd_county)</span>
<span id="cb3-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">left</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">join</span></span>
<span id="cb3-9">  fips <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> (cd_county)</span></code></pre></div>
</div>
<p>But as we’re about to see, <code>dbt</code> allows us to get a bit more complex and elegant.</p>
</section>
</section>
<section id="variable-creation-with-jinja-templating" class="level2">
<h2 class="anchored" data-anchor-id="variable-creation-with-jinja-templating">Variable Creation with Jinja Templating</h2>
<p><code>dbt</code> makes it easy to create typo-free variable names that adhere to our controlled vocabulary by using the Jinja templating language.<sup>8</sup> Jinja brings traditional control-flow elements like conditional statements and loops to make SQL more programmatic. When <code>dbt</code> is executed with <code>dbt run</code>, it first renders this Jinja to standard SQL before sending the query to the database.</p>
<p>Templates, and specifically loops, help write more concise and proof-readable SQL code when deriving a large number of variables with similar logic. For example, below we collapse the raw prediction data (which is represented as one record for <code>each county</code> x <code>each day being prediction</code> x <code>each day a prediction was made</code>) to one record for each county and each day being predicted with different columns containing the numeric value of each prediction of cases, hospitalizations, and deaths at <code>lags</code> (defined in the <code>dbt_project.yml</code> configuration file) of 7, 14, 21, and 28 days prior to the date being predicted.</p>
<p>Ordinarily, deriving these 12 variables (3 measures x 4 lags) would pose significant room for typos in either the code or the variable names, but in this script, the Jinja template of <code>n_case_pred_{{l}}</code> ensures consistency.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb4-1">{{</span>
<span id="cb4-2">    config(</span>
<span id="cb4-3">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">materialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'incremental'</span>,</span>
<span id="cb4-4">        unique_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span></span>
<span id="cb4-5">    )</span>
<span id="cb4-6">}}</span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb4-9">  county_fips_code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> forecast_date <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb4-10">  county_fips_code <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> cd_county,</span>
<span id="cb4-11">  forecast_date <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> dt_county,</span>
<span id="cb4-12">  {% <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> var(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lags'</span>) %}</span>
<span id="cb4-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {{l}}, </span>
<span id="cb4-14">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>new_confirmed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_case_pred_{{l}},</span>
<span id="cb4-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {{l}}, </span>
<span id="cb4-16">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>hospitalized_patients, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_hosp_pred_{{l}},</span>
<span id="cb4-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {{l}}, </span>
<span id="cb4-18">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>new_deaths, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_death_pred_{{l}}</span>
<span id="cb4-19">  {% <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">loop</span>.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">last</span> %},{% endif %}</span>
<span id="cb4-20">  {% endfor %}</span>
<span id="cb4-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> {{ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">source</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bqpred'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred'</span>) }}</span>
<span id="cb4-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span> </span>
<span id="cb4-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cast</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">left</span>(county_fips_code, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> int64) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">between</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span></span>
<span id="cb4-24">  forecast_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">current_date</span>()</span>
<span id="cb4-25">  {% <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_incremental() %}</span>
<span id="cb4-26">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> forecast_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> (</span>
<span id="cb4-27">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> dateadd(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(dt_county)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> {{this}}</span>
<span id="cb4-28">  )</span>
<span id="cb4-29">  {% endif %}</span>
<span id="cb4-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">group</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">by</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div>
</div>
<p>This script renders to the following:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb5-2">  county_fips_code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> forecast_date <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb5-3">  county_fips_code <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> cd_county,</span>
<span id="cb5-4">  forecast_date <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> dt_county,</span>
<span id="cb5-5">  </span>
<span id="cb5-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">07</span>, </span>
<span id="cb5-7">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>new_confirmed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_case_pred_07,</span>
<span id="cb5-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">07</span>, </span>
<span id="cb5-9">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>hospitalized_patients, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_hosp_pred_07,</span>
<span id="cb5-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">07</span>, </span>
<span id="cb5-11">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>new_deaths, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_death_pred_07</span>
<span id="cb5-12">  ,</span>
<span id="cb5-13">  </span>
<span id="cb5-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, </span>
<span id="cb5-15">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>new_confirmed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_case_pred_14,</span>
<span id="cb5-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, </span>
<span id="cb5-17">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>hospitalized_patients, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_hosp_pred_14,</span>
<span id="cb5-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, </span>
<span id="cb5-19">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>new_deaths, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_death_pred_14</span>
<span id="cb5-20">  ,</span>
<span id="cb5-21">  </span>
<span id="cb5-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, </span>
<span id="cb5-23">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>new_confirmed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_case_pred_21,</span>
<span id="cb5-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, </span>
<span id="cb5-25">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>hospitalized_patients, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_hosp_pred_21,</span>
<span id="cb5-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, </span>
<span id="cb5-27">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>new_deaths, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_death_pred_21</span>
<span id="cb5-28">  ,</span>
<span id="cb5-29">  </span>
<span id="cb5-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, </span>
<span id="cb5-31">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>new_confirmed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_case_pred_28,</span>
<span id="cb5-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, </span>
<span id="cb5-33">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>hospitalized_patients, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_hosp_pred_28,</span>
<span id="cb5-34">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(date_diff(prediction_date, forecast_date, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, </span>
<span id="cb5-35">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>new_deaths, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> n_death_pred_28</span>
<span id="cb5-36">  </span>
<span id="cb5-37">  </span>
<span id="cb5-38"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> `bigquery<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>data`.`covid19_public_forecasts`.`county_28d_historical`</span>
<span id="cb5-39"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span> </span>
<span id="cb5-40">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cast</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">left</span>(county_fips_code, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> int64) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">between</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span></span>
<span id="cb5-41">  forecast_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">current_date</span>()</span>
<span id="cb5-42">  </span>
<span id="cb5-43"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">group</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">by</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div>
</div>
<p>This script and the other three that derive our base tables (<code>actual</code>, <code>prediction</code>, <code>fips</code>, and <code>hpsa</code>) can be found in <a href="https://github.com/emilyriederer/dbt-convo-covid/tree/main/models">the <code>models</code> directory</a> of the repo. After they are individually created, they are combined into the <code>model_monitor_staging</code> table in the relatively uninteresting <a href="https://github.com/emilyriederer/dbt-convo-covid/blob/main/models/model_monitor_staging.sql">script</a>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb6-1">{{</span>
<span id="cb6-2">    config(</span>
<span id="cb6-3">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">materialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'incremental'</span>,</span>
<span id="cb6-4">        unique_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span></span>
<span id="cb6-5">    )</span>
<span id="cb6-6">}}</span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb6-9">  actual.<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>,</span>
<span id="cb6-10">  prediction.<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> (cd_county, dt_county, <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">id</span>),</span>
<span id="cb6-11">  fips.<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> (cd_county),</span>
<span id="cb6-12">  hspa.<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> (cd_county)</span>
<span id="cb6-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span></span>
<span id="cb6-14">  {{ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'actual'</span>) }} <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> actual</span>
<span id="cb6-15">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">inner</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">join</span></span>
<span id="cb6-16">  {{ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prediction'</span>) }} <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> prediction</span>
<span id="cb6-17">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> (dt_county, cd_county)</span>
<span id="cb6-18">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">left</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">join</span></span>
<span id="cb6-19">  {{ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fips'</span>) }} <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> fips</span>
<span id="cb6-20">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> (cd_county)</span>
<span id="cb6-21">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">left</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">join</span></span>
<span id="cb6-22">  {{ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hpsa'</span>) }} <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> hspa</span>
<span id="cb6-23">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> (cd_county)</span>
<span id="cb6-24">{% <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_incremental() %}</span>
<span id="cb6-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span> dt_county <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> (</span>
<span id="cb6-26">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> dateadd(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(dt_county)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> {{this}}</span>
<span id="cb6-27">  )</span>
<span id="cb6-28">{% endif %}</span></code></pre></div>
</div>
</section>
<section id="variable-manipulation-with-regex-macros" class="level2">
<h2 class="anchored" data-anchor-id="variable-manipulation-with-regex-macros">Variable Manipulation with Regex Macros</h2>
<p>Of course, it’s not enough to adhere to controlled vocabulary <em>naming</em>. If the actual <em>contracts</em> implied in those names are not upheld, the process is meaningless (or, worse, dangerous). When preparing our final table, we want to explicitly enforce as many of the vocabulary’s promises to be met as possible. This means, for example, ensuring all variables prefixed with <code>n</code> are really integers, <code>dt</code> are truly dates (and not just similarly formatted strings), and <code>ind</code> variables are actually never-null.</p>
<p>This time, we again use Jinja templating along with another dbt feature: custom macros. The final script in our pipeline (<a href="https://github.com/emilyriederer/dbt-convo-covid/blob/main/models/model_monitor.sql"><code>model_monitor</code></a>) uses custom macros <code>get_column_names()</code> to determine all of the column names in the staging table and <code>get_matches()</code> to subset this list for variable names which match regular expressions corresponding to different prefixes.</p>
<p>Then, we iterate over each of these lists to apply certain treatments to each set of columns such as casting <code>cols_n</code> and <code>cols_dt</code> variables to <code>int64</code> and <code>date</code> respectively, rounding <code>cols_prop</code> variables to three decimal places, and coalescing <code>cols_ind</code> variables to be 0 if null.<sup>9</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb7-1">{{</span>
<span id="cb7-2">    config(</span>
<span id="cb7-3">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">materialized</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'incremental'</span>,</span>
<span id="cb7-4">        unique_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>,</span>
<span id="cb7-5">        partition_by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb7-6">          <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"field"</span>: <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"dt_county"</span>,</span>
<span id="cb7-7">          <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"data_type"</span>: <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"date"</span>,</span>
<span id="cb7-8">          <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"granularity"</span>: <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"month"</span></span>
<span id="cb7-9">        }</span>
<span id="cb7-10">    )</span>
<span id="cb7-11">}}</span>
<span id="cb7-12"></span>
<span id="cb7-13">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_column_names( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_monitor_staging'</span>) ) %}</span>
<span id="cb7-14">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> cols_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_matches(cols, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^n_.*'</span>) %}</span>
<span id="cb7-15">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> cols_dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_matches(cols, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^dt_.*'</span>) %}</span>
<span id="cb7-16">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> cols_prop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_matches(cols, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^prop_.*'</span>) %}</span>
<span id="cb7-17">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> cols_ind <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_matches(cols, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^ind_.*'</span>) %}</span>
<span id="cb7-18">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> cols_oth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cols</span>
<span id="cb7-19">   | reject(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, cols_n)</span>
<span id="cb7-20">   | reject(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, cols_dt)</span>
<span id="cb7-21">   | reject(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, cols_prop)</span>
<span id="cb7-22">   | reject(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, cols_ind) %}</span>
<span id="cb7-23"></span>
<span id="cb7-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb7-25">    </span>
<span id="cb7-26">   {%<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cols_oth %}</span>
<span id="cb7-27">   {{c}},</span>
<span id="cb7-28">   {% endfor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>%}</span>
<span id="cb7-29">   {%<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cols_n %} </span>
<span id="cb7-30">     <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cast</span>({{c}} <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> int64) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> {{c}}, </span>
<span id="cb7-31">   {% endfor %}</span>
<span id="cb7-32">   {%<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cols_dt %} </span>
<span id="cb7-33">     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">date</span>({{c}}) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> {{c}}, </span>
<span id="cb7-34">   {% endfor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>%}</span>
<span id="cb7-35">   {%<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cols_prop %} </span>
<span id="cb7-36">     <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>({{c}}, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> {{c}}, </span>
<span id="cb7-37">   {% endfor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>%}</span>
<span id="cb7-38">   {%<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cols_ind %} </span>
<span id="cb7-39">     <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coalesce</span>({{c}}, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> {{c}} </span>
<span id="cb7-40">     {% <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">loop</span>.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">last</span> %},{% endif %} </span>
<span id="cb7-41">   {% endfor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>%}</span>
<span id="cb7-42">   </span>
<span id="cb7-43"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> {{ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_monitor_staging'</span>) }}</span>
<span id="cb7-44"></span>
<span id="cb7-45">{% <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_incremental() %}</span>
<span id="cb7-46"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span> dt_county <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> (</span>
<span id="cb7-47">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> dateadd(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">day</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(dt_county)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> {{this}}</span>
<span id="cb7-48">  )</span>
<span id="cb7-49">{% endif %}</span></code></pre></div>
</div>
<p>Note how abstract this query template is. In fact, it completely avoids referencing specific variables in our table.<sup>10</sup> If we should decide to go back and add more fields (for example, actual and predicted recoveries) into our upstream models, they will receive the correct post-processing and validation as long as they are named appropriately.</p>
<p>For a peak under the hood, here’s how those two macros work.</p>
<p>First, <code>get_column_names()</code> simply queries the databases’ built in <a href="https://en.wikipedia.org/wiki/Information_schema"><code>INFORMATION_SCHEMA</code></a><sup>11</sup> to collect all column names of a given table. In the case of the <code>model_monitor.sql</code> script, the table provided is the staging table (<code>model_monitor_staging</code>) which was made in the previous step.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb8-1">{% macro get_column_names(relation) %}</span>
<span id="cb8-2"></span>
<span id="cb8-3">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> relation_query %}</span>
<span id="cb8-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> column_name</span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> {{relation.<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">database</span>}}.{{relation.<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">schema</span>}}.INFORMATION_SCHEMA.<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">COLUMNS</span></span>
<span id="cb8-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHERE</span> table_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{{relation.identifier}}'</span>;</span>
<span id="cb8-7">{% endset %}</span>
<span id="cb8-8"></span>
<span id="cb8-9">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_query(relation_query) %}</span>
<span id="cb8-10"></span>
<span id="cb8-11">{% <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">execute</span> %}</span>
<span id="cb8-12">{# <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">Return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">the</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">first</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">column</span> #}</span>
<span id="cb8-13">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> results_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results.<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">columns</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">values</span>() %}</span>
<span id="cb8-14">{% <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> %}</span>
<span id="cb8-15">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> results_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [] %}</span>
<span id="cb8-16">{% endif %}</span>
<span id="cb8-17"></span>
<span id="cb8-18">{{ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(results_list) }}</span>
<span id="cb8-19"></span>
<span id="cb8-20">{% endmacro %}</span></code></pre></div>
</div>
<p>Next, the <code>get_matches()</code> macro simply iterates through a list of characters (such as the column names obtained in the previous step) and appends only those that match our regex to the final list that is returned.<sup>12</sup> <sup>13</sup> (Thanks to <a href="https://twitter.com/dsmd4vid">David Sanchez</a> on the <code>dbt</code> Slack community for helping me figure out how to call the <code>re</code> library from within Jinja.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb9-1">{% macro get_matches(input_list, regex) %}</span>
<span id="cb9-2"></span>
<span id="cb9-3">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> results_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [] %}</span>
<span id="cb9-4">{% <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> input_list %}</span>
<span id="cb9-5">    {% <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> modules.re.match(regex, l, modules.re.IGNORECASE) %}</span>
<span id="cb9-6">        {{ results_list.append(l) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">""</span> }}</span>
<span id="cb9-7">    {% endif %}</span>
<span id="cb9-8">{% endfor %}</span>
<span id="cb9-9"></span>
<span id="cb9-10">{{ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(results_list) }}</span>
<span id="cb9-11"></span>
<span id="cb9-12">{% endmacro %}</span></code></pre></div>
</div>
<p>These macros live in the <a href="https://github.com/emilyriederer/dbt-convo-covid/tree/main/macros"><code>macros/</code> directory</a> of the repository.</p>
</section>
<section id="data-validation-with-custom-tests" class="level2">
<h2 class="anchored" data-anchor-id="data-validation-with-custom-tests">Data Validation with Custom Tests</h2>
<p>Of course, not every contract can be made by force without risk of corrupting data. For any that we cannot enforce in their creation, we must rigorously test.</p>
<p><code>dbt</code>’s testing framework allows for testing any data model in the project – not just the final table. This is very useful to intercept errors as soon as they happen instead of trying to backtrack from bad output many steps later. Some tests are built-in but others can be custom written as SQL <code>SELECT</code> statements.</p>
<p>Built-in tests for properties of individual columns include <code>unique</code>, <code>not_null</code>, and <code>relationship</code><sup>14</sup>. These can be implemented in the <code>schema.yml</code> configuration file under the <code>tests</code> key-value pair for each relevant column, and can sometimes be shared across models with the YAML <code>&amp;</code> and <code>*</code> (as shown below with the same <code>basetest</code> checks being applied to the <code>actual</code> and <code>prediction</code> data models) which allows for naming and repeating blocks (think copy-paste). However, even with a relatively small number of tests and columns, its cumbersome and easy to overlook a column.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sources</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bqhspa</span></span>
<span id="cb10-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">description</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> HRSA designated shortage areas</span></span>
<span id="cb10-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">database</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bigquery-public-data</span></span>
<span id="cb10-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">schema</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> sdoh_hrsa_shortage_areas</span></span>
<span id="cb10-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tables</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> hpsa</span></span>
<span id="cb10-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> hpsa_primary_care</span></span>
<span id="cb10-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bqcensus</span></span>
<span id="cb10-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">    description</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb10-13">      Census Bureau mapping of FIPS codes to county and state names</span>
<span id="cb10-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">database</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bigquery-public-data</span></span>
<span id="cb10-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">schema</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> census_utility</span></span>
<span id="cb10-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tables</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> fips</span></span>
<span id="cb10-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> fips_codes_all</span></span>
<span id="cb10-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bqjhu</span></span>
<span id="cb10-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">    description</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb10-21">      Daily COVID case and death statistics by county </span>
<span id="cb10-22">      from the Johns Hopkins University CSSE</span>
<span id="cb10-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">database</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bigquery-public-data</span></span>
<span id="cb10-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">schema</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> covid19_jhu_csse</span></span>
<span id="cb10-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tables</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actual</span></span>
<span id="cb10-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> summary    </span></span>
<span id="cb10-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bqpred</span></span>
<span id="cb10-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">description</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Forecasted case and death statistics</span></span>
<span id="cb10-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">database</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bigquery-public-data</span></span>
<span id="cb10-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">schema</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> covid19_public_forecasts</span></span>
<span id="cb10-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tables</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-33"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pred</span></span>
<span id="cb10-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> county_28d_historical   </span></span>
<span id="cb10-35"></span>
<span id="cb10-36"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">models</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-37"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actual</span></span>
<span id="cb10-38"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">    description</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb10-39">      Actual COVID cases and deaths by county</span>
<span id="cb10-40"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">columns</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;basetest</span></span>
<span id="cb10-41"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> id</span></span>
<span id="cb10-42"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tests</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-43"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> unique</span></span>
<span id="cb10-44"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> not_null</span></span>
<span id="cb10-45"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cd_county</span></span>
<span id="cb10-46"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tests</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-47"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">relationships</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-48"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">to</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ref('fips')</span></span>
<span id="cb10-49"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">field</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cd_county</span></span>
<span id="cb10-50"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> prediction</span></span>
<span id="cb10-51"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">    description</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb10-52">      Predicted COVID cases and deaths by county</span>
<span id="cb10-53"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">columns</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">*basetest</span></span>
<span id="cb10-54"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> hpsa</span></span>
<span id="cb10-55"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">    description</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb10-56">      Counties designated as healthcare shortage areas</span>
<span id="cb10-57"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">columns</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-58"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cd_county</span></span>
<span id="cb10-59"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tests</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-60"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> unique</span></span>
<span id="cb10-61"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> not_null</span></span>
<span id="cb10-62"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">relationships</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-63"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">to</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ref('fips')</span></span>
<span id="cb10-64"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">field</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cd_county</span></span>
<span id="cb10-65"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> fips</span></span>
<span id="cb10-66"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">    description</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb10-67">      Mapping of county and state names from FIPS codes</span>
<span id="cb10-68"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">columns</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-69"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> cd_county</span></span>
<span id="cb10-70"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tests</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-71"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> unique</span></span>
<span id="cb10-72"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> not_null </span></span>
<span id="cb10-73"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> model_monitor_staging</span></span>
<span id="cb10-74"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">    description</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb10-75">      Staging table to combine different data sources</span>
<span id="cb10-76"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> model_monitor</span></span>
<span id="cb10-77"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">    description</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb10-78">      Final model monitoring table with one row per county x observed day</span>
<span id="cb10-79"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">columns</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-80"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> id</span></span>
<span id="cb10-81"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-82"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> unique</span></span>
<span id="cb10-83"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> not_null</span></span>
<span id="cb10-84"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ind_county_hpsa</span></span>
<span id="cb10-85"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tests</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-86"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> not_null</span></span>
<span id="cb10-87"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accepted_values</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-88"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">values</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span></span>
<span id="cb10-89"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quote</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span></span>
<span id="cb10-90"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> prop_county_hpsa</span></span>
<span id="cb10-91"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tests</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-92"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbt_utils.not_null_where</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-93"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ind_county_hpsa = 1"</span></span></code></pre></div>
</div>
<p>Instead, developers may also define custom tests as SQL <code>SELECT</code> statements which returns only records that fail the test. Like data models, tests may also use Jinja and macros. This allows us to abstract some of our data validation tests to target all variables with a specific naming convention (and, thus, performance contract) at any arbitrary point in the pipeline.</p>
<p>For example, in the <code>model_monitor</code> data model shown in the last section, we explicitly cast all variables that start with <code>n</code> to be integers. However, before we do this, we should probably ensure that these fields are truly “integer-like”; otherwise, if we are casting values that have unexpected fractional components, we are simply masking inaccurate data.</p>
<p>The following test checks whether the <code>n</code> variables in the <code>model_monitor_staging</code> table (before casting) are sufficiently “integer like”. It first retrieves all fields in this tables, next subsets all field names only to those with <code>n</code> prefixes, and finally uses Jinja to create a SQL script with separate <code>WHERE</code> conditions to check if the absolute difference between each <code>n</code> variable and its value after being cast to an integer is ever greater than 0.01 (which would imply a violation.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb11-1">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_column_names( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_monitor_staging'</span>) ) %}</span>
<span id="cb11-2">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> cols_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_matches(cols, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^n_.*'</span>) %}</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>   </span>
<span id="cb11-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> {{ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_monitor_staging'</span>) }}</span>
<span id="cb11-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span></span>
<span id="cb11-7">   {%<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cols_n %} <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>({{c}} <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cast</span>({{c}} <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> int64)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> </span>
<span id="cb11-8">   {% endfor %}</span>
<span id="cb11-9">   <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FALSE</span></span></code></pre></div>
</div>
<p>We can apply the same trick to testing more conditions on the final table. For example, the following test checks whether every <code>prop</code> variable is truly bounded between 0 and 1 (by returning any times where this is <em>not</em> the case.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb12-1">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_column_names( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_monitor'</span>) ) %}</span>
<span id="cb12-2">{% <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">set</span> cols_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_matches(cols, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^prop_.*'</span>) %}</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>   </span>
<span id="cb12-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> {{ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_monitor'</span>) }}</span>
<span id="cb12-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span></span>
<span id="cb12-7">   {%<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cols_n %} ({{c}} <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> {{c}} <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> </span>
<span id="cb12-8">   {% endfor %}</span>
<span id="cb12-9">   <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb12-10">   </span></code></pre></div>
</div>
<p>Finally, we may also use tests to ensure our naming conventions are upheld. The following script once again calls the <code>INFORMATION_SCHEMA</code> table (as did our <code>get_column_names()</code> macro) to obtain a table with one record for each column name in the final table. It next uses the <code>regexp_extract()</code> SQL function with capturing groups to create separate columns (<code>l1</code>, <code>l2</code>, <code>l3</code>) for each underscore-delimited section of the naming. Finally, the <code>WHERE</code> conditions filter the output for any stubs that do not match the convention.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> cols <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> (</span>
<span id="cb13-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> </span>
<span id="cb13-3">  column_name, </span>
<span id="cb13-4">  regexp_extract(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lower</span>(column_name), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^[a-z]+'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> l1,</span>
<span id="cb13-5">  regexp_extract(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lower</span>(column_name), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^[a-z]+_([a-z]+)'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> l2,</span>
<span id="cb13-6">  regexp_extract(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lower</span>(column_name), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^[a-z]+_[a-z]+_([a-z]+)'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> l3</span>
<span id="cb13-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> </span>
<span id="cb13-8">  {{ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_monitor'</span>).<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">database</span> }}.</span>
<span id="cb13-9">    {{ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_monitor'</span>).<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">schema</span> }}.</span>
<span id="cb13-10">      INFORMATION_SCHEMA.<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">COLUMNS</span></span>
<span id="cb13-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span> table_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{{ ref('</span>model_monitor<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">').identifier }}'</span></span>
<span id="cb13-12">)</span>
<span id="cb13-13"></span>
<span id="cb13-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb13-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> cols </span>
<span id="cb13-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span> </span>
<span id="cb13-17">  l1 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cd'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nm'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prop'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pct'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dt'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ind'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> </span>
<span id="cb13-18">  l2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'county'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'case'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hosp'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'death'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> </span>
<span id="cb13-19">  l3 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hpsa'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pred'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'actl'</span>)</span></code></pre></div>
</div>
<p>We could further extend the script above and impose a <em>hierarchy</em> on our controlled vocabulary by adding additional conditions to the <code>WHERE</code> clause. For example, since the <code>HPSA</code> stub only makes sense as a suffix to <code>COUNTY</code> (e.g.&nbsp;there’s no such thing as a health professional shortage area <em>case</em> or <em>death</em>), we could add the additional condition <code>or (l3 = 'hpsa' and not l2 = 'county')</code>.</p>
<p>Similarly, we can query the <code>INFORMATION_SCHEMA</code> to validate that each column has its implied data type.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> cols_type <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> (</span>
<span id="cb14-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">distinct</span> </span>
<span id="cb14-3">  regexp_extract(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lower</span>(column_name), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^[a-z]+'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> stub,</span>
<span id="cb14-4">  data_type</span>
<span id="cb14-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> </span>
<span id="cb14-6">  {{ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_monitor'</span>).<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">database</span> }}.</span>
<span id="cb14-7">    {{ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_monitor'</span>).<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">schema</span> }}.</span>
<span id="cb14-8">      INFORMATION_SCHEMA.<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">COLUMNS</span></span>
<span id="cb14-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span> table_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{{ ref('</span>model_monitor<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">').identifier }}'</span></span>
<span id="cb14-10">)</span>
<span id="cb14-11"></span>
<span id="cb14-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> </span>
<span id="cb14-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> cols_type</span>
<span id="cb14-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">where</span> </span>
<span id="cb14-15">    (stub <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cd'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nm'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> data_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'STRING'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> </span>
<span id="cb14-16">    (stub <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ind'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> data_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'INT64'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> </span>
<span id="cb14-17">    (stub <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prop'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pct'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> data_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FLOAT64'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span></span>
<span id="cb14-18">    (stub <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dt'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> data_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DATE'</span>)</span></code></pre></div>
</div>
<p>As with our <code>model_monitor.sql</code> data model, the beauty of these tests is that they have abstracted away the column names themselves. So, they will continue to test all of the correct pieces of intent regardless of whether columns are added or removed from the table. Like macros, these could also be put into a package so that the same tests could be applied to all tables in a database.</p>
<p>The code for these tests, and a few more similar examples, are located in the <a href="https://github.com/emilyriederer/dbt-convo-covid/tree/main/tests"><code>tests/</code> directory</a> of the repository. They can be run on the command line with the <code>dbt test</code> command.</p>
</section>
<section id="sample-output" class="level2">
<h2 class="anchored" data-anchor-id="sample-output">Sample Output</h2>
<p>To conclude, I show a few top rows of output from the final model monitoring table:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> </span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> dbt_emily.model_monitor</span>
<span id="cb15-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">limit</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<table class="table table-sm table-striped small">
<colgroup>
<col style="width: 3%">
<col style="width: 3%">
<col style="width: 6%">
<col style="width: 2%">
<col style="width: 4%">
<col style="width: 2%">
<col style="width: 3%">
<col style="width: 3%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 5%">
<col style="width: 4%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">cd_county</th>
<th style="text-align: left;">dt_county</th>
<th style="text-align: left;">id</th>
<th style="text-align: left;">cd_state</th>
<th style="text-align: left;">nm_county</th>
<th style="text-align: left;">nm_state</th>
<th style="text-align: right;">n_case_actl</th>
<th style="text-align: right;">n_death_actl</th>
<th style="text-align: right;">n_case_pred_07</th>
<th style="text-align: right;">n_hosp_pred_07</th>
<th style="text-align: right;">n_death_pred_07</th>
<th style="text-align: right;">n_case_pred_14</th>
<th style="text-align: right;">n_hosp_pred_14</th>
<th style="text-align: right;">n_death_pred_14</th>
<th style="text-align: right;">n_case_pred_21</th>
<th style="text-align: right;">n_hosp_pred_21</th>
<th style="text-align: right;">n_death_pred_21</th>
<th style="text-align: right;">n_case_pred_28</th>
<th style="text-align: right;">n_hosp_pred_28</th>
<th style="text-align: right;">n_death_pred_28</th>
<th style="text-align: left;">dt_county_hpsa</th>
<th style="text-align: left;">prop_county_hpsa</th>
<th style="text-align: right;">ind_county_hpsa</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">01001</td>
<td style="text-align: left;">2021-08-15</td>
<td style="text-align: left;">2021-08-15 01:00:01</td>
<td style="text-align: left;">01</td>
<td style="text-align: left;">Autauga County</td>
<td style="text-align: left;">Alabama</td>
<td style="text-align: right;">8025</td>
<td style="text-align: right;">114</td>
<td style="text-align: right;">1900</td>
<td style="text-align: right;">1355</td>
<td style="text-align: right;">8</td>
<td style="text-align: right;">1634</td>
<td style="text-align: right;">1537</td>
<td style="text-align: right;">9</td>
<td style="text-align: right;">1426</td>
<td style="text-align: right;">1561</td>
<td style="text-align: right;">9</td>
<td style="text-align: right;">1260</td>
<td style="text-align: right;">1492</td>
<td style="text-align: right;">8</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">01001</td>
<td style="text-align: left;">2021-01-02</td>
<td style="text-align: left;">2021-01-02 01:00:01</td>
<td style="text-align: left;">01</td>
<td style="text-align: left;">Autauga County</td>
<td style="text-align: left;">Alabama</td>
<td style="text-align: right;">4268</td>
<td style="text-align: right;">50</td>
<td style="text-align: right;">2323</td>
<td style="text-align: right;">2215</td>
<td style="text-align: right;">29</td>
<td style="text-align: right;">1768</td>
<td style="text-align: right;">1942</td>
<td style="text-align: right;">26</td>
<td style="text-align: right;">1434</td>
<td style="text-align: right;">1625</td>
<td style="text-align: right;">22</td>
<td style="text-align: right;">1214</td>
<td style="text-align: right;">1333</td>
<td style="text-align: right;">18</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">01001</td>
<td style="text-align: left;">2021-06-07</td>
<td style="text-align: left;">2021-06-07 01:00:01</td>
<td style="text-align: left;">01</td>
<td style="text-align: left;">Autauga County</td>
<td style="text-align: left;">Alabama</td>
<td style="text-align: right;">7206</td>
<td style="text-align: right;">113</td>
<td style="text-align: right;">758</td>
<td style="text-align: right;">514</td>
<td style="text-align: right;">14</td>
<td style="text-align: right;">483</td>
<td style="text-align: right;">466</td>
<td style="text-align: right;">13</td>
<td style="text-align: right;">308</td>
<td style="text-align: right;">425</td>
<td style="text-align: right;">12</td>
<td style="text-align: right;">196</td>
<td style="text-align: right;">385</td>
<td style="text-align: right;">10</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">01001</td>
<td style="text-align: left;">2020-11-24</td>
<td style="text-align: left;">2020-11-24 01:00:01</td>
<td style="text-align: left;">01</td>
<td style="text-align: left;">Autauga County</td>
<td style="text-align: left;">Alabama</td>
<td style="text-align: right;">2661</td>
<td style="text-align: right;">39</td>
<td style="text-align: right;">2668</td>
<td style="text-align: right;">1253</td>
<td style="text-align: right;">14</td>
<td style="text-align: right;">2939</td>
<td style="text-align: right;">1375</td>
<td style="text-align: right;">15</td>
<td style="text-align: right;">3200</td>
<td style="text-align: right;">1510</td>
<td style="text-align: right;">17</td>
<td style="text-align: right;">3461</td>
<td style="text-align: right;">1652</td>
<td style="text-align: right;">18</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">01001</td>
<td style="text-align: left;">2021-08-22</td>
<td style="text-align: left;">2021-08-22 01:00:01</td>
<td style="text-align: left;">01</td>
<td style="text-align: left;">Autauga County</td>
<td style="text-align: left;">Alabama</td>
<td style="text-align: right;">8311</td>
<td style="text-align: right;">115</td>
<td style="text-align: right;">1833</td>
<td style="text-align: right;">2429</td>
<td style="text-align: right;">13</td>
<td style="text-align: right;">1680</td>
<td style="text-align: right;">2740</td>
<td style="text-align: right;">14</td>
<td style="text-align: right;">1561</td>
<td style="text-align: right;">2871</td>
<td style="text-align: right;">14</td>
<td style="text-align: right;">1461</td>
<td style="text-align: right;">2877</td>
<td style="text-align: right;">14</td>
<td style="text-align: left;">NA</td>
<td style="text-align: left;">NA</td>
<td style="text-align: right;">0</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="bonus---analysis-prep-with-jinja-templates" class="level2">
<h2 class="anchored" data-anchor-id="bonus---analysis-prep-with-jinja-templates">Bonus - Analysis Prep with Jinja Templates</h2>
<p>Although this post primarily focuses on uses of <code>dbt</code> to help data producers apply controlled vocabularies, dbt also provides an interesting framework for transitioning projects to data consumers with the use of their <a href="https://docs.getdbt.com/docs/building-a-dbt-project/analyses">Analyses</a> feature. Analyses are additional SQL script templates that are not sent to the database to produce tables or views.Instead, running <code>dbt compile</code> simply renders these scripts for use in analyses or BI tools.</p>
<p>For example of an “analysis”, and as another example of templating in action, the following script uses our published table to compute the percent difference between actual observations and each prediction.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb16-2"></span>
<span id="cb16-3">  {%<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> var(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lags'</span>) %}</span>
<span id="cb16-4">    {%<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> m <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'case'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'death'</span>] %}</span>
<span id="cb16-5">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> </span>
<span id="cb16-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">when</span> n_{{m}}_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> </span>
<span id="cb16-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>( (n_{{m}}_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n_{{m}}_pred_{{l}}) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_{{m}}_actl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb16-8">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> pctdiff_{{m}}_pred_{{l}} ,  </span>
<span id="cb16-9">    {% endfor %}</span>
<span id="cb16-10">  {% endfor %}</span>
<span id="cb16-11">  </span>
<span id="cb16-12">  mm.<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb16-13">  </span>
<span id="cb16-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> {{ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_monitor'</span>) }} <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> mm</span></code></pre></div>
</div>
<p>It compiles to:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span></span>
<span id="cb17-2">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> </span>
<span id="cb17-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">when</span> n_case_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> </span>
<span id="cb17-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>( (n_case_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n_case_pred_07) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_case_actl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb17-5">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> pctdiff_case_pred_07 ,  </span>
<span id="cb17-6">    </span>
<span id="cb17-7">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> </span>
<span id="cb17-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">when</span> n_death_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> </span>
<span id="cb17-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>( (n_death_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n_death_pred_07) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_death_actl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb17-10">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> pctdiff_death_pred_07 ,  </span>
<span id="cb17-11">    </span>
<span id="cb17-12">  </span>
<span id="cb17-13">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> </span>
<span id="cb17-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">when</span> n_case_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> </span>
<span id="cb17-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>( (n_case_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n_case_pred_14) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_case_actl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb17-16">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> pctdiff_case_pred_14 ,  </span>
<span id="cb17-17">    </span>
<span id="cb17-18">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> </span>
<span id="cb17-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">when</span> n_death_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> </span>
<span id="cb17-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>( (n_death_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n_death_pred_14) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_death_actl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb17-21">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> pctdiff_death_pred_14 ,  </span>
<span id="cb17-22">    </span>
<span id="cb17-23">  </span>
<span id="cb17-24">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> </span>
<span id="cb17-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">when</span> n_case_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> </span>
<span id="cb17-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>( (n_case_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n_case_pred_21) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_case_actl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb17-27">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> pctdiff_case_pred_21 ,  </span>
<span id="cb17-28">    </span>
<span id="cb17-29">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> </span>
<span id="cb17-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">when</span> n_death_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> </span>
<span id="cb17-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>( (n_death_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n_death_pred_21) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_death_actl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb17-32">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> pctdiff_death_pred_21 ,  </span>
<span id="cb17-33">    </span>
<span id="cb17-34">  </span>
<span id="cb17-35">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> </span>
<span id="cb17-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">when</span> n_case_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> </span>
<span id="cb17-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>( (n_case_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n_case_pred_28) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_case_actl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb17-38">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> pctdiff_case_pred_28 ,  </span>
<span id="cb17-39">    </span>
<span id="cb17-40">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> </span>
<span id="cb17-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">when</span> n_death_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span> </span>
<span id="cb17-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>( (n_death_actl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n_death_pred_28) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_death_actl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb17-43">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> pctdiff_death_pred_28 ,  </span>
<span id="cb17-44">    </span>
<span id="cb17-45">  </span>
<span id="cb17-46">  </span>
<span id="cb17-47">  mm.<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb17-48">  </span>
<span id="cb17-49"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> `sonorous<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>wharf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">302611</span>`.`dbt_emily`.`model_monitor` <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">as</span> mm</span></code></pre></div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Note that, in many cases, the distinction between a data producer and consumer is transient and somewhat arbitrary. In many cases, the same person can be both. Here, I use the terms mostly to differentiate the <em>goal</em> of a specific step of work. By “data producer”, I mean someone engaged in the act of wrangling source data into a form suitable for analysis; by “data consumer”, I mean someone actually using that wrangled data for reporting, analysis, visualization, modeling, etc.↩︎</p></li>
<li id="fn2"><p>As one <em>example</em> – not a prescription for how all such vocabularies should work – one might define that all counts start with <code>N_</code> and are non-negative integers; all identified start with <code>ID_</code> and are non-null↩︎</p></li>
<li id="fn3"><p><code>dbt</code> has adapters for most major databases and engines including Amazon Redshift, Snowflake, and Apache Spark. An up-to-date list is available <a href="https://docs.getdbt.com/docs/available-adapters/">here</a>↩︎</p></li>
<li id="fn4"><p>Some but not all databases natively support local variables, but <code>dbt</code>’s approach works equally well with those that do not↩︎</p></li>
<li id="fn5"><p>One excellent feature of this project is the impressive amount of onboarding and documentation materials↩︎</p></li>
<li id="fn6"><p>In fact, many COVID models were unduly criticized because their purpose was not strictly to have the most accurate forecast possible.↩︎</p></li>
<li id="fn7"><p>Technically, this table should be static, so the same information could be included with <code>dbt</code>’s <a href="https://docs.getdbt.com/docs/building-a-dbt-project/seeds">Seeds</a> feature↩︎</p></li>
<li id="fn8"><p>For another exploration of using Jinja templating to generate SQL, check out this nice <a href="https://multithreaded.stitchfix.com/blog/2017/07/06/one-weird-trick/">blog post</a> from Stitch Fix↩︎</p></li>
<li id="fn9"><p>Ordinarily, we would want to be careful setting null values to 0. We would not want to lie and imply the existence of missing data to nominally uphold a contract. However, this is the correct approach here. Our indicator variables in this case come from tables which only contain the <code>1</code> or “presence” values (e.g.&nbsp;the <code>hpsa</code> relation which provides <code>ind_county_hpsa</code> only has records for counties which are shortage areas) so this is a safe approach.↩︎</p></li>
<li id="fn10"><p>In fact, this could also be a macro, as I introduce before, and shipped in a package to apply across all data models in an analytical database. To make the narrative of this example easier to follow, I leave it as a standard query model.↩︎</p></li>
<li id="fn11"><p>An automatically created table containing metadata such as field names and types for each table in a database↩︎</p></li>
<li id="fn12"><p>For those interested in the nitty gritty details, we must loop here because Jinja does not allow the more compact python list comprehensions. Additionally, Jinja only allows the python <code>append</code> method in display brackets <code>{{}}</code> so the <code>or ''</code> is a trick to silence the output, per <a href="http://svn.python.org/projects/external/Jinja-2.1.1/docs/_build/html/faq.html#isn-t-it-a-terrible-idea-to-put-logic-into-templates">this site</a>.↩︎</p></li>
<li id="fn13"><p>Note that if you have installed dbt previously, this solution might not work for you. The python <code>re</code> library for regular expressions was not enabled inside dbt’s Jinja until the recent release of <a href="https://github.com/fishtown-analytics/dbt/releases/tag/v0.19.0">v0.19.0</a> ↩︎</p></li>
<li id="fn14"><p>The add-on package <code>dbt-utils</code> contains many more common tests such as <code>unique_combination</code>, <code>not_null_where</code>, etc.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>data</category>
  <category>sql</category>
  <category>dbt</category>
  <guid>https://emilyriederer.com/post/convo-dbt/</guid>
  <pubDate>Sat, 06 Feb 2021 06:00:00 GMT</pubDate>
  <media:content url="https://emilyriederer.com/post/convo-dbt/featured.png" medium="image" type="image/png" height="61" width="144"/>
</item>
</channel>
</rss>
