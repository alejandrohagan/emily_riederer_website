{
  "hash": "fc3781165f633d801aff7181dda23274",
  "result": {
    "markdown": "---\ntitle: \"Workflows for querying databases via R\"\ndescription: \"Tricks for modularizing and refactoring your projects SQL/R interface. *(Image source [techdaily.ca](https://techdaily.ca))*\"\nauthor: \"Emily Riederer\"\ndate: \"2021-07-14\"\ncategories: [rstats, workflow, sql]\nimage: \"featured.jpg\"\naliases:\n  - /post/sql-r-flow/\n---\n\n\nSimple, self-contained, reproducible examples are a common part of good software documentation. However, in the spirit of brevity, these examples often do not demonstrate the most sustainable or flexible *workflows* for integrating software tools into large projects. In this post, I document a few mundane but useful patterns for querying databases in R using the `DBI` package. \n\nA prototypical example of forming and using a database connection with `DBI` might look something like this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DBI)\n\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\ndbWriteTable(con, \"diamonds\", ggplot2::diamonds)\ndat <- dbGetQuery(con, \"select cut, count(*) as n from diamonds group by 1\")\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        cut     n\n1      Fair  1610\n2      Good  4906\n3     Ideal 21551\n4   Premium 13791\n5 Very Good 12082\n```\n:::\n:::\n\n\nA connection is formed (in this case to a fake database that lives only in my computer's RAM), the `diamonds` dataset from the `ggplot2` package is written to the database (once again, this is for example purposes only; a real database would, of course, have data), and `dbGetQuery()` executes a query on the resulting table. \n\nHowever, as queries get longer and more complex, this succinct solution becomes less attractive. Writing the query directly inside `dbGetQuery()` blurs the line between \"glue code\" (rote connection and execution) and our more nuanced, problem-specific logic. This makes the latter harder to extract, share, and version. \n\nBelow, I demonstrate a few alternatives that I find helpful in different circumstances such as reading queries that are saved separately (in different files or at web URLs) and forming increasingly complex query templates. Specifically, we'll see how to:\n\n- Read a query from a separate file\n- Retrieve a query from a web URL\n- Convert a query into a template\n- Compose more complex queries from templates\n- Store and access queries/templates from within packages\n- Bonus: Data Testing\n\n## Read query from separate file\n\nA first enhancement is to isolate your SQL script in a separate file than the \"glue code\" that executes it. This improves readability and makes scripts more portable between projects. If a coworker who uses python or runs SQL through some other tool wishes to use your script, it's more obvious which parts are relevant. Additionally, its easier to version control: we likely care far more about changes to the actual query than the boilerplate code that executes it so it feels more transparent to track them separately.\n\nTo do this, we can save our query in a separate file. We'll call it `query-cut.sql`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect\n  cut,\n  count(*) as n\nfrom diamonds\ngroup by 1\n```\n:::\n\n\nThen, in our script that pulls the data, we can read that other file with `readLines()` and give the results of that to the `dbGetQuery()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DBI)\n\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\nquery <- paste(readLines(\"query-cut.sql\"), collapse = \"\\n\")\ndat <- dbGetQuery(con, query)\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        cut     n\n1      Fair  1610\n2      Good  4906\n3     Ideal 21551\n4   Premium 13791\n5 Very Good 12082\n```\n:::\n:::\n\n\nOf course, if you wish you could define a helper function for the bulky `paste(readLines(...))` bit.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_source <- function(path) {paste(readLines(path), collapse = \"\\n\")}\n```\n:::\n\n\n## Read query from URL (like GitHub)\n\nSometimes, you might prefer that your query not live in your project at all. For example, if a query is used across multiple projects or if it changes frequently or is maintained by multiple people, it might live in a separate repository. In this case, the exact same workflow may be used if the path is replaced by a URL to a plain-text version of the query. (On GitHub, you may find such a link by clicking the \"Raw\" button when a file is pulled up.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DBI)\n\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\nurl <- \"https://raw.githubusercontent.com/emilyriederer/website/master/content/post/sql-r-flow/query-cut.sql\"\nquery <- paste(readLines(url), collapse = \"\\n\")\ndat <- dbGetQuery(con, query)\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        cut     n\n1      Fair  1610\n2      Good  4906\n3     Ideal 21551\n4   Premium 13791\n5 Very Good 12082\n```\n:::\n:::\n\n\nThis works because the `query` variable simply contains our complete text file read from the internet:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(query)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nselect\n  cut,\n  count(*) as n\nfrom diamonds\ngroup by 1\n```\n:::\n:::\n\n\nAlternatively, in an institutional setting you may find that you need some sort of authentication or proxy to access GitHub from R. In that case, you may retrieve the same query with an HTTP request instead using the `httr` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr)\n\nurl <- \"https://raw.githubusercontent.com/emilyriederer/website/master/content/post/sql-r-flow/query-cut.sql\"\nquery <- content(GET(url))\ncat(query)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nselect\n  cut,\n  count(*) as n\nfrom diamonds\ngroup by 1\n```\n:::\n:::\n\n\n## Use query template\n\nSeparating the query from its actual execution also allows us to do query pre-processing. For example, instead of a normal query, we could write a query template with a wildcard variable. Consider the file `template-cut.sql`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect\n  cut,\n  count(*) as n\nfrom diamonds\nwhere price < {max_price}\ngroup by 1\n```\n:::\n\n\nThis query continues to count the number of diamonds in our dataset by their cut classification, but now is has parameterized the `max_price` variable. Then, we may use the `glue` package to populate this template with a value of interest before executing the script.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DBI)\nlibrary(glue)\n\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\ntemplate <- paste(readLines(\"template-cut.sql\"), collapse = \"\\n\")\nquery <- glue(template, max_price = 500)\ndat <- dbGetQuery(con, query)\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        cut   n\n1      Fair   7\n2      Good 226\n3     Ideal 628\n4   Premium 215\n5 Very Good 653\n```\n:::\n:::\n\n\nThis is a useful alternative to databases that do not allow for local variables. \n\n## Compose more complex queries\n\nThe idea of templating opens up far more interesting possibilities. For example, consider a case where you wish to frequently create the same data structure for a different population of observations (e.g. a standard set of KPIs for different A/B test experiments, reporting for different business units, etc.) \n\nA boilerplate part of the query could be defined as a template ready to accept a CTE or a subquery for a specific population of interest. For example, we could write a file `template-multi.sql`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwith\nsample as ({query_sample}),\nprices as (select id, cut, price from diamonds)\nselect prices.*\nfrom\n  prices\n  inner join\n  sample\n  on\n  prices.id = diamonds.id\n```\n:::\n\n\nThen our \"glue code\" can combine the static and dynamic parts of the query at runtime before executing. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemplate <- paste(readLines(\"template-multi.sql\"), collapse = \"\\n\")\nquery_sample <- \"select * from diamonds where cut = 'Very Good' and carat < 0.25\"\nquery <- glue(template, query_sample = query_sample)\ncat(query)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nwith\nsample as (select * from diamonds where cut = 'Very Good' and carat < 0.25),\nprices as (select id, cut, price from diamonds)\nselect prices.*\nfrom\n  prices\n  inner join\n  sample\n  on\n  prices.id = diamonds.id\n```\n:::\n:::\n\n\n(Of course, this may seem like overkill and an unnecessarily inefficent query for the example above where a few more `where` conditions could have sufficed. But one can imagine more useful applications in a traditional setting where multiple tables are being joined.)\n\n## Query package\n\nFinally, these queries and query templates could even be shipped as part of an R package. Additional text files may be placed in the `inst/` directory and their paths discovered by `system.file()`. So, if your package `myPkg` were to contain the `template-multi.sql` file we saw above, you could provide a function to access it like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconstruct_query <- function(stub, ...) {\n  \n  path <- system.file(stub, package = 'myPkg')\n  template <- paste(readLines(path), collapse = '\\n')\n  query <- glue::glue(template, ...)\n  return(query)\n  \n}\n```\n:::\n\n\nThen, that function could be called like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample <- \"select * from diamonds where cut = 'Very Good' and carat < 0.25\"\nquery <- construct_query(\"multi\", query_sample = sample)\n```\n:::\n\n\nThis approach has some benefits such as making it easier to share queries across users and benefit from package versioning and environment management standards. However, there are of course other risks; only dynamically generating queries could limit reproducibility or documentation about the actual query run to generate data. Thus, it might be a good idea to save the resulting query along with the resulting data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- dbGetQuery(con, query)\nsaveRDS(dat, \"data.rds\")\nwriteLines(query, \"query-data.sql\")\n```\n:::\n\n\n## Bonus: Data Testing\n\nAlthough unrelated to the previous workflow, another nice aspect of working with SQL through R is the ability to use R's superior toolkit for creating small datasets on the fly for testing purposes. \n\nMocking data to easily test SQL can be a tedious exercise since you generally need to write out the dataset row-by-row:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nINSERT INTO test_tbl\n  ( x, y, z )\nVALUES\n  (1, 'A', NA), \n  (2, 'B', 0), \n  (3, 'C', 1);\n```\n:::\n\n\nThis may be fine for a few rows, but it can easily get cumbersome when you require a mock dataset in the 10s or 20s of rows. \n\nOf course, R has many helpful functions for generating data including sequences, predefined vectors (e.g. `letters`), and random number generators. This can make it easy to quickly generate data and push it to a database for testing SQL scripts:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 26\ntest_df <- data.frame(\n  x = 1:n,\n  y = LETTERS,\n  z = sample(c(0,1,NA), n, replace = TRUE)\n)\ndbWriteTable(con, \"test_tbl\", test_df)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}